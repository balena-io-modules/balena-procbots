{"version":3,"sources":["services/flowdock.ts"],"names":[],"mappings":";;AAiBA,4BAA4B;AAC5B,6BAA6B;AAC7B,2CAA2C;AAK3C;IAAA;QACY,iBAAY,GAAG,IAAI,CAAC,QAAQ,CAAC,UAAU,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IAqCnE,CAAC;IAnCU,QAAQ,CAAC,IAAwB;QAIpC,MAAM,WAAW,GAAuB,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC,IAAI,EAAE,GAAG;YACtE,MAAM,CAAC,GAAG,KAAK,IAAI,CAAC,YAAY,CAAC;QACrC,CAAC,CAAC,CAAC;QACH,MAAM,eAAe,GAA+B,WAAW,CAAC,QAAQ,CAAC;QAGzE,MAAM,WAAW,GAAG;YAChB,IAAI,EAAE,eAAe;YACrB,IAAI,EAAE,IAAI;YACV,GAAG,EAAE,gDAAgD,eAAe,CAAC,MAAM,EAAE;SAChF,CAAC;QAGF,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,IAAI,CAAC,CAAC,OAAY;YAC/C,MAAM,CAAC;gBACH,QAAQ,EAAE,OAAO;gBACjB,MAAM,EAAE,IAAI,CAAC,YAAY;aAC5B,CAAC;QACN,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,GAAU;YAChB,OAAO,CAAC,GAAG,CAAC,gDAAgD,GAAG,CAAC,OAAO,EAAE,CAAC,CAAC;YAC3E,MAAM,CAAC;gBACH,GAAG;gBACH,MAAM,EAAE,IAAI,CAAC,YAAY;aAC5B,CAAC;QACN,CAAC,CAAC,CAAC;IACP,CAAC;IAGD,IAAI,WAAW;QACX,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC;IAC7B,CAAC;CACJ;AAtCD,0CAsCC;AAED;IACI,MAAM,CAAC,IAAI,eAAe,EAAE,CAAC;AACjC,CAAC;AAFD,oDAEC","file":"flowdock.js","sourcesContent":["/*\nCopyright 2016-2017 Resin.io\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n   http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\nimport * as Promise from 'bluebird';\nimport * as _ from 'lodash';\nimport * as path from 'path';\nimport * as request from 'request-promise';\nimport { FlowdockEmitRequestContext } from './flowdock-types';\nimport { ServiceEmitContext, ServiceEmitRequest, ServiceEmitResponse, ServiceEmitter } from './service-types';\n\n// The Flowdock service currently allows a client to send data to an Inbox.\nexport class FlowdockService implements ServiceEmitter {\n    private _serviceName = path.basename(__filename.split('.')[0]);\n\n    public sendData(data: ServiceEmitRequest): Promise<ServiceEmitResponse> {\n        // Try and find the context for the Flowdock request.\n        // This code is going to be required in all sendData() methods. We should add an\n        // interface method that provides it.\n        const emitContext: ServiceEmitContext = _.pickBy(data.contexts, (_val, key) => {\n            return key === this._serviceName;\n        });\n        const flowdockContext: FlowdockEmitRequestContext = emitContext.flowdock;\n\n        //  Make a straight post to the inbox from the client.\n        const requestOpts = {\n            body: flowdockContext,\n            json: true,\n            url: `https://api.flowdock.com/messages/team_inbox/${flowdockContext.roomId}`,\n        };\n\n        // We don't wait for a response, we have no control over it anyway.\n        return request.post(requestOpts).then((resData: any) => {\n            return {\n                response: resData,\n                source: this._serviceName\n            };\n        }).catch((err: Error) => {\n            console.log(`FlowdockAdapter failed to post to Flowdock:\\n${err.message}`);\n            return {\n                err,\n                source: this._serviceName\n            };\n        });\n    }\n\n    // Get the name of this service.\n    get serviceName(): string {\n        return this._serviceName;\n    }\n}\n\nexport function createServiceEmitter(): ServiceEmitter {\n    return new FlowdockService();\n}\n"],"sourceRoot":"../../lib"}