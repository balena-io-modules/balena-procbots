{"version":3,"sources":["services/flowdock.ts"],"names":[],"mappings":"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","file":"flowdock.js","sourcesContent":["/*\nCopyright 2016-2017 Resin.io\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n   http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\nimport * as Promise from 'bluebird';\nimport { Session } from 'flowdock';\nimport * as path from 'path';\nimport {\n\tFlowdockConnectionDetails, FlowdockEmitContext,\n\tFlowdockHandle, FlowdockResponse\n} from './flowdock-types';\nimport { ServiceEmitter, ServiceListener } from './service-types';\nimport { ServiceUtilities } from './service-utilities';\n\n// TODO: Work out how to do dataHub stuff\nexport class FlowdockService extends ServiceUtilities implements ServiceEmitter, ServiceListener {\n\tprivate static _serviceName = path.basename(__filename.split('.')[0]);\n\tprivate session: Session;\n\tprivate org: string;\n\n\tprotected connect(data: FlowdockConnectionDetails): void {\n\t\tthis.session = new Session(data.token);\n\t\tthis.org = data.organization;\n\t}\n\n\tprotected emitData(context: FlowdockEmitContext): Promise<FlowdockResponse> {\n\t\treturn new Promise<FlowdockResponse>((resolve, reject) => {\n\t\t\tthis.session.on('error', reject);\n\t\t\tthis.session._request(context.method, context.path, context.payload, (error, response) => {\n\t\t\t\tthis.session.removeListener('error', reject);\n\t\t\t\tif (error) {\n\t\t\t\t\treject(error);\n\t\t\t\t} else {\n\t\t\t\t\tresolve(response);\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t}\n\n\tprotected startListening(): void {\n\t\t// Get a list of known flows from the session\n\t\tthis.session.flows((error: any, flows: any) => {\n\t\t\tif (error) {\n\t\t\t\tthrow error;\n\t\t\t}\n\t\t\t// Enclose a list of flow names\n\t\t\tconst flowIdToFlowName: {[key: string]: string} = {};\n\t\t\tfor (const flow of flows) {\n\t\t\t\tflowIdToFlowName[flow.id] = flow.parameterized_name;\n\t\t\t}\n\t\t\tconst stream = this.session.stream(Object.keys(flowIdToFlowName));\n\t\t\tstream.on('message', (message: any) => {\n\t\t\t\tthis.queueEvent({\n\t\t\t\t\tdata: {\n\t\t\t\t\t\tcookedEvent: {\n\t\t\t\t\t\t\tcontext: message.thread_id,\n\t\t\t\t\t\t\tflow: flowIdToFlowName[message.flow],\n\t\t\t\t\t\t\ttype: message.event,\n\t\t\t\t\t\t},\n\t\t\t\t\t\trawEvent: message,\n\t\t\t\t\t\tsource: FlowdockService._serviceName,\n\t\t\t\t\t},\n\t\t\t\t\tworkerMethod: this.handleEvent,\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\t\t// Create a keep-alive endpoint for contexts that sleep between web requests\n\t\tthis.expressApp.get(`/${FlowdockService._serviceName}/`, (_formData, response) => {\n\t\t\tresponse.sendStatus(200);\n\t\t});\n\t}\n\n\t/**\n\t * Verify the event before enqueueing. Since we connect to a web stream we can assume events are legitimate.\n\t */\n\tprotected verify(): boolean {\n\t\treturn true;\n\t}\n\n\t/**\n\t * Get the service name, as required by the framework.\n\t * @returns  The specific service name for Flowdock.\n\t */\n\tget serviceName(): string {\n\t\treturn FlowdockService._serviceName;\n\t}\n\n\t/**\n\t * Retrieve the SDK API handle for Flowdock.\n\t * @returns  The Flowdock SDK API handle.\n\t */\n\tget apiHandle(): FlowdockHandle {\n\t\treturn {\n\t\t\tflowdock: this.session\n\t\t};\n\t}\n}\n\n/**\n * Build this class, typed and activated as a listener.\n * @returns  Service Listener object, awakened and ready to go.\n */\nexport function createServiceListener(data: FlowdockConnectionDetails): ServiceListener {\n\treturn new FlowdockService(data, true);\n}\n\n/**\n * Build this class, typed as an emitter.\n * @returns  Service Emitter object, ready for your events.\n */\nexport function createServiceEmitter(data: FlowdockConnectionDetails): ServiceEmitter {\n\treturn new FlowdockService(data, false);\n}\n"],"sourceRoot":"../../lib"}