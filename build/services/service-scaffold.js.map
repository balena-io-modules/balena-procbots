{"version":3,"sources":["services/service-scaffold.ts"],"names":[],"mappings":"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","file":"service-scaffold.js","sourcesContent":["/*\n Copyright 2016-2017 Resin.io\n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n you may not use this file except in compliance with the License.\n You may obtain a copy of the License at\n\n http://www.apache.org/licenses/LICENSE-2.0\n\n Unless required by applicable law or agreed to in writing, software\n distributed under the License is distributed on an \"AS IS\" BASIS,\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n See the License for the specific language governing permissions and\n limitations under the License.\n */\n\nimport TypedError = require('typed-error');\nimport * as Promise from 'bluebird';\nimport * as bodyParser from 'body-parser';\nimport * as express from 'express';\nimport * as _ from 'lodash';\nimport { ProcBotError } from '../framework/procbot';\nimport { ProcBotErrorCode } from '../framework/procbot-types';\nimport { Worker } from '../framework/worker';\nimport { WorkerClient } from '../framework/worker-client';\nimport { Logger, LogLevel } from '../utils/logger';\nimport {\n\tServiceScaffoldServiceEvent, ServiceScaffoldWorkerEvent\n} from './service-scaffold-types';\nimport {\n\tServiceAPIHandle, ServiceEmitContext, ServiceEmitRequest, ServiceEmitResponse,\n\tServiceEmitter, ServiceListener, ServiceRegistration,\n} from './service-types';\n\n/**\n * A scaffold class to handle a bunch of the repetitive work associated with being a ServiceListener and ServiceEmitter\n *\n * This class provides:\n * - An express app, if asked for.\n * - A logger.\n * - An event registration and handling standard.\n * - Checks for and extracts data from context.\n * - A standard way of getting contextualised workers.\n *\n * In exchange you agree to:\n * - provide a `emitData` method which takes a ServiceEmitContext and returns a promise.\n * - provide a `verify` function which should check that incoming data isn't spoofed.\n * - provide a `serviceName` getter, which because it is based on file path cannot be inherited away.\n * - provide a `apiHandle` getter, which should return the underlying object that executes the requests.\n * - enqueue your events with `context` and `event`, as per `ServiceScaffoldServiceEvent`.\n */\nexport abstract class ServiceScaffold<T> extends WorkerClient<T> implements ServiceListener, ServiceEmitter {\n\t/** A singleton express instance for all web-hook based services to share. */\n\tprivate static singletonExpressApp: express.Express;\n\n\tprivate instanceExpressApp?: express.Express;\n\n\t/** A place to put output for debug and reference. */\n\tprivate loggerInstance = new Logger();\n\n\t/** Store a list of actions to perform when particular actions happen */\n\tprivate eventListeners: { [event: string]: ServiceRegistration[] } = {};\n\n\tconstructor(expressApp?: express.Express) {\n\t\tsuper();\n\t\tthis.instanceExpressApp = expressApp;\n\t}\n\n\t/**\n\t * Store an event of interest, so that the method gets triggered appropriately.\n\t * @param registration  Registration object with event trigger and other details.\n\t */\n\tpublic registerEvent(registration: ServiceRegistration): void {\n\t\t// Store each event registration in an object of arrays.\n\t\tfor (const event of registration.events) {\n\t\t\tif (!this.eventListeners[event]) {\n\t\t\t\tthis.eventListeners[event] = [];\n\t\t\t}\n\t\t\tthis.eventListeners[event].push(registration);\n\t\t}\n\t}\n\n\t/**\n\t * Emit data to the service.\n\t * @param data  Service Emit Request to send, if relevant.\n\t * @returns     Details of the successful transmission from the service.\n\t */\n\tpublic sendData(data: ServiceEmitRequest): Promise<ServiceEmitResponse> {\n\t\tconst context = data.contexts[this.serviceName] as ServiceEmitContext;\n\t\tif (!context) {\n\t\t\treturn Promise.resolve({\n\t\t\t\terr: new ProcBotError(ProcBotErrorCode.EmitterContextAbsent, `No ${this.serviceName} context`),\n\t\t\t\tsource: this.serviceName,\n\t\t\t});\n\t\t}\n\n\t\treturn this.emitData(context)\n\t\t.then((response: any) => {\n\t\t\treturn {\n\t\t\t\tresponse,\n\t\t\t\tsource: this.serviceName,\n\t\t\t};\n\t\t})\n\t\t.catch((err: TypedError) => {\n\t\t\treturn {\n\t\t\t\terr,\n\t\t\t\tsource: this.serviceName,\n\t\t\t};\n\t\t});\n\t}\n\n\t/**\n\t * Queue an event ready for running in a child, here to type guard.\n\t * @param data  The WorkerEvent to add to the queue for processing.\n\t */\n\tprotected queueData = (data: ServiceScaffoldServiceEvent) => {\n\t\tif (this.verify(data)) {\n\t\t\tsuper.queueEvent({\n\t\t\t\tdata,\n\t\t\t\tworkerMethod: this.handleEvent\n\t\t\t});\n\t\t} else {\n\t\t\tthis.logger.log(LogLevel.WARN, `Event failed verification.`);\n\t\t}\n\t}\n\n\t/**\n\t * Emit a payload to the endpoint defined, resolving when done.\n\t * endpoint  Definition of the endpoint to emit to.\n\t * payload   Data to be delivered.\n\t */\n\tprotected abstract emitData(data: ServiceEmitContext): Promise<any>;\n\n\t/**\n\t * Verify the event before enqueueing.  A naive approach could be to simply return true, but that must be explicit.\n\t * @param data  The data object that was enqueued.\n\t */\n\tprotected abstract verify(data: ServiceScaffoldServiceEvent): boolean\n\n\t/**\n\t * Get a Worker object for the provided event, threaded by context.\n\t * @param event  Event as enqueued by the listener.\n\t * @returns      Worker for the context associated.\n\t */\n\tprotected getWorker = (event: ServiceScaffoldWorkerEvent): Worker<T> => {\n\t\t// Attempt to retrieve an active worker for the context\n\t\tconst context = event.data.context;\n\t\tconst retrieved = this.workers.get(context);\n\t\tif (retrieved) {\n\t\t\treturn retrieved;\n\t\t}\n\t\t// Create and store a worker for the context\n\t\tconst created = new Worker<T>(context, this.removeWorker);\n\t\tthis.workers.set(context, created);\n\t\treturn created;\n\t}\n\n\t/**\n\t * Create or retrieve the express app.\n\t * @returns  Express server app.\n\t */\n\tprotected get expressApp(): express.Express {\n\t\tif (this.instanceExpressApp) {\n\t\t\treturn this.instanceExpressApp;\n\t\t}\n\t\tif (!ServiceScaffold.singletonExpressApp) {\n\t\t\t// Either MESSAGE_SERVICE_PORT from environment or PORT from Heroku environment\n\t\t\tconst port = process.env.MESSAGE_SERVICE_PORT || process.env.PORT;\n\t\t\tif (!port) {\n\t\t\t\tthrow new Error('No inbound port specified for express server.');\n\t\t\t}\n\t\t\t// Create and log an express instance\n\t\t\tServiceScaffold.singletonExpressApp = express();\n\t\t\tServiceScaffold.singletonExpressApp.use(bodyParser.json());\n\t\t\tServiceScaffold.singletonExpressApp.listen(port);\n\t\t\tthis.logger.log(LogLevel.INFO, `---> Started ServiceScaffold shared web server on port '${port}'.`);\n\t\t}\n\t\treturn ServiceScaffold.singletonExpressApp;\n\t}\n\n\t/**\n\t * Retrieve the logger, here to write-protect it\n\t * @returns  Logger instance for this class\n\t */\n\tprotected get logger(): Logger {\n\t\treturn this.loggerInstance;\n\t}\n\n\tprotected get eventsRegistered(): string[] {\n\t\treturn _.keys(this.eventListeners);\n\t}\n\n\t/**\n\t * Pass an event to registered listenerMethods.\n\t * @param data  Enqueued data from the listener.\n\t * @returns     Promise that resolves once the event is handled.\n\t */\n\tprotected handleEvent = (data: ServiceScaffoldServiceEvent): Promise<void> => {\n\t\t// Retrieve and execute all the listener methods, squashing their responses\n\t\tconst listeners = this.eventListeners[data.type] || [];\n\t\treturn Promise.map(listeners, (listener) => {\n\t\t\treturn listener.listenerMethod(listener, data);\n\t\t}).return();\n\t}\n\n\t/**\n\t * Get the service name, as required by the framework.\n\t * @return  Name of the service.\n\t */\n\tabstract get serviceName(): string\n\n\t/**\n\t * Retrieve the SDK API instance handle for the service, should one exist.\n\t * @return  Service SDK API handle or void.\n\t */\n\tabstract get apiHandle(): ServiceAPIHandle | void;\n}\n"],"sourceRoot":"../../lib"}