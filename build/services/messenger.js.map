{"version":3,"sources":["services/messenger.ts"],"names":[],"mappings":"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","file":"messenger.js","sourcesContent":["/*\n Copyright 2016-2017 Resin.io\n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n you may not use this file except in compliance with the License.\n You may obtain a copy of the License at\n\n http://www.apache.org/licenses/LICENSE-2.0\n\n Unless required by applicable law or agreed to in writing, software\n distributed under the License is distributed on an \"AS IS\" BASIS,\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n See the License for the specific language governing permissions and\n limitations under the License.\n */\n\nimport * as Promise from 'bluebird';\nimport * as _ from 'lodash';\nimport * as path from 'path';\n\nimport { LogLevel } from '../utils/logger';\nimport {\n\tEmitInstructions, MessengerConstructor,\n\tMessengerResponse, TranslatorDictionary, TransmitInformation,\n} from './messenger-types';\nimport { createTranslator } from './messenger/translators/translator';\nimport { ServiceScaffold } from './service-scaffold';\nimport { ServiceScaffoldEvent } from './service-scaffold-types';\nimport {\n\tServiceEmitRequest, ServiceEmitResponse, ServiceEmitter,\n\tServiceListener, ServiceRegistration, ServiceType,\n} from './service-types';\n\n/**\n * A service aggregator class that combines the interactions of several compatible\n * services and translates interactions with them into a communal object structure.\n */\nexport class MessengerService extends ServiceScaffold<string> implements ServiceListener, ServiceEmitter {\n\tprivate static _serviceName = path.basename(__filename.split('.')[0]);\n\tprivate translators: TranslatorDictionary;\n\n\tconstructor(data: MessengerConstructor) {\n\t\tsuper(data);\n\t\t// Our super might have built a genuine express instance out of a port number\n\t\tdata.server = this.expressApp;\n\n\t\t// This loop creates a set of translators for each sub-service this instance interacts with.\n\t\tthis.translators = {};\n\t\t_.forEach(data.subServices, (subConnectionDetails, subServiceName) => {\n\t\t\tthis.logger.log(LogLevel.INFO, `---> Constructing '${subServiceName}' translator.`);\n\t\t\tthis.translators[subServiceName] = createTranslator(subServiceName, subConnectionDetails, data.dataHubs);\n\t\t});\n\n\t\t// This branch creates listeners for every sub-service, if relevant.\n\t\tif (data.type === ServiceType.Listener) {\n\t\t\t_.forEach(data.subServices, (subConnectionDetails, subServiceName) => {\n\t\t\t\tthis.logger.log(LogLevel.INFO, `---> Constructing '${subServiceName}' listener.`);\n\t\t\t\tconst subTranslator = this.translators[subServiceName];\n\t\t\t\tsubTranslator.mergeGenericDetails(subConnectionDetails, data);\n\t\t\t\tconst subListener = require(`./${subServiceName}`).createServiceListener(subConnectionDetails);\n\t\t\t\t// This causes listeners to pass on any events they hear.\n\t\t\t\tsubListener.registerEvent({\n\t\t\t\t\tevents: subTranslator.getAllEventTypes(),\n\t\t\t\t\tlistenerMethod: (_registration: ServiceRegistration, event: ServiceScaffoldEvent): Promise<void> => {\n\t\t\t\t\t\t// This translates and enqueues any events that match a registered interest.\n\t\t\t\t\t\tif (_.includes(this.eventsRegistered, subTranslator.eventIntoMessageType(event))) {\n\t\t\t\t\t\t\treturn subTranslator.eventIntoMessage(event)\n\t\t\t\t\t\t\t.then(this.queueData);\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn Promise.resolve();\n\t\t\t\t\t},\n\t\t\t\t\tname: `${subServiceName}=>${this.serviceName}`,\n\t\t\t\t});\n\t\t\t});\n\t\t}\n\t}\n\n\t/**\n\t * Emit a payload to the endpoint defined, resolving when done.\n\t * @param data  details of the call and associated data\n\t * @returns     A promise that resolves to the response\n\t */\n\tprotected emitData(data: TransmitInformation): Promise<MessengerResponse> {\n\t\t// Find details of how to connect and what to emit from the translators\n\t\treturn Promise.props({\n\t\t\tconnection: this.translators[data.target.service].messageIntoEmitterConstructor(data),\n\t\t\temit: this.translators[data.target.service].messageIntoEmitDetails(data),\n\t\t})\n\t\t.then((details: { connection: object, emit: EmitInstructions } ) => {\n\t\t\t// Instantiates a one-shot emitter, because requests might have changing credentials.\n\t\t\tconst emitter = require(`./${data.target.service}`).createServiceEmitter(details.connection);\n\t\t\t// This converts a method path, represented as an array of strings, eg ['comment', 'create']\n\t\t\t// into a method from a possibly nested SDK object, eg Front.comment.create\n\t\t\tconst sdk = emitter.apiHandle[data.target.service];\n\t\t\tlet method = sdk;\n\t\t\t_.forEach(details.emit.method, (nodeName) => {\n\t\t\t\tmethod = method[nodeName];\n\t\t\t});\n\t\t\t// Bundles the response and sends it on its way.\n\t\t\tconst request: ServiceEmitRequest = {\n\t\t\t\tcontexts: { [emitter.serviceName]: { method: method.bind(sdk), data: details.emit.payload } },\n\t\t\t\tsource: this.serviceName,\n\t\t\t};\n\t\t\treturn emitter.sendData(request);\n\t\t})\n\t\t// Translates any response from the sub-service emitter, before passing it on up.\n\t\t.then((response: ServiceEmitResponse) => {\n\t\t\treturn this.translators[data.target.service].responseIntoMessageResponse(data, response.response);\n\t\t});\n\t}\n\n\t/**\n\t * Verify the event before enqueueing.\n\t * @returns  true, this trusts that the sub-listener will have performed it's own verification.\n\t */\n\tprotected verify(): boolean {\n\t\treturn true;\n\t}\n\n\t/**\n\t * The name of this service, as required by the framework.\n\t * @returns  'messenger' string.\n\t */\n\tget serviceName(): string {\n\t\treturn MessengerService._serviceName;\n\t}\n\n\t/**\n\t * Retrieve the SDK API handle, if any.\n\t * @returns  void\n\t */\n\tget apiHandle(): void {\n\t\treturn;\n\t}\n}\n\n/**\n * Build this class, typed and activated as a listener.\n * @returns  Service Listener object, awakened and ready to go.\n */\nexport function createServiceListener(data: MessengerConstructor): ServiceListener {\n\treturn new MessengerService(data);\n}\n\n/**\n * Build this class, typed as an emitter.\n * @returns  Service Emitter object, ready for your events.\n */\nexport function createServiceEmitter(data: MessengerConstructor): ServiceEmitter {\n\treturn new MessengerService(data);\n}\n"],"sourceRoot":"../../lib"}