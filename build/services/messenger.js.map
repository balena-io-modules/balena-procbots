{"version":3,"sources":["services/messenger.ts"],"names":[],"mappings":";;AAgBA,oCAAoC;AACpC,4BAA4B;AAC5B,6BAA6B;AAE7B,8DAA8D;AAQ9D,2DAAuD;AAEvD,sBAA8B,SAAQ,oCAAwB;IAK7D,YAAY,IAAkC,EAAE,MAAe;QAC9D,KAAK,EAAE,CAAC;QACR,IAAI,CAAC,iBAAiB,GAAG,IAAI,CAAC,WAAW,CAAC;QAC1C,IAAI,CAAC,WAAW,GAAG,EAAE,CAAC;QACtB,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,WAAW,EAAE,CAAC,oBAAoB,EAAE,WAAW;YAC7D,IAAI,CAAC,WAAW,CAAC,WAAW,CAAC,GAAG,UAAU,CAAC,gBAAgB,CAAC,WAAW,EAAE,oBAAoB,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC;QAC9G,CAAC,CAAC,CAAC;QACH,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC;YACZ,IAAI,CAAC,cAAc,EAAE,CAAC;QACvB,CAAC;IACF,CAAC;IAES,QAAQ,CAAC,IAAqB;QACvC,MAAM,CAAC,OAAO,CAAC,KAAK,CAAC;YACpB,iBAAiB,EAAE,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,4BAA4B,CAAC,IAAI,CAAC;YAC3F,WAAW,EAAE,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,4BAA4B,CAAC,IAAI,CAAC;SACrF,CAAC,CAAC,IAAI,CAAC,CAAC,OAAoE;YAE5E,MAAM,OAAO,GAAG,OAAO,CAAC,KAAK,IAAI,CAAC,MAAM,CAAC,OAAO,EAAE,CAAC,CAAC,oBAAoB,CAAC,OAAO,CAAC,iBAAiB,CAAC,CAAC;YACpG,MAAM,CAAC,OAAO,CAAC,QAAQ,CAAC,EAAE,QAAQ,EAAE,EAAE,SAAS,EAAE,OAAO,CAAC,WAAW,EAAE,EAAE,CAAC,CAAC;QAC3E,CAAC,CAAC,CAAC;IACJ,CAAC;IAKS,MAAM;QACf,MAAM,CAAC,IAAI,CAAC;IACb,CAAC;IAEO,cAAc;QACrB,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,iBAAiB,EAAE,CAAC,oBAAoB,EAAE,cAAc;YAEtE,MAAM,WAAW,GAAG,OAAO,CAAC,KAAK,cAAc,EAAE,CAAC,CAAC,qBAAqB,CAAC,oBAAoB,CAAC,CAAC;YAC/F,WAAW,CAAC,aAAa,CAAC;gBAIzB,MAAM,EAAE,IAAI,CAAC,WAAW,CAAC,cAAc,CAAC,CAAC,cAAc,EAAE;gBACzD,cAAc,EAAE,CAAC,aAAkC,EAAE,KAAmB;oBACvE,IAAI,CAAC,WAAW,CAAC,cAAc,CAAC,CAAC,gBAAgB,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;gBAC/E,CAAC;gBACD,IAAI,EAAE,GAAG,cAAc,KAAK,IAAI,CAAC,WAAW,EAAE;aAC9C,CAAC,CAAC;QACJ,CAAC,CAAC,CAAC;IACJ,CAAC;IAMD,IAAI,WAAW;QACd,MAAM,CAAC,gBAAgB,CAAC,YAAY,CAAC;IACtC,CAAC;IAMD,IAAI,SAAS;QACZ,MAAM,CAAC;IACR,CAAC;;AAjEc,6BAAY,GAAG,IAAI,CAAC,QAAQ,CAAC,UAAU,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AADvE,4CAmEC;AAMD,+BAAsC,IAAkC;IACvE,MAAM,CAAC,IAAI,gBAAgB,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;AACzC,CAAC;AAFD,sDAEC;AAMD,8BAAqC,IAAkC;IACtE,MAAM,CAAC,IAAI,gBAAgB,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;AAC1C,CAAC;AAFD,oDAEC","file":"messenger.js","sourcesContent":["/*\n Copyright 2016-2017 Resin.io\n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n you may not use this file except in compliance with the License.\n You may obtain a copy of the License at\n\n http://www.apache.org/licenses/LICENSE-2.0\n\n Unless required by applicable law or agreed to in writing, software\n distributed under the License is distributed on an \"AS IS\" BASIS,\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n See the License for the specific language governing permissions and\n limitations under the License.\n */\n\nimport * as Promise from 'bluebird';\nimport * as _ from 'lodash';\nimport * as path from 'path';\n\nimport * as Translator from '../utils/translators/translator';\nimport { MessengerConnectionDetails, MessengerConstructionDetails, TransmitContext } from './messenger-types';\nimport {\n\tServiceEmitContext,\n\tServiceEmitResponse,\n\tServiceEmitter, ServiceEvent,\n\tServiceListener, ServiceRegistration,\n} from './service-types';\nimport { ServiceUtilities } from './service-utilities';\n\nexport class MessengerService extends ServiceUtilities<string> implements ServiceListener, ServiceEmitter {\n\tprivate static _serviceName = path.basename(__filename.split('.')[0]);\n\tprivate translators: { [service: string]: Translator.Translator };\n\tprivate connectionDetails: MessengerConnectionDetails;\n\n\tconstructor(data: MessengerConstructionDetails, listen: boolean) {\n\t\tsuper();\n\t\tthis.connectionDetails = data.subServices;\n\t\tthis.translators = {};\n\t\t_.forEach(data.subServices, (subConnectionDetails, serviceName) => {\n\t\t\tthis.translators[serviceName] = Translator.createTranslator(serviceName, subConnectionDetails, data.dataHub);\n\t\t});\n\t\tif (listen) {\n\t\t\tthis.startListening();\n\t\t}\n\t}\n\n\tprotected emitData(data: TransmitContext): Promise<ServiceEmitResponse> {\n\t\treturn Promise.props({\n\t\t\tconnectionDetails: this.translators[data.target.service].messageIntoConnectionDetails(data),\n\t\t\temitContext: this.translators[data.target.service].messageIntoEmitCreateMessage(data),\n\t\t}).then((details: { connectionDetails: any, emitContext: ServiceEmitContext } ) => {\n\t\t\t// TODO: This stuff should go through a method that typeguards\n\t\t\tconst emitter = require(`./${data.target.service}`).createServiceEmitter(details.connectionDetails);\n\t\t\treturn emitter.sendData({ contexts: { discourse: details.emitContext } });\n\t\t});\n\t}\n\n\t/**\n\t\t* Verify the event before enqueueing.  Trusts that the sub-listener will have performed it's own verification.\n\t\t*/\n\tprotected verify(): boolean {\n\t\treturn true;\n\t}\n\n\tprivate startListening(): void {\n\t\t_.forEach(this.connectionDetails, (subConnectionDetails, subServiceName) => {\n\t\t\t// TODO: This stuff should go through a method that typeguards\n\t\t\tconst subListener = require(`./${subServiceName}`).createServiceListener(subConnectionDetails);\n\t\t\tsubListener.registerEvent({\n\t\t\t\t// TODO: This is potentially noisy.  It is translating every event it can, including ones it might ...\n\t\t\t\t// ... not care about.  Which isn't so bad, except some translations require API calls.\n\t\t\t\t// Possibly a two stage translate (quick translate and full translate)???\n\t\t\t\tevents: this.translators[subServiceName].getAllTriggers(),\n\t\t\t\tlistenerMethod: (_registration: ServiceRegistration, event: ServiceEvent) => {\n\t\t\t\t\tthis.translators[subServiceName].eventIntoMessage(event).then(this.queueData);\n\t\t\t\t},\n\t\t\t\tname: `${subServiceName}=>${this.serviceName}`,\n\t\t\t});\n\t\t});\n\t}\n\n\t/**\n\t * The name of this service, as required by the framework.\n\t * @returns  'messenger' string.\n\t */\n\tget serviceName(): string {\n\t\treturn MessengerService._serviceName;\n\t}\n\n\t/**\n\t * Retrieve the SDK API handle, if any.\n\t * @return  void\n\t */\n\tget apiHandle(): void {\n\t\treturn;\n\t}\n}\n\n/**\n * Build this class, typed and activated as a listener.\n * @returns  Service Listener object, awakened and ready to go.\n */\nexport function createServiceListener(data: MessengerConstructionDetails): ServiceListener {\n\treturn new MessengerService(data, true);\n}\n\n/**\n * Build this class, typed as an emitter.\n * @returns  Service Emitter object, ready for your events.\n */\nexport function createServiceEmitter(data: MessengerConstructionDetails): ServiceEmitter {\n\treturn new MessengerService(data, false);\n}\n\n// Orphaned\n// emitData\n// const valueFetcher = _.partial(this.hub.fetchValue, data.toIds.user);\n// const genericValues = this.connectionDetails[data.to];\n// const translator = this.translators[data.to];\n// return Promise.props({\n// \tdata: translator.messageIntoEmitCreateMessage(data),\n// \temitter: translator.makeEmitter(valueFetcher, genericValues),\n// })\n// .then((details: {emitter: ServiceEmitter, data: ServiceEmitContext}) => {\n// \t// TODO: Source???\n// \treturn details.emitter.sendData({\n// \t\tcontexts: {[data.to]: details.data},\n// \t\tsource: 'messenger',\n// \t});\n// });\n"],"sourceRoot":"../../lib"}