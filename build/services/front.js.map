{"version":3,"sources":["services/front.ts"],"names":[],"mappings":";;AAiBA,yCAAkC;AAClC,6BAA6B;AAM7B,yDAAqD;AAOrD,kBAA0B,SAAQ,kCAAuB;IAMxD,YAAY,IAAiD;QAC5D,KAAK,CAAC,IAAI,CAAC,CAAC;QACZ,IAAI,CAAC,OAAO,GAAG,IAAI,iBAAK,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QACrC,EAAE,CAAC,CAAC,IAAI,CAAC,IAAI,MAAyB,CAAC,CAAC,CAAC;YACxC,MAAM,YAAY,GAA6B,IAAI,CAAC;YAGpD,IAAI,CAAC,eAAe,CAAC,gBAAgB,EAAE,CAAC,SAAS,EAAE,QAAQ;gBAC1D,QAAQ,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC;YAC1B,CAAC,CAAC,CAAC;YAEH,IAAI,CAAC,eAAe,CAAC,YAAY,CAAC,IAAI,IAAI,YAAY,CAAC,YAAY,EAAE,CAAC,QAAQ,EAAE,QAAQ;gBACvF,IAAI,CAAC,SAAS,CAAC;oBACd,OAAO,EAAE,QAAQ,CAAC,IAAI,CAAC,YAAY,CAAC,EAAE;oBACtC,WAAW,EAAE,EAAE;oBACf,QAAQ,EAAE,QAAQ,CAAC,IAAI;oBACvB,MAAM,EAAE,YAAY,CAAC,YAAY;oBACjC,IAAI,EAAE,QAAQ,CAAC,IAAI,CAAC,IAAI;iBACxB,CAAC,CAAC;gBACH,QAAQ,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC;YAC1B,CAAC,CAAC,CAAC;QACJ,CAAC;IACF,CAAC;IAQS,QAAQ,CAAC,OAAyB;QAC3C,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;IACrC,CAAC;IAKS,MAAM,CAAC,KAA2B;QAE3C,MAAM,CAAC,IAAI,CAAC;IACb,CAAC;IAMD,IAAI,WAAW;QACd,MAAM,CAAC,YAAY,CAAC,YAAY,CAAC;IAClC,CAAC;IAMD,IAAI,SAAS;QACZ,MAAM,CAAC;YACN,KAAK,EAAE,IAAI,CAAC,OAAO;SACnB,CAAC;IACH,CAAC;;AA/Dc,yBAAY,GAAG,IAAI,CAAC,QAAQ,CAAC,UAAU,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AADvE,oCAiEC;AAMD,+BAAsC,IAA8B;IACnE,MAAM,CAAC,IAAI,YAAY,CAAC,IAAI,CAAC,CAAC;AAC/B,CAAC;AAFD,sDAEC;AAMD,8BAAqC,IAAsB;IAC1D,MAAM,CAAC,IAAI,YAAY,CAAC,IAAI,CAAC,CAAC;AAC/B,CAAC;AAFD,oDAEC","file":"front.js","sourcesContent":["/*\n Copyright 2016-2017 Resin.io\n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n you may not use this file except in compliance with the License.\n You may obtain a copy of the License at\n\n http://www.apache.org/licenses/LICENSE-2.0\n\n Unless required by applicable law or agreed to in writing, software\n distributed under the License is distributed on an \"AS IS\" BASIS,\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n See the License for the specific language governing permissions and\n limitations under the License.\n */\n\nimport * as Promise from 'bluebird';\nimport { Front } from 'front-sdk';\nimport * as path from 'path';\n\nimport {\n\tFrontConstructor, FrontEmitContext,\n\tFrontHandle, FrontListenerConstructor, FrontResponse,\n} from './front-types';\nimport { ServiceScaffold } from './service-scaffold';\nimport { ServiceScaffoldEvent } from './service-scaffold-types';\nimport { ServiceEmitter, ServiceListener, ServiceType } from './service-types';\n\n/**\n * A service for interacting with the Front API via the Front SDK\n */\nexport class FrontService extends ServiceScaffold<string> implements ServiceListener, ServiceEmitter {\n\tprivate static _serviceName = path.basename(__filename.split('.')[0]);\n\n\t/** Underlying SDK object that we route requests to */\n\tprivate session: Front;\n\n\tconstructor(data: FrontConstructor | FrontListenerConstructor) {\n\t\tsuper(data);\n\t\tthis.session = new Front(data.token);\n\t\tif (data.type === ServiceType.Listener) {\n\t\t\tconst listenerData = <FrontListenerConstructor>data;\n\t\t\t// This swallows webhook events.  When operating on an entire inbox we use its webhook rule,\n\t\t\t// but a webhook still requires somewhere to send its webhooks to.\n\t\t\tthis.registerHandler('front-dev-null', (_formData, response) => {\n\t\t\t\tresponse.sendStatus(200);\n\t\t\t});\n\t\t\t// Create an endpoint for this listener and enqueue events\n\t\t\tthis.registerHandler(listenerData.path || FrontService._serviceName, (formData, response) => {\n\t\t\t\tthis.queueData({\n\t\t\t\t\tcontext: formData.body.conversation.id,\n\t\t\t\t\tcookedEvent: {},\n\t\t\t\t\trawEvent: formData.body,\n\t\t\t\t\tsource: FrontService._serviceName,\n\t\t\t\t\ttype: formData.body.type,\n\t\t\t\t});\n\t\t\t\tresponse.sendStatus(200);\n\t\t\t});\n\t\t}\n\t}\n\n\t/**\n\t * Actually emit the data to the SDK.\n\t * Extracting the context will have been done by the serviceScaffold.\n\t * @param context  Context to be emitted\n\t * @returns        Promise that resolves to the SDK response\n\t */\n\tprotected emitData(context: FrontEmitContext): Promise<FrontResponse> {\n\t\treturn context.method(context.data);\n\t}\n\n\t/**\n\t\t* Verify the event before enqueueing.  For now uses the naive approach of returning true.\n\t\t*/\n\tprotected verify(_data: ServiceScaffoldEvent): boolean {\n\t\t// #204: This to be properly implemented.\n\t\treturn true;\n\t}\n\n\t/**\n\t * The name of this service, as required by the framework.\n\t * @returns  'front' string.\n\t */\n\tget serviceName(): string {\n\t\treturn FrontService._serviceName;\n\t}\n\n\t/**\n\t * Retrieve the SDK API handle for Front.\n\t * @return  The Front SDK API handle.\n\t */\n\tget apiHandle(): FrontHandle {\n\t\treturn {\n\t\t\tfront: this.session\n\t\t};\n\t}\n}\n\n/**\n * Build this class, typed and activated as a listener.\n * @returns  Service Listener object, awakened and ready to go.\n */\nexport function createServiceListener(data: FrontListenerConstructor): ServiceListener {\n\treturn new FrontService(data);\n}\n\n/**\n * Build this class, typed as an emitter.\n * @returns  Service Emitter object, ready for your events.\n */\nexport function createServiceEmitter(data: FrontConstructor): ServiceEmitter {\n\treturn new FrontService(data);\n}\n"],"sourceRoot":"../../lib"}