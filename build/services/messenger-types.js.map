{"version":3,"sources":["services/messenger-types.ts"],"names":[],"mappings":";;AAwCA,IAAY,eAEX;AAFD,WAAY,eAAe;IAC1B,yDAAM,CAAA;AACP,CAAC,EAFW,eAAe,GAAf,uBAAe,KAAf,uBAAe,QAE1B","file":"messenger-types.js","sourcesContent":["/*\n Copyright 2016-2017 Resin.io\n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n you may not use this file except in compliance with the License.\n You may obtain a copy of the License at\n\n http://www.apache.org/licenses/LICENSE-2.0\n\n Unless required by applicable law or agreed to in writing, software\n distributed under the License is distributed on an \"AS IS\" BASIS,\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n See the License for the specific language governing permissions and\n limitations under the License.\n */\n\nimport * as Promise from 'bluebird';\n\nimport {\n\tWorkerEvent,\n} from '../framework/worker';\nimport {\n\tServiceEmitContext,\n\tServiceEmitResponse,\n\tServiceEvent,\n} from './service-types';\n\nexport interface MessengerEvent extends ServiceEvent {\n\tcookedEvent: {\n\t\tcontext: string;\n\t\ttype: string;\n\t\t[key: string]: any;\n\t};\n\trawEvent: any;\n\tsource: string;\n}\nexport interface MessengerWorkerEvent extends WorkerEvent {\n\tdata: MessengerEvent;\n}\n\nexport enum MessengerAction {\n\tCreate,\n}\n\n// Generic forms of message objects\nexport interface MessengerIds {\n\tuser?: string;\n\tmessage?: string;\n\tthread?: string;\n\ttoken?: string;\n\tflow?: string;\n\turl?: string;\n}\nexport interface MessengerContext {\n\taction: MessengerAction;\n\tfirst: boolean;\n\tgenesis: string;\n\thidden: boolean;\n\tsource: string;\n\tsourceIds?: MessengerIds;\n\ttext: string;\n\ttitle?: string;\n}\n\n// Message objects suitable for the receipt of messages\nexport interface ReceiptIds extends MessengerIds {\n\tuser: string;\n\tmessage: string;\n\tthread: string;\n\tflow: string;\n}\nexport interface ReceiptContext extends MessengerContext {\n\tsourceIds: ReceiptIds;\n}\n\n// Message objects suitable for the handling of messages\nexport interface InterimContext extends MessengerContext {\n\tsourceIds: ReceiptIds;\n\tto: string;\n\ttoIds: MessengerIds;\n}\n\n// Message objects suitable for the transmission of messages\nexport interface TransmitIds extends MessengerIds {\n\tuser: string;\n\ttoken: string;\n\tflow: string;\n}\nexport interface TransmitContext extends MessengerContext {\n\tsourceIds: ReceiptIds;\n\tto: string;\n\ttoIds: TransmitIds;\n}\n\nexport interface MessengerEmitContext extends ServiceEmitContext {\n\tendpoint: object;\n\tmeta?: any;\n\tpayload: object;\n}\n\nexport interface MessengerEmitResponse extends ServiceEmitResponse {\n\tresponse?: {\n\t\tmessage: string;\n\t\tthread: string;\n\t\turl?: string;\n\t};\n}\n\nexport interface Metadata {\n\tgenesis: string | null;\n\thidden: boolean;\n\tcontent: string;\n}\n\nexport interface FlowDefinition {\n\tservice: string;\n\tflow: string;\n}\n\nexport interface DataHub {\n\tfetchValue(user: string, value: string): Promise<string>;\n}\n"],"sourceRoot":"../../lib"}