{"version":3,"sources":["services/discourse.ts"],"names":[],"mappings":"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","file":"discourse.js","sourcesContent":["/*\n Copyright 2016-2017 Resin.io\n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n you may not use this file except in compliance with the License.\n You may obtain a copy of the License at\n\n http://www.apache.org/licenses/LICENSE-2.0\n\n Unless required by applicable law or agreed to in writing, software\n distributed under the License is distributed on an \"AS IS\" BASIS,\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n See the License for the specific language governing permissions and\n limitations under the License.\n */\n\nimport * as Promise from 'bluebird';\nimport * as _ from 'lodash';\nimport * as path from 'path';\nimport { UrlOptions } from 'request';\nimport * as request from 'request-promise';\nimport { RequestPromiseOptions } from 'request-promise';\nimport {\n\tDiscourseConstructor, DiscourseEmitContext, DiscourseHandle,\n\tDiscourseListenerConstructor, DiscourseResponse,\n} from './discourse-types';\nimport { ServiceScaffold } from './service-scaffold';\nimport { ServiceScaffoldEvent } from './service-scaffold-types';\nimport { ServiceEmitter, ServiceListener, ServiceType } from './service-types';\n\n/**\n * A ProcBot service for interacting with the Discourse API\n */\nexport class DiscourseService extends ServiceScaffold<string> implements ServiceListener, ServiceEmitter {\n\tprivate static _serviceName = path.basename(__filename.split('.')[0]);\n\t// There are circumstances in which the discourse web-hook will fire twice for the same post, so track.\n\tprivate postsSynced = new Set<number>();\n\tprivate connectionDetails: DiscourseConstructor;\n\n\tconstructor(data: DiscourseConstructor | DiscourseListenerConstructor) {\n\t\tsuper(data);\n\t\t// #203: Verify connection data\n\t\tthis.connectionDetails = data;\n\t\tif (data.type === ServiceType.Listener) {\n\t\t\tconst listenerData = <DiscourseListenerConstructor>data;\n\t\t\t// Register our enqueue action for when the express instance receives a web-hook\n\t\t\tthis.registerHandler(listenerData.path || DiscourseService._serviceName, (formData, response) => {\n\t\t\t\t// Check this event is new\n\t\t\t\tif (!this.postsSynced.has(formData.body.post.id)) {\n\t\t\t\t\tthis.postsSynced.add(formData.body.post.id);\n\t\t\t\t\tthis.queueData({\n\t\t\t\t\t\tcontext: formData.body.post.topic_id,\n\t\t\t\t\t\tcookedEvent: {},\n\t\t\t\t\t\ttype: formData.headers['x-discourse-event'],\n\t\t\t\t\t\trawEvent: formData.body.post,\n\t\t\t\t\t\tsource: DiscourseService._serviceName,\n\t\t\t\t\t});\n\t\t\t\t\tresponse.sendStatus(200);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t}\n\n\t/**\n\t * Promise to deliver the payload to the API.\n\t * @param  requestOptions Payload to be delivered, in `request` format.\n\t * @returns Promise that resolves to the response from the API call.\n\t */\n\tpublic request(requestOptions: UrlOptions & RequestPromiseOptions): Promise<DiscourseResponse> {\n\t\t// This type massages request-promise into bluebird\n\t\treturn request(requestOptions).promise();\n\t}\n\n\t/**\n\t * Actually emit the data to the API.\n\t * Extracting the context will have been done by the serviceScaffold.\n\t * @param context  Context to be emitted\n\t * @returns        Promise that resolves to the API response\n\t */\n\tprotected emitData(context: DiscourseEmitContext): Promise<DiscourseResponse> {\n\t\t// Inject credentials into the provided querystring\n\t\tconst qs = {\n\t\t\tapi_key: this.connectionDetails.token,\n\t\t\tapi_username: this.connectionDetails.username,\n\t\t};\n\t\t_.merge(qs, context.data.qs);\n\t\t// Massage and send the context\n\t\tconst requestOptions = {\n\t\t\tbody: context.data.body,\n\t\t\tjson: true,\n\t\t\tqs,\n\t\t\tqsStringifyOptions: {\n\t\t\t\tarrayFormat: 'repeat',\n\t\t\t},\n\t\t\turl: `https://${this.connectionDetails.instance}${context.data.path}`,\n\t\t\tmethod: context.data.htmlVerb,\n\t\t};\n\t\treturn context.method(requestOptions);\n\t}\n\n\t/**\n\t\t* Verify the event before enqueueing.  For now uses the naive approach of returning true.\n\t\t*/\n\tprotected verify(_data: ServiceScaffoldEvent): boolean {\n\t\t// #202: This to be properly implemented.\n\t\treturn true;\n\t}\n\n\t/**\n\t * Get the service name, as required by the framework.\n\t * @returns  The service name for Discourse.\n\t */\n\tget serviceName(): string {\n\t\treturn DiscourseService._serviceName;\n\t}\n\n\t/**\n\t * Retrieve Discourse API SDK handle (currently none).\n\t * @returns void (currently no Discourse SDK API handle).\n\t */\n\tget apiHandle(): DiscourseHandle {\n\t\treturn {\n\t\t\tdiscourse: this,\n\t\t};\n\t}\n}\n\n/**\n * Build this class, typed and activated as a listener.\n * @returns  Service Listener object, awakened and ready to go.\n */\nexport function createServiceListener(data: DiscourseListenerConstructor): ServiceListener {\n\treturn new DiscourseService(data);\n}\n\n/**\n * Build this class, typed as an emitter.\n * @returns  Service Emitter object, ready for your events.\n */\nexport function createServiceEmitter(data: DiscourseConstructor): ServiceEmitter {\n\treturn new DiscourseService(data);\n}\n"],"sourceRoot":"../../lib"}