{"version":3,"sources":["services/discourse.ts"],"names":[],"mappings":"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","file":"discourse.js","sourcesContent":["import * as Promise from 'bluebird';\nimport * as _ from 'lodash';\nimport * as path from 'path';\nimport * as request from 'request-promise';\nimport {\n    MessageEmitResponse,\n    MessageEvent,\n    MessageWorkerEvent,\n    ReceiptContext,\n} from '../utils/message-types';\nimport {\n    DiscourseMessageEmitContext,\n    DiscoursePost,\n} from './discourse-types';\nimport {\n    MessageService,\n} from './message-service';\nimport {\n    ServiceEmitter,\n    ServiceListener,\n} from './service-types';\n\n/**\n * Class for interacting with the discourse API\n * Is a MessageService, ServiceListener and ServiceEmitter\n */\nexport class DiscourseService extends MessageService implements ServiceListener, ServiceEmitter {\n    private static _serviceName = path.basename(__filename.split('.')[0]);\n    private topicCache = new Map<string, any>();\n    private postsSynced = new Set<number>();\n\n    /**\n     * Retrieve the comments in a thread that match an optional filter\n     * @param event details to identify the event\n     * @param filter regex of comments to match\n     */\n    public fetchThread(event: ReceiptContext, filter: RegExp): Promise<string[]> {\n        // Check that the event being asked about orginated with us\n        if (event.source !== this.serviceName) {\n            return Promise.reject(new Error('Cannot get discourse thread from non-discourse event'));\n        }\n        // Query the API\n        const getThread = {\n            json: true,\n            method: 'GET',\n            qs: {\n                api_key: process.env.DISCOURSE_LISTENER_ACCOUNT_API_TOKEN,\n                api_username: process.env.DISCOURSE_LISTENER_ACCOUNT_USERNAME,\n            },\n            uri: `https://${process.env.DISCOURSE_INSTANCE_URL}/t/${event.sourceIds.thread}`,\n        };\n        return request(getThread).then((thread) => {\n            return _.map(thread.post_stream.posts, (item: DiscoursePost) => {\n                // Clean the response down to only the text\n                return item.cooked;\n            }).filter((value: string) => {\n                // Filter the response down to only matches\n                const match = value.match(filter);\n                return match !== null && match.length > 0;\n            });\n        });\n    }\n\n    /**\n     * Activate this object as a listener\n     */\n    protected activateMessageListener(): void {\n        // Create an endpoint for this listener\n        MessageService.app.post(`/${this.serviceName}/`, (formData, response) => {\n            if(this.postsSynced.has(formData.body.post.id)) {\n                response.send();\n            } else {\n                this.postsSynced.add(formData.body.post.id);\n                this.fetchTopic(formData.body.post.topic_id)\n                .then((topic: any) => {\n                    if (formData.body.post.post_number === 1) {\n                        // Enqueue a new topic event if this is the 1st post\n                        const topicEvent = {\n                            data: {\n                                cookedEvent: {\n                                    context: topic.id,\n                                    type: 'topic',\n                                },\n                                rawEvent: topic,\n                                source: this.serviceName,\n                            },\n                            workerMethod: this.handleEvent,\n                        };\n                        this.queueEvent(topicEvent);\n                    }\n                    // Retrieve the un-abridged version of the post\n                    const getPost = {\n                        json: true,\n                        method: 'GET',\n                        qs: {\n                            api_key: process.env.DISCOURSE_LISTENER_ACCOUNT_API_TOKEN,\n                            api_username: process.env.DISCOURSE_LISTENER_ACCOUNT_USERNAME,\n                        },\n                        uri: `https://${process.env.DISCOURSE_INSTANCE_URL}/posts/${formData.body.post.id}`,\n                    };\n                    request(getPost)\n                    .then((post) => {\n                        // Enqueue a new post event\n                        const postEvent = {\n                            data: {\n                                cookedEvent: {\n                                    category: topic.category_id,\n                                    context: topic.id,\n                                    type: formData.headers['x-discourse-event-type'],\n                                },\n                                rawEvent: post,\n                                source: this.serviceName,\n                            },\n                            workerMethod: this.handleEvent,\n                        };\n                        this.queueEvent(postEvent);\n                    });\n                });\n                response.send();\n            }\n        });\n    }\n\n    /**\n     * Emit data to the API\n     * @param data emit context\n     */\n    protected sendMessage(data: DiscourseMessageEmitContext): Promise<MessageEmitResponse> {\n        // Extract a couple of details from out of the context\n        const token = data.api_token;\n        const username = data.api_username;\n        const body = _.clone(data);\n        delete body.api_token;\n        delete body.api_username;\n        // POST the post to the API\n        const postPost = {\n            body,\n            json: true,\n            url: `https://${process.env.DISCOURSE_INSTANCE_URL}/posts?api_key=${token}&api_username=${username}`\n        };\n        return request.post(postPost).then((resData) => {\n            // Translate the response from the API back into the framework\n            return {\n                response: {\n                    ids: {\n                        message: resData.id,\n                        thread: resData.topic_id,\n                    }\n                },\n                source: this.serviceName,\n            };\n        });\n    }\n\n    /**\n     * Retrieve the scope for event order preservation\n     * @param event details to examine\n     */\n    protected getWorkerContextFromMessage(event: MessageWorkerEvent): string {\n        return event.data.cookedEvent.context;\n    }\n\n    /**\n     * Retrieve the event type for event firing\n     * @param event details to examine\n     */\n    protected getEventTypeFromMessage(event: MessageEvent): string {\n        return event.cookedEvent.type;\n    }\n\n    /**\n     * Retrieve the full topic object from an id\n     * @param topicId id of the topic to fetch\n     */\n    private fetchTopic(topicId: string): Promise<any> {\n        // Attempt to find this in the cache\n        if (this.topicCache.has(topicId)) {\n            return Promise.resolve(this.topicCache.get(topicId));\n        } else {\n            // Build an API request\n            const token = process.env.DISCOURSE_LISTENER_ACCOUNT_API_TOKEN;\n            const username = process.env.DISCOURSE_LISTENER_ACCOUNT_USERNAME;\n            const rootUrl = process.env.DISCOURSE_INSTANCE_URL;\n            const requestOpts = {\n                json: true,\n                url: `https://${rootUrl}/t/${topicId}?api_key=${token}&api_username=${username}`\n            };\n            // Request, cache and return\n            return request.get(requestOpts).then((resData) => {\n                this.topicCache.set(topicId, resData);\n                return resData;\n            });\n        }\n    }\n\n    /**\n     * get the service name, as required by the framework\n     */\n    get serviceName(): string {\n        return DiscourseService._serviceName;\n    }\n}\n\n/**\n * Return this class activated and typed as a listener\n */\nexport function createServiceListener(): ServiceListener {\n    return new DiscourseService(true);\n}\n\n/**\n * Return this class typed as an emitter\n */\nexport function createServiceEmitter(): ServiceEmitter {\n    return new DiscourseService(false);\n}\n\n/**\n * Return this class typed as a messenger\n */\nexport function createMessageService(): MessageService {\n    return new DiscourseService(false);\n}\n"],"sourceRoot":"../../lib"}