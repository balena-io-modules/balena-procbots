{"version":3,"sources":["services/discourse.ts"],"names":[],"mappings":";;AAgBA,oCAAoC;AACpC,4BAA4B;AAC5B,6BAA6B;AAC7B,2CAA2C;AAM3C,2DAAuD;AAEvD,sBAA8B,SAAQ,oCAAgB;IAAtD;;QAGS,gBAAW,GAAG,IAAI,GAAG,EAAU,CAAC;IA4EzC,CAAC;IArEU,OAAO,CAAC,IAAgC;QAEjD,IAAI,CAAC,iBAAiB,GAAG,IAAI,CAAC;IAC/B,CAAC;IAES,QAAQ,CAAC,OAA6B;QAC/C,MAAM,CAAC,IAAI,OAAO,CAAC,CAAC,OAAO;YAC1B,MAAM,EAAE,GAAG;gBACV,OAAO,EAAE,IAAI,CAAC,iBAAiB,CAAC,KAAK;gBACrC,YAAY,EAAE,IAAI,CAAC,iBAAiB,CAAC,QAAQ;aAC7C,CAAC;YACF,CAAC,CAAC,KAAK,CAAC,EAAE,EAAE,OAAO,CAAC,EAAE,CAAC,CAAC;YACxB,MAAM,cAAc,GAAG;gBACtB,IAAI,EAAE,OAAO,CAAC,OAAO;gBACrB,IAAI,EAAE,IAAI;gBACV,EAAE;gBACF,GAAG,EAAE,WAAW,IAAI,CAAC,iBAAiB,CAAC,QAAQ,IAAI,OAAO,CAAC,IAAI,EAAE;gBACjE,MAAM,EAAE,OAAO,CAAC,MAAM;aACtB,CAAC;YAEF,OAAO,CAAC,cAAc,CAAC;iBACtB,IAAI,CAAC,CAAC,MAAM;gBACZ,OAAO,CAAC,MAAM,CAAC,CAAC;YACjB,CAAC,CAAC,CAAC;QACJ,CAAC,CAAC,CAAC;IACJ,CAAC;IAGS,cAAc;QACvB,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,gBAAgB,CAAC,YAAY,GAAG,EAAE,CAAC,QAAQ,EAAE,QAAQ;YAC7E,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;gBAClD,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;gBAC5C,IAAI,CAAC,SAAS,CAAC;oBACd,WAAW,EAAE;wBACZ,OAAO,EAAE,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ;wBAEpC,KAAK,EAAE,MAAM;qBACb;oBACD,QAAQ,EAAE,QAAQ,CAAC,IAAI,CAAC,IAAI;oBAC5B,MAAM,EAAE,gBAAgB,CAAC,YAAY;iBACrC,CAAC,CAAC;gBACH,QAAQ,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC;YAC1B,CAAC;QACF,CAAC,CAAC,CAAC;IACJ,CAAC;IAKS,MAAM,CAAC,KAAqB;QAErC,MAAM,CAAC,IAAI,CAAC;IACb,CAAC;IAMD,IAAI,WAAW;QACd,MAAM,CAAC,gBAAgB,CAAC,YAAY,CAAC;IACtC,CAAC;IAMD,IAAI,SAAS;QACZ,MAAM,CAAC;IACR,CAAC;;AA7Ec,6BAAY,GAAG,IAAI,CAAC,QAAQ,CAAC,UAAU,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AADvE,4CA+EC;AAMD,+BAAsC,IAAgC;IACrE,MAAM,CAAC,IAAI,gBAAgB,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;AACzC,CAAC;AAFD,sDAEC;AAMD,8BAAqC,IAAgC;IACpE,MAAM,CAAC,IAAI,gBAAgB,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;AAC1C,CAAC;AAFD,oDAEC","file":"discourse.js","sourcesContent":["/*\n Copyright 2016-2017 Resin.io\n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n you may not use this file except in compliance with the License.\n You may obtain a copy of the License at\n\n http://www.apache.org/licenses/LICENSE-2.0\n\n Unless required by applicable law or agreed to in writing, software\n distributed under the License is distributed on an \"AS IS\" BASIS,\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n See the License for the specific language governing permissions and\n limitations under the License.\n */\n\nimport * as Promise from 'bluebird';\nimport * as _ from 'lodash';\nimport * as path from 'path';\nimport * as request from 'request-promise';\nimport {\n\tDiscourseConnectionDetails, DiscourseEmitContext, DiscourseEvent,\n\tDiscourseResponse\n} from './discourse-types';\nimport { ServiceEmitter, ServiceListener } from './service-types';\nimport { ServiceUtilities } from './service-utilities';\n\nexport class DiscourseService extends ServiceUtilities implements ServiceListener, ServiceEmitter {\n\tprivate static _serviceName = path.basename(__filename.split('.')[0]);\n\t// There are circumstances in which the discourse web-hook will fire twice for the same post, so track.\n\tprivate postsSynced = new Set<number>();\n\tprivate connectionDetails: DiscourseConnectionDetails;\n\n\t/**\n\t * Connect to Discourse.\n\t * @param data  Object containing the required details for Discourse.\n\t */\n\tprotected connect(data: DiscourseConnectionDetails): void {\n\t\t// #203: Verify connection data\n\t\tthis.connectionDetails = data;\n\t}\n\n\tprotected emitData(context: DiscourseEmitContext): Promise<DiscourseResponse> {\n\t\treturn new Promise((resolve) => {\n\t\t\tconst qs = {\n\t\t\t\tapi_key: this.connectionDetails.token,\n\t\t\t\tapi_username: this.connectionDetails.username,\n\t\t\t};\n\t\t\t_.merge(qs, context.qs);\n\t\t\tconst requestOptions = {\n\t\t\t\tbody: context.payload,\n\t\t\t\tjson: true,\n\t\t\t\tqs,\n\t\t\t\turl: `https://${this.connectionDetails.instance}/${context.path}`,\n\t\t\t\tmethod: context.method,\n\t\t\t};\n\t\t\t// This type massages request-promise into bluebird\n\t\t\trequest(requestOptions)\n\t\t\t.then((result) => {\n\t\t\t\tresolve(result);\n\t\t\t});\n\t\t});\n\t}\n\n\t/** Awaken this class as a listener. */\n\tprotected startListening(): void {\n\t\tthis.expressApp.post(`/${DiscourseService._serviceName}/`, (formData, response) => {\n\t\t\tif (!this.postsSynced.has(formData.body.post.id)) {\n\t\t\t\tthis.postsSynced.add(formData.body.post.id);\n\t\t\t\tthis.queueData({\n\t\t\t\t\tcookedEvent: {\n\t\t\t\t\t\tcontext: formData.body.post.topic_id,\n\t\t\t\t\t\t// #201: I'm sure there's something in the headers that could improve this\n\t\t\t\t\t\tevent: 'post'\n\t\t\t\t\t},\n\t\t\t\t\trawEvent: formData.body.post,\n\t\t\t\t\tsource: DiscourseService._serviceName,\n\t\t\t\t});\n\t\t\t\tresponse.sendStatus(200);\n\t\t\t}\n\t\t});\n\t}\n\n\t/**\n\t * Verify the event before enqueueing.  For now uses the naive approach of returning true.\n\t */\n\tprotected verify(_data: DiscourseEvent): boolean {\n\t\t// #202: This to be properly implemented.\n\t\treturn true;\n\t}\n\n\t/**\n\t * Get the service name, as required by the framework.\n\t * @returns  The service name for Discourse.\n\t */\n\tget serviceName(): string {\n\t\treturn DiscourseService._serviceName;\n\t}\n\n\t/**\n\t * Retrieve Discourse API SDK handle (currently none).\n\t * @returns void (currently no Discourse SDK API handle).\n\t */\n\tget apiHandle(): void {\n\t\treturn;\n\t}\n}\n\n/**\n * Build this class, typed and activated as a listener.\n * @returns  Service Listener object, awakened and ready to go.\n */\nexport function createServiceListener(data: DiscourseConnectionDetails): ServiceListener {\n\treturn new DiscourseService(data, true);\n}\n\n/**\n * Build this class, typed as an emitter.\n * @returns  Service Emitter object, ready for your events.\n */\nexport function createServiceEmitter(data: DiscourseConnectionDetails): ServiceEmitter {\n\treturn new DiscourseService(data, false);\n}\n"],"sourceRoot":"../../lib"}