{"version":3,"sources":["services/messenger/datahubs/flowdock.ts"],"names":[],"mappings":"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","file":"flowdock.js","sourcesContent":["/*\n Copyright 2016-2017 Resin.io\n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n you may not use this file except in compliance with the License.\n You may obtain a copy of the License at\n\n http://www.apache.org/licenses/LICENSE-2.0\n\n Unless required by applicable law or agreed to in writing, software\n distributed under the License is distributed on an \"AS IS\" BASIS,\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n See the License for the specific language governing permissions and\n limitations under the License.\n */\n\nimport * as Promise from 'bluebird';\nimport { Session } from 'flowdock';\nimport * as _ from 'lodash';\nimport { FlowdockConnectionDetails, FlowdockMessage } from '../../flowdock-types';\nimport { DataHub } from './datahub';\n\nexport class FlowdockDataHub implements DataHub {\n\tprivate session: Session;\n\tprivate organization: string;\n\n\tconstructor(data: FlowdockConnectionDetails) {\n\t\tthis.session = new Session(data.token);\n\t\tthis.organization = data.organization;\n\t}\n\n\t/**\n\t * Search for the specified value associated with a user.\n\t * @param user    Username to search associated with.\n\t * @param service The service for which we seek a value, eg discourse\n\t * @param key     Name of the value to retrieve.\n\t * @returns       Promise that resolves to the value.\n\t */\n\tpublic fetchValue(user: string, service: string, key: string): Promise<string> {\n\t\t// Retrieve a particular regex from the 1-1 message history of the user\n\t\tconst findKey = new RegExp(`My ${service} ${key} is (\\\\S+)`, 'i');\n\t\treturn this.fetchPrivateMessages(user, findKey)\n\t\t.then((valueArray) => {\n\t\t\tconst value = valueArray[valueArray.length - 1].match(findKey);\n\t\t\tif (value) {\n\t\t\t\treturn value[1];\n\t\t\t}\n\t\t\tthrow new Error(`Could not find value $key for $user`);\n\t\t});\n\t}\n\n\t/**\n\t * Search for recent private messages with our account that match on username and regex.\n\t * @param username  Scope of the private messages to search.\n\t * @param filter    Narrow our search to just matches.\n\t * @returns         Promise that resolves to the message strings.\n\t */\n\tprivate fetchPrivateMessages(username: string, filter: RegExp): Promise<string[]> {\n\t\t// Fetch the id then 1-1 history associated with the username\n\t\treturn this.fetchUserId(username)\n\t\t.then((userId) => {\n\t\t\treturn this.fetchFromSession(`/private/${userId}/messages`)\n\t\t\t\t.then((fetchedMessages) => {\n\t\t\t\t\t// Prune and clean the message history to text of interest\n\t\t\t\t\treturn _.filter(fetchedMessages, (message: FlowdockMessage) => {\n\t\t\t\t\t\treturn filter.test(message.content);\n\t\t\t\t\t}).map((message: FlowdockMessage) => {\n\t\t\t\t\t\treturn message.content;\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t});\n\t}\n\n\t/**\n\t * Fetch a user's id from their username.\n\t * @param username  Username to search for.\n\t * @returns         id of the user.\n\t */\n\tprivate fetchUserId = (username: string): Promise<string | undefined> => {\n\t\t// Get all the users of the service\n\t\treturn this.fetchFromSession(`/organizations/${this.organization}/users`)\n\t\t\t.then((foundUsers) => {\n\t\t\t\t// Generate an array of user objects with matching username\n\t\t\t\tconst matchingUsers = _.filter(foundUsers, (eachUser: any) => {\n\t\t\t\t\treturn eachUser.nick === username;\n\t\t\t\t});\n\t\t\t\t// Return id if we've exactly one user for a particular username\n\t\t\t\tif (matchingUsers.length === 1) {\n\t\t\t\t\treturn(matchingUsers[0].id);\n\t\t\t\t}\n\t\t\t});\n\t}\n\n\t/**\n\t * Utility function to structure the flowdock session as a promise a little.\n\t * @param path    Endpoint to retrieve.\n\t * @param search  Optional, some words which may be used to shortlist the results.\n\t * @returns       Response from the session.\n\t */\n\tprivate fetchFromSession = (path: string, search?: string): Promise<any> => {\n\t\treturn new Promise<any>((resolve, reject) => {\n\t\t\t// The flowdock service both emits and calls back the error.\n\t\t\t// We're wrapping the emit in a promise reject and ignoring the call back\n\t\t\tthis.session.on('error', reject);\n\t\t\tthis.session.get(path, {search}, (_error?: Error, result?: any) => {\n\t\t\t\tthis.session.removeListener('error', reject);\n\t\t\t\tif (result) {\n\t\t\t\t\tresolve(result);\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t}\n\n}\n\nexport function createDataHub(data: FlowdockConnectionDetails): DataHub {\n\treturn new FlowdockDataHub(data);\n}\n"],"sourceRoot":"../../../../lib"}