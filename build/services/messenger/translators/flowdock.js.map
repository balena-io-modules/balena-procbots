{"version":3,"sources":["services/messenger/translators/flowdock.ts"],"names":[],"mappings":"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","file":"flowdock.js","sourcesContent":["/*\nCopyright 2016-2017 Resin.io\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n   http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\nimport * as Promise from 'bluebird';\nimport { Session } from 'flowdock';\nimport * as _ from 'lodash';\nimport { ProcBotError } from '../../../framework/procbot';\nimport { ProcBotErrorCode } from '../../../framework/procbot-types';\nimport { FlowdockConnectionDetails, FlowdockEmitData, FlowdockEvent, FlowdockResponse } from '../../flowdock-types';\nimport {\n\tMessageAction, MessageEvent, MessageInformation,\n\tMessageResponseData, TransmitInformation,\n} from '../../messenger-types';\nimport { DataHub } from '../datahubs/datahub';\nimport * as Translator from './translator';\n\nexport class FlowdockTranslator implements Translator.Translator {\n\tprivate hubs: DataHub[];\n\tprivate session: Session;\n\tprivate organization: string;\n\tprivate eventEquivalencies: {[generic: string]: string[]} = {\n\t\tmessage: ['message'],\n\t};\n\n\tconstructor(data: FlowdockConnectionDetails, hubs: DataHub[]) {\n\t\tthis.hubs = hubs;\n\t\tthis.session = new Session(data.token);\n\t\tconst doNothing = () => { /* pass */ };\n\t\t// The flowdock service both emits and calls back the error\n\t\t// We'll specifically ignore the emit to prevent it bubbling\n\t\tthis.session.on('error', doNothing);\n\t\tthis.organization = data.organization;\n\t}\n\n\tpublic eventIntoMessageType(event: MessageEvent): string {\n\t\treturn _.findKey(this.eventEquivalencies, (value: string[]) => {\n\t\t\treturn _.includes(value, event.type);\n\t\t}) || 'Misc event';\n\t}\n\n\tpublic messageTypeIntoEventTypes(type: string): string[] {\n\t\treturn this.eventEquivalencies[type];\n\t}\n\n\tpublic getAllEventTypes(): string[] {\n\t\treturn _.flatMap(this.eventEquivalencies, _.identity);\n\t}\n\n\tpublic eventIntoMessage(event: FlowdockEvent): Promise<MessageEvent> {\n\t\t// Separate out some parts of the message\n\t\tconst metadata = Translator.extractMetadata(event.rawEvent.content, 'emoji');\n\t\tconst titleAndText = metadata.content.match(/^(.*)\\n--\\n((?:\\r|\\n|.)*)$/);\n\t\tconst flow = event.cookedEvent.flow;\n\t\tconst thread = event.rawEvent.thread_id;\n\t\tconst userId = event.rawEvent.user;\n\t\tconst org = this.organization;\n\t\tconst cookedEvent: MessageInformation = {\n\t\t\t// action: MessageAction.Create,\n\t\t\t// first: event.rawEvent.id === event.rawEvent.thread.initial_message,\n\t\t\tdetails: {\n\t\t\t\tgenesis: metadata.genesis || event.source,\n\t\t\t\thidden: metadata.hidden,\n\t\t\t\tinternal: !!event.rawEvent.external_user_name,\n\t\t\t\ttext: titleAndText ? titleAndText[2].trim() : metadata.content.trim(),\n\t\t\t\ttitle: titleAndText ? titleAndText[1] : undefined,\n\t\t\t},\n\t\t\tsource: {\n\t\t\t\tservice: event.source,\n\t\t\t\tmessage: event.rawEvent.id,\n\t\t\t\tflow,\n\t\t\t\tthread,\n\t\t\t\turl: `https://www.flowdock.com/app/${org}/${flow}/threads/${thread}`,\n\t\t\t\tusername: 'duff', // gets replaced\n\t\t\t},\n\t\t};\n\t\t// If the data provided a username\n\t\tif (event.rawEvent.external_user_name) {\n\t\t\tcookedEvent.source.username = event.rawEvent.external_user_name;\n\t\t\treturn Promise.resolve({\n\t\t\t\tcontext: `${event.source}.${event.cookedEvent.context}`,\n\t\t\t\ttype: this.eventIntoMessageType(event),\n\t\t\t\tcookedEvent,\n\t\t\t\trawEvent: event.rawEvent,\n\t\t\t\tsource: event.source,\n\t\t\t});\n\t\t}\n\t\treturn this.fetchFromSession(`/organizations/${org}/users/${userId}`)\n\t\t\t.then((user) => {\n\t\t\t\tcookedEvent.source.username = user.nick;\n\t\t\t\treturn({\n\t\t\t\t\tcontext: `${event.source}.${event.cookedEvent.context}`,\n\t\t\t\t\ttype: this.eventIntoMessageType(event),\n\t\t\t\t\tcookedEvent,\n\t\t\t\t\trawEvent: event.rawEvent,\n\t\t\t\t\tsource: 'messenger',\n\t\t\t\t});\n\t\t\t});\n\t}\n\n\tpublic messageIntoConnectionDetails(message: TransmitInformation): Promise<FlowdockConnectionDetails> {\n\t\tconst promises: Array<Promise<string>> = _.map(this.hubs, (hub) => {\n\t\t\treturn hub.fetchValue(message.hub.username, 'flowdock', 'token');\n\t\t});\n\t\treturn Promise.any(promises)\n\t\t.then((token) => {\n\t\t\treturn {\n\t\t\t\torganization: this.organization,\n\t\t\t\ttoken,\n\t\t\t};\n\t\t});\n\t}\n\n\tpublic messageIntoEmitDetails(message: TransmitInformation): {method: string[], payload: FlowdockEmitData} {\n\t\tconst org = this.organization;\n\t\tconst flow = message.target.flow;\n\t\tconst title = message.details.title;\n\t\tconst thread = message.target.thread;\n\t\tswitch (message.action) {\n\t\t\tcase MessageAction.CreateThread:\n\t\t\t\tif (!title) {\n\t\t\t\t\tthrow new ProcBotError(ProcBotErrorCode.IncompleteMessage, 'Cannot create a thread without a title');\n\t\t\t\t}\n\t\t\t\treturn {method: ['post'], payload: {\n\t\t\t\t\tpath: `/flows/${org}/${flow}/messages`,\n\t\t\t\t\tpayload: {\n\t\t\t\t\t\t// The concatenated string, of various data nuggets, to emit\n\t\t\t\t\t\tcontent: `${title}\\n--\\n${message.details.text}\\n${Translator.stringifyMetadata(message, 'emoji')}`,\n\t\t\t\t\t\tevent: 'message',\n\t\t\t\t\t\texternal_user_name: message.details.internal ? undefined : message.source.username.substring(0, 16),\n\t\t\t\t\t},\n\t\t\t\t}};\n\t\t\tcase MessageAction.CreateMessage:\n\t\t\t\tif (!thread) {\n\t\t\t\t\tthrow new ProcBotError(ProcBotErrorCode.IncompleteMessage, 'Cannot create a comment without a thread.');\n\t\t\t\t}\n\t\t\t\treturn { method: ['post'], payload: {\n\t\t\t\t\tpath: `/flows/${org}/${flow}/threads/${thread}/messages`,\n\t\t\t\t\tpayload: {\n\t\t\t\t\t\tcontent: `${message.details.text}\\n${Translator.stringifyMetadata(message, 'emoji')}`,\n\t\t\t\t\t\tevent: 'message',\n\t\t\t\t\t\texternal_user_name: message.details.internal ? undefined : message.source.username.substring(0, 16),\n\t\t\t\t\t}\n\t\t\t\t}};\n\t\t\tcase MessageAction.ReadConnection:\n\t\t\t\tif (!thread) {\n\t\t\t\t\tthrow new ProcBotError(ProcBotErrorCode.IncompleteMessage, 'Cannot search for connections without a thread.');\n\t\t\t\t}\n\t\t\t\treturn { method: ['get'], payload: {\n\t\t\t\t\tpath: `/flows/${org}/${flow}/threads/${thread}/messages`,\n\t\t\t\t\tpayload: {\n\t\t\t\t\t\tsearch: `This thread is mirrored in [${message.source.service} thread`,\n\t\t\t\t\t},\n\t\t\t\t}};\n\t\t\tdefault:\n\t\t\t\tthrow new ProcBotError(\n\t\t\t\t\tProcBotErrorCode.UnsupportedMessageAction, `${message.action} not supported on ${message.target.service}`\n\t\t\t\t);\n\t\t}\n\t}\n\n\tpublic responseIntoMessageResponse(\n\t\tmessage: TransmitInformation, response: FlowdockResponse\n\t): MessageResponseData {\n\t\tswitch (message.action) {\n\t\t\tcase MessageAction.CreateThread:\n\t\t\tcase MessageAction.CreateMessage:\n\t\t\t\tconst thread = response.thread_id;\n\t\t\t\tconst org = this.organization;\n\t\t\t\tconst flow = message.target.flow;\n\t\t\t\tconst url = `https://www.flowdock.com/app/${org}/${flow}/threads/${thread}`;\n\t\t\t\treturn {\n\t\t\t\t\tmessage: response.id,\n\t\t\t\t\tthread: response.thread_id,\n\t\t\t\t\turl,\n\t\t\t\t};\n\t\t\tcase MessageAction.ReadConnection:\n\t\t\t\tif (response.length > 0) {\n\t\t\t\t\treturn {\n\t\t\t\t\t\tthread: response[0].content.match(/This thread is mirrored in \\[(?:\\w+) thread ([\\d\\w_]+)]/i)[1]\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t\tthrow new ProcBotError(ProcBotErrorCode.NoConnectionFound, 'No connected thread found by querying Flowdock.');\n\t\t\tdefault:\n\t\t\t\tthrow new Error(`${message.action} not supported on ${message.target.service}`);\n\t\t}\n\t}\n\n\t/**\n\t * Utility function to structure the flowdock session as a promise.\n\t * @param path    Endpoint to retrieve.\n\t * @param search  Optional, some words which may be used to shortlist the results.\n\t * @returns       Response from the session.\n\t */\n\tprivate fetchFromSession = (path: string, search?: string): Promise<any> => {\n\t\treturn new Promise<any>((resolve, reject) => {\n\t\t\tthis.session.get(path, {search}, (error?: Error, result?: any) => {\n\t\t\t\tif (result) {\n\t\t\t\t\tresolve(result);\n\t\t\t\t} else {\n\t\t\t\t\treject(error);\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t}\n}\n\nexport function createTranslator(data: FlowdockConnectionDetails, hubs: DataHub[]): Translator.Translator {\n\treturn new FlowdockTranslator(data, hubs);\n}\n"],"sourceRoot":"../../../../lib"}