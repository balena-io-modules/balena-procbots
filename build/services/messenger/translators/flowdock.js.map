{"version":3,"sources":["services/messenger/translators/flowdock.ts"],"names":[],"mappings":"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","file":"flowdock.js","sourcesContent":["/*\nCopyright 2016-2017 Resin.io\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n   http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\nimport * as Promise from 'bluebird';\nimport { Session } from 'flowdock';\nimport * as _ from 'lodash';\nimport {\n\tFlowdockConstructor, FlowdockEmitInstructions, FlowdockEvent,\n\tFlowdockResponse,\n} from '../../flowdock-types';\nimport {\n\tBasicMessageInformation, CreateThreadResponse, IdentifyThreadResponse,\n\tMessengerAction, MessengerConstructor, MessengerEvent, TransmitInformation,\n\tUpdateThreadResponse,\n} from '../../messenger-types';\nimport { ServiceType } from '../../service-types';\nimport { DataHub } from '../datahubs/datahub';\nimport { Translator, TranslatorError } from './translator';\nimport { TranslatorScaffold } from './translator-scaffold';\nimport { EmitConverters, ResponseConverters, TranslatorErrorCode } from './translator-types';\n\n/**\n * Class to enable the translating between messenger standard forms and service\n * specific forms.\n */\nexport class FlowdockTranslator extends TranslatorScaffold implements Translator {\n\t/**\n\t * Internal function to create a formatted and length limited text block for a message.\n\t * @param body    Body of the message, this part may be snipped\n\t * @param header  Header, if any, to put at the top of the message.\n\t * @param footer  Footer, if any, to put at the bottom of the message.\n\t * @returns       Markdown formatted text block within Flowdock's character limit.\n\t */\n\tprivate static createFormattedText(body: string, header?: string, footer?: string): string {\n\t\tconst lengthLimit = 8096;\n\t\tconst first = header ? `${header}\\n--\\n` : '';\n\t\tconst last = footer ? `\\n${footer}` : '';\n\t\tif ((first.length + body.length + last.length) < lengthLimit) {\n\t\t\treturn `${first}${body}${last}`;\n\t\t}\n\t\tconst snipProvisional = '\\n\\n`... about xx% shown.`';\n\t\tconst snipped = body.substr(0, lengthLimit - first.length - snipProvisional.length - last.length);\n\t\tconst snip = snipProvisional.replace('xx', Math.floor((100*snipped.length)/body.length).toString(10));\n\t\treturn `${first}${snipped}${snip}${last}`;\n\t}\n\n\t/**\n\t * Utility function to structure the flowdock session as a promise.\n\t * @param session  Session to interrogate\n\t * @param path     Endpoint to retrieve.\n\t * @param search   Optional, some words which may be used to shortlist the results.\n\t * @returns        Response from the session.\n\t */\n\tprivate static fetchFromSession = (session: Session, path: string, search?: string): Promise<any> => {\n\t\treturn new Promise<any>((resolve, reject) => {\n\t\t\tsession.get(path, {search}, (error?: Error, result?: any) => {\n\t\t\t\tif (result) {\n\t\t\t\t\tresolve(result);\n\t\t\t\t} else {\n\t\t\t\t\treject(error);\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t}\n\n\t/**\n\t * Converts a response into the generic format.\n\t * @param org       Parameterised name of the organization.\n\t * @param message   The initial message that prompted this action.\n\t * @param response  The response from the SDK.\n\t * @returns         Promise that resolve to the thread details.\n\t */\n\tprivate static convertCreateThreadResponse(\n\t\torg: string, message: TransmitInformation, response: FlowdockResponse\n\t): Promise<CreateThreadResponse> {\n\t\tconst thread = response.thread_id;\n\t\tconst flow = message.target.flow;\n\t\tconst url = `https://www.flowdock.com/app/${org}/${flow}/threads/${thread}`;\n\t\treturn Promise.resolve({\n\t\t\tthread: response.thread_id,\n\t\t\turl,\n\t\t});\n\t}\n\n\t/**\n\t * Converts a response into the generic format.\n\t * @param message   The initial message that prompted this action.\n\t * @param response  The response from the SDK.\n\t * @returns         Promise that resolve to the thread details.\n\t */\n\tprivate static convertReadConnectionResponse(\n\t\tmessage: TransmitInformation, response: FlowdockResponse\n\t): Promise<IdentifyThreadResponse> {\n\t\tif (response.length > 0) {\n\t\t\tconst idFinder = new RegExp(`\\\\[${message.source.service} thread ([\\\\w\\\\d-+\\\\/=]+)]`, 'i');\n\t\t\treturn Promise.resolve({\n\t\t\t\tthread: response[0].content.match(idFinder)[1],\n\t\t\t});\n\t\t}\n\t\treturn Promise.reject(new TranslatorError(\n\t\t\tTranslatorErrorCode.ValueNotFound, 'No connected thread found by querying Flowdock.'\n\t\t));\n\t}\n\n\t/**\n\t * Converts a response into the generic format.\n\t * @param _message   The initial message that prompted this action.\n\t * @param _response  The response from the SDK.\n\t * @returns          Promise that resolve to the thread details.\n\t */\n\tprivate static convertUpdateThreadResponse(\n\t\t_message: TransmitInformation, _response: FlowdockResponse\n\t): Promise<UpdateThreadResponse> {\n\t\treturn Promise.resolve({});\n\t}\n\n\t/**\n\t * Converts a provided message object into instructions to create a thread.\n\t * @param orgId    Parameterised ID of the organisation.\n\t * @param message  object to analyse.\n\t * @returns        Promise that resolves to emit instructions.\n\t */\n\tprivate static createThreadIntoEmit(orgId: string, message: TransmitInformation): Promise<FlowdockEmitInstructions> {\n\t\t// Check we have a flow.\n\t\tconst flowId = message.target.flow;\n\t\tif (!message.details.title) {\n\t\t\treturn Promise.reject(new TranslatorError(\n\t\t\t\tTranslatorErrorCode.IncompleteTransmitInformation, 'Cannot create a thread without a title'\n\t\t\t));\n\t\t}\n\t\t// Bundle for the session\n\t\treturn Promise.resolve({method: ['post'], payload: {\n\t\t\tpath: `/flows/${orgId}/${flowId}/messages`,\n\t\t\tpayload: {\n\t\t\t\t// The concatenated string, of various data nuggets, to emit.\n\t\t\t\tcontent: FlowdockTranslator.createFormattedText(\n\t\t\t\t\tmessage.details.text, message.details.title, TranslatorScaffold.stringifyMetadata(message, 'emoji')\n\t\t\t\t),\n\t\t\t\tevent: 'message',\n\t\t\t\texternal_user_name: message.details.internal ? undefined : message.details.handle.substring(0, 16),\n\t\t\t},\n\t\t}});\n\t}\n\n\t/**\n\t * Converts a provided message object into instructions to create a message.\n\t * @param orgId    Parameterised ID of the organisation.\n\t * @param message  object to analyse.\n\t * @returns        Promise that resolves to emit instructions.\n\t */\n\tprivate static createMessageIntoEmit(orgId: string, message: TransmitInformation): Promise<FlowdockEmitInstructions> {\n\t\t// Check we have a thread.\n\t\tconst threadId = message.target.thread;\n\t\tif (!threadId) {\n\t\t\treturn Promise.reject(new TranslatorError(\n\t\t\t\tTranslatorErrorCode.IncompleteTransmitInformation, 'Cannot create a comment without a thread.'\n\t\t\t));\n\t\t}\n\t\t// Bundle for the session.\n\t\treturn Promise.resolve({ method: ['post'], payload: {\n\t\t\tpath: `/flows/${orgId}/${message.target.flow}/threads/${threadId}/messages`,\n\t\t\tpayload: {\n\t\t\t\tcontent: FlowdockTranslator.createFormattedText(\n\t\t\t\t\tmessage.details.text, undefined, TranslatorScaffold.stringifyMetadata(message, 'emoji')\n\t\t\t\t),\n\t\t\t\tevent: 'message',\n\t\t\t\texternal_user_name: message.details.internal ? undefined : message.details.handle.substring(0, 16),\n\t\t\t}\n\t\t}});\n\t}\n\n\t/**\n\t * Converts a provided message object into instructions to update tags.\n\t * @param orgId    Parameterised ID of the organisation.\n\t * @param session  Session to query to find the initial message of the thread.\n\t * @param message  object to analyse.\n\t * @returns        Promise that resolves to emit instructions.\n\t */\n\tprivate static updateTagsIntoEmit(\n\t\torgId: string, session: Session, message: TransmitInformation\n\t): Promise<FlowdockEmitInstructions> {\n\t\t// Check we have a thread.\n\t\tconst threadId = message.target.thread;\n\t\tif (!threadId) {\n\t\t\treturn Promise.reject(new TranslatorError(\n\t\t\t\tTranslatorErrorCode.IncompleteTransmitInformation, 'Cannot update tags without a thread.'\n\t\t\t));\n\t\t}\n\t\t// Check we have tags.\n\t\tconst tags = message.details.tags;\n\t\tif (!_.isArray(tags)) {\n\t\t\treturn Promise.reject(new TranslatorError(\n\t\t\t\tTranslatorErrorCode.IncompleteTransmitInformation, 'Cannot update tags without a tags array.'\n\t\t\t));\n\t\t}\n\t\t// Get the initial message.\n\t\tconst flowId = message.target.flow;\n\t\treturn FlowdockTranslator.fetchFromSession(session, `/flows/${orgId}/${flowId}/threads/${threadId}`)\n\t\t.then((threadResponse) => {\n\t\t\treturn FlowdockTranslator.fetchFromSession(\n\t\t\t\tsession,\n\t\t\t\t`/flows/${orgId}/${flowId}/messages/${threadResponse.initial_message}`,\n\t\t\t);\n\t\t})\n\t\t// Add the actual tags to the user mention tags\n\t\t.then((initialMessage) => {\n\t\t\tconst systemTags = _.filter(initialMessage.tags, (tag: string) => {\n\t\t\t\treturn /^:/.test(tag);\n\t\t\t});\n\t\t\t// Bundle for the session.\n\t\t\treturn { method: ['put'], payload: {\n\t\t\t\tpath: `/flows/${orgId}/${flowId}/messages/${initialMessage.id}`,\n\t\t\t\tpayload: { tags: _.concat(tags, systemTags) },\n\t\t\t}};\n\t\t});\n\t}\n\n\t/**\n\t * Converts a provided message object into instructions to read a thread for connections.\n\t * @param orgId    Parameterised ID of the organisation.\n\t * @param message  object to analyse.\n\t * @returns        Promise that resolves to emit instructions.\n\t */\n\tprivate static readConnectionIntoEmit(orgId: string, message: TransmitInformation): Promise<FlowdockEmitInstructions> {\n\t\t// Check we have a thread.\n\t\tconst threadId = message.target.thread;\n\t\tif (!threadId) {\n\t\t\treturn Promise.reject(new TranslatorError(\n\t\t\t\tTranslatorErrorCode.IncompleteTransmitInformation, 'Cannot search for connections without a thread.'\n\t\t\t));\n\t\t}\n\t\t// Bundle for the session.\n\t\treturn Promise.resolve({ method: ['get'], payload: {\n\t\t\tpath: `/flows/${orgId}/${message.target.flow}/threads/${threadId}/messages`,\n\t\t\tpayload: {\n\t\t\t\tsearch: `[${message.source.service} thread`,\n\t\t\t},\n\t\t}});\n\t}\n\n\tprotected eventEquivalencies = {\n\t\tmessage: ['message'],\n\t};\n\tprotected emitConverters: EmitConverters = {};\n\tprotected responseConverters: ResponseConverters = {\n\t\t[MessengerAction.ReadConnection]: FlowdockTranslator.convertReadConnectionResponse,\n\t\t[MessengerAction.UpdateTags]: FlowdockTranslator.convertUpdateThreadResponse,\n\t\t[MessengerAction.CreateMessage]: FlowdockTranslator.convertUpdateThreadResponse,\n\t};\n\n\tprivate hubs: DataHub[];\n\tprivate session: Session;\n\tprivate organization: string;\n\n\tconstructor(data: FlowdockConstructor, hubs: DataHub[]) {\n\t\tsuper();\n\t\tthis.hubs = hubs;\n\t\tthis.session = new Session(data.token);\n\t\t// The flowdock service both emits and calls back the error\n\t\t// We'll just log the emit to prevent it bubbling\n\t\tthis.session.on('error', _.partial(console.log, 'error looking up data from Flowdock.'));\n\t\tthis.organization = data.organization;\n\t\t// These converters require the injection of a couple of details from `this` instance.\n\t\tthis.responseConverters[MessengerAction.CreateThread] =\n\t\t\t_.partial(FlowdockTranslator.convertCreateThreadResponse, data.organization);\n\t\tthis.emitConverters[MessengerAction.CreateThread] =\n\t\t\t_.partial(FlowdockTranslator.createThreadIntoEmit, data.organization);\n\t\tthis.emitConverters[MessengerAction.CreateMessage] =\n\t\t\t_.partial(FlowdockTranslator.createMessageIntoEmit, data.organization);\n\t\tthis.emitConverters[MessengerAction.UpdateTags] =\n\t\t\t_.partial(FlowdockTranslator.updateTagsIntoEmit, data.organization, this.session);\n\t\tthis.emitConverters[MessengerAction.ReadConnection] =\n\t\t\t_.partial(FlowdockTranslator.readConnectionIntoEmit, data.organization);\n\t}\n\n\t/**\n\t * Promise to convert a provided service specific event into messenger's standard form.\n\t * @param event  Service specific event, straight out of the ServiceListener.\n\t * @returns      Promise that resolves to the standard form of the message.\n\t */\n\tpublic eventIntoMessage(event: FlowdockEvent): Promise<MessengerEvent> {\n\t\t// Calculate metadata and use whichever matched, i.e. has a shorter content because it extracted metadata.\n\t\tconst emojiMetadata = TranslatorScaffold.extractMetadata(event.rawEvent.content, 'emoji');\n\t\tconst charMetadata = TranslatorScaffold.extractMetadata(event.rawEvent.content, 'char');\n\t\tconst metadata = emojiMetadata.content.length < charMetadata.content.length ? emojiMetadata : charMetadata;\n\t\t// Pull some details out of the event.\n\t\tconst titleSplitter = /^(.*)\\n--\\n((?:\\r|\\n|.)*)$/;\n\t\tconst titleAndText = metadata.content.match(titleSplitter);\n\t\tconst text = titleAndText ? titleAndText[2].trim() : metadata.content.trim();\n\t\tconst flow = event.cookedEvent.flow;\n\t\tconst thread = event.rawEvent.thread_id;\n\t\tconst userId = event.rawEvent.user;\n\t\tconst org = this.organization;\n\t\tconst firstMessageId = event.rawEvent.thread.initial_message;\n\t\t// Flowdock uses tags that begin with a colon as system tags.\n\t\tconst tagFilter = (tag: string) => {\n\t\t\treturn !/^:/.test(tag);\n\t\t};\n\t\t// Start building this in service scaffold form.\n\t\tconst cookedEvent: BasicMessageInformation = {\n\t\t\tdetails: {\n\t\t\t\tgenesis: metadata.genesis || event.source,\n\t\t\t\thandle: 'duff', // gets replaced\n\t\t\t\thidden: metadata.hidden,\n\t\t\t\tinternal: !!event.rawEvent.external_user_name,\n\t\t\t\ttags: [], // gets replaced\n\t\t\t\ttext,\n\t\t\t\ttitle: 'duff', // gets replaces\n\t\t\t},\n\t\t\tsource: {\n\t\t\t\tservice: event.source,\n\t\t\t\tmessage: event.rawEvent.id,\n\t\t\t\tflow,\n\t\t\t\tthread,\n\t\t\t\turl: `https://www.flowdock.com/app/${org}/${flow}/threads/${thread}`,\n\t\t\t\tusername: 'duff', // gets replaced\n\t\t\t},\n\t\t};\n\t\t// Get details of the tags and title from the first message.\n\t\treturn FlowdockTranslator.fetchFromSession(this.session, `flows/${org}/${flow}/messages/${firstMessageId}`)\n\t\t.then((firstMessage) => {\n\t\t\tcookedEvent.details.tags = _.uniq(firstMessage.tags.filter(tagFilter));\n\t\t\tconst findTitle = firstMessage.content.match(titleSplitter);\n\t\t\tcookedEvent.details.title = findTitle ? findTitle[1].trim() : firstMessage.content;\n\t\t\treturn Promise.resolve(undefined);\n\t\t})\n\t\t// Get details of the user nickname.\n\t\t.then(() => {\n\t\t\tif (event.rawEvent.external_user_name) {\n\t\t\t\treturn event.rawEvent.external_user_name;\n\t\t\t}\n\t\t\treturn FlowdockTranslator.fetchFromSession(this.session, `/organizations/${org}/users/${userId}`)\n\t\t\t.then((user) => {\n\t\t\t\treturn user.nick;\n\t\t\t});\n\t\t})\n\t\t// Resolve to the details, compiled from those provided and those gathered.\n\t\t.then((username: string) => {\n\t\t\tcookedEvent.source.username = username;\n\t\t\tcookedEvent.details.handle = username;\n\t\t\treturn {\n\t\t\t\tcontext: `${event.source}.${event.cookedEvent.context}`,\n\t\t\t\ttype: this.eventIntoMessageType(event),\n\t\t\t\tcookedEvent,\n\t\t\t\trawEvent: event.rawEvent,\n\t\t\t\tsource: event.source,\n\t\t\t};\n\t\t});\n\t}\n\n\t/**\n\t * Promise to provide emitter construction details for a provided message.\n\t * @param message  Message information, used to retrieve username.\n\t * @returns        Promise that resolves to the details required to construct an emitter.\n\t */\n\tpublic messageIntoEmitterConstructor(message: TransmitInformation): Promise<FlowdockConstructor> {\n\t\tconst promises: Array<Promise<string>> = _.map(this.hubs, (hub) => {\n\t\t\treturn hub.fetchValue(message.details.internal ? message.target.username : 'generic', 'flowdock', 'token');\n\t\t});\n\t\treturn Promise.any(promises)\n\t\t.then((token) => {\n\t\t\treturn {\n\t\t\t\torganization: this.organization,\n\t\t\t\ttoken,\n\t\t\t\ttype: ServiceType.Emitter\n\t\t\t};\n\t\t});\n\t}\n\n\t/**\n\t * Populate the listener constructor with details from the more generic constructor.\n\t * Provided since the connectionDetails might need to be parsed from JSON and the server details might be instantiated.\n\t * @param connectionDetails  Construction details for the service, probably 'inert', ie from JSON.\n\t * @param genericDetails     Details from the construction of the messenger.\n\t * @returns                  Connection details with the value merged in.\n\t */\n\tpublic mergeGenericDetails(\n\t\tconnectionDetails: FlowdockConstructor, genericDetails: MessengerConstructor\n\t): FlowdockConstructor {\n\t\tif (connectionDetails.type === undefined) {\n\t\t\tconnectionDetails.type = genericDetails.type;\n\t\t}\n\t\treturn connectionDetails;\n\t}\n}\n\n/**\n * Builds a translator that will convert Flowdock specific information to and from Messenger format.\n * @param data  Construction details for creating a Flowdock session.\n * @param hubs  A list of places to look for additional information, eg token.\n * @returns     A translator, ready to interpret Flowdock's communications.\n */\nexport function createTranslator(data: FlowdockConstructor, hubs: DataHub[]): Translator {\n\treturn new FlowdockTranslator(data, hubs);\n}\n"],"sourceRoot":"../../../../lib"}