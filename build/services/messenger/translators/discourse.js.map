{"version":3,"sources":["services/messenger/translators/discourse.ts"],"names":[],"mappings":"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","file":"discourse.js","sourcesContent":["/*\n Copyright 2016-2017 Resin.io\n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n you may not use this file except in compliance with the License.\n You may obtain a copy of the License at\n\n http://www.apache.org/licenses/LICENSE-2.0\n\n Unless required by applicable law or agreed to in writing, software\n distributed under the License is distributed on an \"AS IS\" BASIS,\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n See the License for the specific language governing permissions and\n limitations under the License.\n */\n\nimport * as Promise from 'bluebird';\nimport * as _ from 'lodash';\nimport * as request from 'request-promise';\nimport {\n\tDiscourseConnectionDetails, DiscourseEmitData,\n\tDiscourseEvent, DiscourseResponse\n} from '../../discourse-types';\nimport { MessageContext, MessageEvent, MessageResponseData, TransmitContext } from '../../messenger-types';\nimport { DataHub } from '../datahubs/datahub';\nimport * as Translator from './translator';\n\nexport class DiscourseTranslator implements Translator.Translator {\n\tprivate hub: DataHub;\n\tprivate connectionDetails: DiscourseConnectionDetails;\n\tprivate eventEquivalencies: {[generic: string]: string[]} = {\n\t\tmessage: ['post'],\n\t};\n\n\tconstructor(data: DiscourseConnectionDetails, hub: DataHub) {\n\t\tthis.hub = hub;\n\t\tthis.connectionDetails = data;\n\t}\n\n\tpublic eventTypeIntoMessageType(type: string): string {\n\t\treturn _.findKey(this.eventEquivalencies, (value: string[]) => {\n\t\t\treturn _.includes(value, type);\n\t\t}) || 'Misc event';\n\t}\n\n\tpublic messageTypeIntoEventTypes(type: string): string[] {\n\t\treturn this.eventEquivalencies[type];\n\t}\n\n\tpublic getAllEventTypes(): string[] {\n\t\treturn _.flatMap(this.eventEquivalencies, _.identity);\n\t}\n\n\tpublic eventIntoMessage(event: DiscourseEvent): Promise<MessageEvent> {\n\t\t// Encode once the common parts of a request\n\t\tconst getGeneric = {\n\t\t\tjson: true,\n\t\t\tmethod: 'GET',\n\t\t\tqs: {\n\t\t\t\tapi_key: this.connectionDetails.token,\n\t\t\t\tapi_username: this.connectionDetails.username,\n\t\t\t},\n\t\t\t// appended before execution\n\t\t\turi: `https://${this.connectionDetails.instance}`,\n\t\t};\n\t\t// Gather more complete details of the enqueued event\n\t\tconst getPost = _.cloneDeep(getGeneric);\n\t\tgetPost.uri += `/posts/${event.rawEvent.id}`;\n\t\tconst getTopic = _.cloneDeep(getGeneric);\n\t\tgetTopic.uri += `/t/${event.rawEvent.topic_id}`;\n\t\treturn Promise.props({\n\t\t\tpost: request(getPost),\n\t\t\ttopic: request(getTopic),\n\t\t})\n\t\t\t.then((details: {post: any, topic: any}) => {\n\t\t\t\t// Gather metadata and resolve\n\t\t\t\tconst metadata = Translator.extractMetadata(details.post.raw, 'img');\n\t\t\t\tconst cookedEvent: MessageContext = {\n\t\t\t\t\tdetails: {\n\t\t\t\t\t\tgenesis: metadata.genesis || event.source,\n\t\t\t\t\t\t// post_type 4 seems to correspond to whisper\n\t\t\t\t\t\thidden: details.post.post_type === 4,\n\t\t\t\t\t\tinternal: details.post.staff,\n\t\t\t\t\t\ttext: metadata.content.trim(),\n\t\t\t\t\t\ttitle: details.topic.title,\n\t\t\t\t\t},\n\t\t\t\t\tsource: {\n\t\t\t\t\t\tservice: event.source,\n\t\t\t\t\t\t// These come in as integers, but should be strings\n\t\t\t\t\t\tflow: details.topic.category_id.toString(),\n\t\t\t\t\t\tmessage: details.post.id.toString(),\n\t\t\t\t\t\tthread: details.post.topic_id.toString(),\n\t\t\t\t\t\turl: getTopic.uri,\n\t\t\t\t\t\tusername: details.post.username,\n\t\t\t\t\t},\n\t\t\t\t};\n\t\t\t\treturn {\n\t\t\t\t\tcontext: `${event.source}.${event.cookedEvent.context}`,\n\t\t\t\t\ttype: this.eventTypeIntoMessageType(event.type),\n\t\t\t\t\tcookedEvent,\n\t\t\t\t\trawEvent: event.rawEvent,\n\t\t\t\t\tsource: 'messenger',\n\t\t\t\t};\n\t\t\t});\n\t}\n\n\tpublic messageIntoConnectionDetails(message: TransmitContext): Promise<DiscourseConnectionDetails> {\n\t\treturn this.hub.fetchValue(message.hubUsername, 'discourse', 'token')\n\t\t\t.then((token) => {\n\t\t\t\treturn {\n\t\t\t\t\ttoken,\n\t\t\t\t\tusername: message.target.username,\n\t\t\t\t\tinstance: this.connectionDetails.instance,\n\t\t\t\t};\n\t\t\t});\n\t}\n\n\tpublic messageIntoCreateThread(message: TransmitContext): {method: string[], payload: DiscourseEmitData} {\n\t\t// Attempt to find the thread ID to know if this is a new topic or not\n\t\tconst topicId = message.target.thread;\n\t\tif (!topicId) {\n\t\t\tconst title = message.details.title;\n\t\t\tif (!title) {\n\t\t\t\tthrow new Error('Cannot create Discourse Thread without a title');\n\t\t\t}\n\t\t\t// A new topic request for discourse\n\t\t\treturn {method: ['request'], payload: {\n\t\t\t\tmethod: 'POST',\n\t\t\t\tpath: '/posts',\n\t\t\t\tbody: {\n\t\t\t\t\tcategory: message.target.flow,\n\t\t\t\t\traw: `${message.details.text}\\n\\n---\\n${Translator.stringifyMetadata(message, 'img')}`,\n\t\t\t\t\ttitle,\n\t\t\t\t\tunlist_topic: 'false',\n\t\t\t\t},\n\t\t\t}};\n\t\t}\n\t\t// A new message request for discourse\n\t\treturn {method: ['request'], payload: {\n\t\t\tmethod: 'POST',\n\t\t\tpath: '/posts',\n\t\t\tbody: {\n\t\t\t\traw: `${message.details.text}\\n\\n---\\n${Translator.stringifyMetadata(message, 'img')}`,\n\t\t\t\ttopic_id: topicId,\n\t\t\t\twhisper: message.details.hidden ? 'true' : 'false',\n\t\t\t},\n\t\t}};\n\t}\n\n\tpublic responseIntoMessageResponse(_payload: TransmitContext, response: DiscourseResponse): MessageResponseData {\n\t\treturn {\n\t\t\tmessage: response.id,\n\t\t\tthread: response.topic_id,\n\t\t\turl: `https://${this.connectionDetails.instance}/t/${response.topic_id}`\n\t\t};\n\t}\n}\n\nexport function createTranslator(data: DiscourseConnectionDetails, hub: DataHub): Translator.Translator {\n\treturn new DiscourseTranslator(data, hub);\n}\n"],"sourceRoot":"../../../../lib"}