{"version":3,"sources":["services/messenger/translators/discourse.ts"],"names":[],"mappings":"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","file":"discourse.js","sourcesContent":["/*\n Copyright 2016-2017 Resin.io\n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n you may not use this file except in compliance with the License.\n You may obtain a copy of the License at\n\n http://www.apache.org/licenses/LICENSE-2.0\n\n Unless required by applicable law or agreed to in writing, software\n distributed under the License is distributed on an \"AS IS\" BASIS,\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n See the License for the specific language governing permissions and\n limitations under the License.\n */\n\nimport * as Promise from 'bluebird';\nimport * as _ from 'lodash';\nimport * as request from 'request-promise';\nimport {\n\tDiscourseConstructor, DiscourseEmitInstructions, DiscourseResponse,\n} from '../../discourse-types';\nimport {\n\tBasicMessageInformation, CreateThreadResponse, IdentifyThreadResponse,\n\tMessengerAction, MessengerConstructor, MessengerEvent, TransmitInformation,\n\tUpdateThreadResponse,\n} from '../../messenger-types';\nimport { ServiceScaffoldEvent } from '../../service-scaffold-types';\nimport { ServiceType } from '../../service-types';\nimport { DataHub } from '../datahubs/datahub';\nimport { Translator, TranslatorError } from './translator';\nimport { TranslatorScaffold } from './translator-scaffold';\nimport { EmitConverters, ResponseConverters, TranslatorErrorCode } from './translator-types';\n\n/**\n * Class to enable the translating between messenger standard forms and service\n * specific forms.\n */\nexport class DiscourseTranslator extends TranslatorScaffold implements Translator {\n\t/**\n\t * Converts a provided message object into instructions to create a thread.\n\t * @param message  object to analyse.\n\t * @returns        Promise that resolves to emit instructions.\n\t */\n\tprivate static createThreadIntoEmit(message: TransmitInformation): Promise<DiscourseEmitInstructions> {\n\t\t// Check that we have a title.\n\t\tconst title = message.details.title;\n\t\tif (!title) {\n\t\t\treturn Promise.reject(new TranslatorError(\n\t\t\t\tTranslatorErrorCode.IncompleteTransmitInformation, 'Cannot create a thread without a title.'\n\t\t\t));\n\t\t}\n\t\t// Bundle into a format for the service.\n\t\treturn Promise.resolve({ method: ['request'], payload: {\n\t\t\thtmlVerb: 'POST',\n\t\t\tpath: '/posts',\n\t\t\tbody: {\n\t\t\t\tcategory: message.target.flow,\n\t\t\t\traw: `${message.details.text}\\n\\n---\\n${TranslatorScaffold.stringifyMetadata(message, 'logo')}`,\n\t\t\t\ttitle,\n\t\t\t\tunlist_topic: 'false',\n\t\t\t},\n\t\t}});\n\t}\n\n\t/**\n\t * Converts a provided message object into instructions to create a message.\n\t * @param message  object to analyse.\n\t * @returns        Promise that resolves to emit instructions.\n\t */\n\tprivate static createMessageIntoEmit(message: TransmitInformation): Promise<DiscourseEmitInstructions> {\n\t\t// Check we have a thread.\n\t\tconst thread = message.target.thread;\n\t\tif (!thread) {\n\t\t\treturn Promise.reject(new TranslatorError(\n\t\t\t\tTranslatorErrorCode.IncompleteTransmitInformation, 'Cannot create a comment without a thread.'\n\t\t\t));\n\t\t}\n\t\t// Bundle into a format for the service.\n\t\treturn Promise.resolve({ method: ['request'], payload: {\n\t\t\thtmlVerb: 'POST',\n\t\t\tpath: '/posts',\n\t\t\tbody: {\n\t\t\t\traw: `${message.details.text}\\n\\n---\\n${TranslatorScaffold.stringifyMetadata(message, 'logo')}`,\n\t\t\t\ttopic_id: thread,\n\t\t\t\twhisper: message.details.hidden ? 'true' : 'false',\n\t\t\t}\n\t\t}});\n\t}\n\n\t/**\n\t * Converts a provided message object into instructions to read a thread for connections.\n\t * @param message  object to analyse.\n\t * @returns        Promise that resolves to emit instructions.\n\t */\n\tprivate static readConnectionIntoEmit(message: TransmitInformation): Promise<DiscourseEmitInstructions> {\n\t\t// Check we have a thread.\n\t\tconst thread = message.target.thread;\n\t\tif (!thread) {\n\t\t\treturn Promise.reject(new TranslatorError(\n\t\t\t\tTranslatorErrorCode.IncompleteTransmitInformation, 'Cannot search for connections without a thread.'\n\t\t\t));\n\t\t}\n\t\t// Bundle into a format for the service.\n\t\treturn Promise.resolve({ method: ['request'], payload: {\n\t\t\thtmlVerb: 'GET',\n\t\t\tpath: '/search/query',\n\t\t\tqs: {\n\t\t\t\tterm: `Connects to [${message.source.service} thread`,\n\t\t\t\t'search_context[type]': 'topic',\n\t\t\t\t'search_context[id]': thread,\n\t\t\t}\n\t\t}});\n\t}\n\n\t/**\n\t * Converts a provided message object into instructions to update the tags.\n\t * @param connectionDetails  Details to use to retrieve the topic slug.\n\t * @param message            object to analyse.\n\t * @returns                  Promise that resolves to emit instructions.\n\t */\n\tprivate static updateTagsIntoEmit(\n\t\tconnectionDetails: DiscourseConstructor, message: TransmitInformation\n\t): Promise<DiscourseEmitInstructions> {\n\t\t// Check that we have a thread.\n\t\tconst thread = message.target.thread;\n\t\tif (!thread) {\n\t\t\treturn Promise.reject(new TranslatorError(\n\t\t\t\tTranslatorErrorCode.IncompleteTransmitInformation, 'Cannot update tags without a thread.'\n\t\t\t));\n\t\t}\n\t\t// Check that we have an array of tags.\n\t\tconst tags = message.details.tags;\n\t\tif (!_.isArray(tags)) {\n\t\t\treturn Promise.reject(new TranslatorError(\n\t\t\t\tTranslatorErrorCode.IncompleteTransmitInformation, 'Cannot update tags without a tags array.'\n\t\t\t));\n\t\t}\n\t\t// Retrieve details of the topic, because tag updates need slug as well as ID.\n\t\tconst getTopic = {\n\t\t\tjson: true,\n\t\t\tmethod: 'GET',\n\t\t\tqs: {\n\t\t\t\tapi_key: connectionDetails.token,\n\t\t\t\tapi_username: connectionDetails.username,\n\t\t\t},\n\t\t\turl: `https://${connectionDetails.instance}/t/${message.target.thread}`,\n\t\t};\n\t\treturn request(getTopic)\n\t\t.then((topicResponse) => {\n\t\t\t// Bundle into a format for the service.\n\t\t\treturn { method: ['request'], payload: {\n\t\t\t\tbody: {},\n\t\t\t\thtmlVerb: 'PUT',\n\t\t\t\tqs: {\n\t\t\t\t\t'tags[]': tags,\n\t\t\t\t},\n\t\t\t\tpath: `/t/${topicResponse.slug}/${thread}.json`,\n\t\t\t}};\n\t\t});\n\t}\n\n\t/**\n\t * Converts a response into a the generic format.\n\t * @param instance  Name of the instance, used to properly populate the URL.\n\t * @param _message  Not used, the initial message.\n\t * @param response  The response provided by the service.\n\t * @returns         Promise that resolves to emit instructions.\n\t */\n\tprivate static convertCreateThreadResponse(\n\t\tinstance: string, _message: TransmitInformation, response: DiscourseResponse\n\t): Promise<CreateThreadResponse> {\n\t\treturn Promise.resolve({\n\t\t\tthread: response.topic_id,\n\t\t\turl: `https://${instance}/t/${response.topic_id}`\n\t\t});\n\t}\n\n\t/**\n\t * Converts a response into a the generic format.\n\t * @param message  The initial message that triggered this response.\n\t * @param response  The response provided by the service.\n\t * @returns         Promise that resolves to emit instructions.\n\t */\n\tprivate static convertReadConnectionResponse(\n\t\tmessage: TransmitInformation, response: DiscourseResponse\n\t): Promise<IdentifyThreadResponse> {\n\t\tconst idFinder = new RegExp(`Connects to ${message.source.service} thread ([\\\\w\\\\d-+\\\\/=]+)`, 'i');\n\t\tif (response.posts.length > 0) {\n\t\t\treturn Promise.resolve({\n\t\t\t\tthread: response.posts[0].blurb.match(idFinder)[1],\n\t\t\t});\n\t\t}\n\t\treturn Promise.reject(new TranslatorError(\n\t\t\tTranslatorErrorCode.ValueNotFound, 'No connected thread found by querying Discourse.'\n\t\t));\n\t}\n\n\t/**\n\t * Converts a response into a the generic format.\n\t * @param _message   Not used, the initial message.\n\t * @param _response  Not used, the response provided by the service.\n\t * @returns          Promise that resolves to emit instructions.\n\t */\n\tprivate static convertUpdateThreadResponse(\n\t\t_message: TransmitInformation, _response: DiscourseResponse\n\t): Promise<UpdateThreadResponse> {\n\t\treturn Promise.resolve({});\n\t}\n\n\tprotected eventEquivalencies = {\n\t\tmessage: ['post_created'],\n\t};\n\tprotected emitConverters: EmitConverters = {\n\t\t[MessengerAction.CreateThread]: DiscourseTranslator.createThreadIntoEmit,\n\t\t[MessengerAction.CreateMessage]: DiscourseTranslator.createMessageIntoEmit,\n\t\t[MessengerAction.ReadConnection]: DiscourseTranslator.readConnectionIntoEmit,\n\t};\n\tprotected responseConverters: ResponseConverters = {\n\t\t[MessengerAction.ReadConnection]: DiscourseTranslator.convertReadConnectionResponse,\n\t\t[MessengerAction.UpdateTags]: DiscourseTranslator.convertUpdateThreadResponse,\n\t\t[MessengerAction.CreateMessage]: DiscourseTranslator.convertUpdateThreadResponse,\n\t};\n\tprivate hubs: DataHub[];\n\tprivate connectionDetails: DiscourseConstructor;\n\n\tconstructor(data: DiscourseConstructor, hubs: DataHub[]) {\n\t\tsuper();\n\t\tthis.hubs = hubs;\n\t\tthis.connectionDetails = data;\n\t\t// These converters require the injection of a couple of details from `this` instance.\n\t\tthis.emitConverters[MessengerAction.UpdateTags] = _.partial(DiscourseTranslator.updateTagsIntoEmit, data);\n\t\tthis.responseConverters[MessengerAction.CreateThread] =\n\t\t\t_.partial(DiscourseTranslator.convertCreateThreadResponse, data.instance);\n\t}\n\n\t/**\n\t * Promise to convert a provided service specific event into messenger's standard form.\n\t * @param event  Service specific event, straight out of the ServiceListener.\n\t * @returns      Promise that resolves to the standard form of the message.\n\t */\n\tpublic eventIntoMessage(event: ServiceScaffoldEvent): Promise<MessengerEvent> {\n\t\t// Encode once the common parts of a request\n\t\tconst getGeneric = {\n\t\t\tjson: true,\n\t\t\tmethod: 'GET',\n\t\t\tqs: {\n\t\t\t\tapi_key: this.connectionDetails.token,\n\t\t\t\tapi_username: this.connectionDetails.username,\n\t\t\t},\n\t\t\t// appended before execution\n\t\t\turi: `https://${this.connectionDetails.instance}`,\n\t\t};\n\t\t// Gather more complete details of the enqueued event\n\t\tconst getPost = _.cloneDeep(getGeneric);\n\t\tgetPost.uri += `/posts/${event.rawEvent.id}`;\n\t\tconst getTopic = _.cloneDeep(getGeneric);\n\t\tgetTopic.uri += `/t/${event.rawEvent.topic_id}`;\n\t\treturn Promise.props({\n\t\t\tpost: request(getPost),\n\t\t\ttopic: request(getTopic),\n\t\t})\n\t\t.then((details: {post: any, topic: any}) => {\n\t\t\t// Calculate metadata and resolve\n\t\t\tconst metadata = TranslatorScaffold.extractMetadata(details.post.raw, 'logo');\n\t\t\t// Generic has `-` at the end, Discourse has `_` at the beginning\n\t\t\tconst convertedUsername = /^_/.test(details.post.username)\n\t\t\t\t? `${details.post.username.replace(/^_/, '')}-`\n\t\t\t\t: details.post.username\n\t\t\t;\n\t\t\tconst cookedEvent: BasicMessageInformation = {\n\t\t\t\tdetails: {\n\t\t\t\t\tgenesis: metadata.genesis || event.source,\n\t\t\t\t\thandle: convertedUsername,\n\t\t\t\t\t// post_type 4 seems to correspond to whisper\n\t\t\t\t\thidden: details.post.post_type === 4,\n\t\t\t\t\tinternal: details.post.staff,\n\t\t\t\t\ttags: details.topic.tags,\n\t\t\t\t\ttext: metadata.content.trim(),\n\t\t\t\t\ttitle: details.topic.title,\n\t\t\t\t},\n\t\t\t\tsource: {\n\t\t\t\t\tservice: event.source,\n\t\t\t\t\t// These come in as integers, but should be strings\n\t\t\t\t\tflow: details.topic.category_id.toString(),\n\t\t\t\t\tmessage: details.post.id.toString(),\n\t\t\t\t\tthread: details.post.topic_id.toString(),\n\t\t\t\t\turl: getTopic.uri,\n\t\t\t\t\tusername: convertedUsername,\n\t\t\t\t},\n\t\t\t};\n\t\t\t// Yield the object in a form suitable for service scaffold.\n\t\t\treturn {\n\t\t\t\tcontext: `${event.source}.${event.cookedEvent.context}`,\n\t\t\t\ttype: this.eventIntoMessageType(event),\n\t\t\t\tcookedEvent,\n\t\t\t\trawEvent: event.rawEvent,\n\t\t\t\tsource: 'messenger',\n\t\t\t};\n\t\t});\n\t}\n\n\t/**\n\t * Promise to provide emitter construction details for a provided message.\n\t * @param message  Message information, used to retrieve username\n\t * @returns        Promise that resolves to the details required to construct an emitter.\n\t */\n\tpublic messageIntoEmitterConstructor(message: TransmitInformation): Promise<DiscourseConstructor> {\n\t\t// Go looking through all the data hubs we've been provided for a token.\n\t\tconst promises: Array<Promise<string>> = _.map(this.hubs, (hub) => {\n\t\t\treturn hub.fetchValue(message.target.username, 'discourse', 'token');\n\t\t});\n\t\t// Generic has `-` at the end, Discourse has `_` at the beginning\n\t\tconst convertedUsername = /-$/.test(message.target.username)\n\t\t\t? `_${message.target.username.replace(/-$/, '')}`\n\t\t\t: message.target.username\n\t\t;\n\t\treturn Promise.any(promises)\n\t\t.then((token) => {\n\t\t\t// Pass back details that may be used to connect.\n\t\t\treturn {\n\t\t\t\ttoken,\n\t\t\t\tusername: convertedUsername,\n\t\t\t\tinstance: this.connectionDetails.instance,\n\t\t\t\ttype: ServiceType.Emitter,\n\t\t\t};\n\t\t});\n\t}\n\n\t/**\n\t * Populate the listener constructor with details from the more generic constructor.\n\t * Provided since the connectionDetails might need to be parsed from JSON and the server details might be instantiated.\n\t * @param connectionDetails  Construction details for the service, probably 'inert', ie from JSON.\n\t * @param genericDetails     Details from the construction of the messenger.\n\t * @returns                  Connection details with the value merged in.\n\t */\n\tpublic mergeGenericDetails(\n\t\tconnectionDetails: DiscourseConstructor, genericDetails: MessengerConstructor\n\t): DiscourseConstructor {\n\t\tif (connectionDetails.server === undefined) {\n\t\t\tconnectionDetails.server = genericDetails.server;\n\t\t}\n\t\tif (connectionDetails.type === undefined) {\n\t\t\tconnectionDetails.type = genericDetails.type;\n\t\t}\n\t\treturn connectionDetails;\n\t}\n}\n\n/**\n * Builds a translator that will convert Discourse specific information to and from Messenger format.\n * @param data  Construction details for creating a Discourse session.\n * @param hubs  A list of places to search for extra information, eg token.\n * @returns     A translator, ready to interpret Discourse's communications.\n */\nexport function createTranslator(data: DiscourseConstructor, hubs: DataHub[]): Translator {\n\treturn new DiscourseTranslator(data, hubs);\n}\n"],"sourceRoot":"../../../../lib"}