{"version":3,"sources":["services/messenger/translators/front.ts"],"names":[],"mappings":"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","file":"front.js","sourcesContent":["/*\n Copyright 2016-2017 Resin.io\n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n you may not use this file except in compliance with the License.\n You may obtain a copy of the License at\n\n http://www.apache.org/licenses/LICENSE-2.0\n\n Unless required by applicable law or agreed to in writing, software\n distributed under the License is distributed on an \"AS IS\" BASIS,\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n See the License for the specific language governing permissions and\n limitations under the License.\n */\n\nimport * as Promise from 'bluebird';\nimport {\n\tCommentRequest, Conversation, ConversationComments,\n\tConversationInboxes, ConversationRequest, Conversations,\n\tFront, Message, MessageRequest,\n} from 'front-sdk';\nimport * as _ from 'lodash';\nimport * as request from 'request-promise';\nimport { FrontConstructor, FrontEmitInstructions, FrontResponse } from '../../front-types';\nimport {\n\tBasicMessageInformation, CreateThreadResponse, IdentifyThreadResponse,\n\tMessengerAction, MessengerConstructor, MessengerEvent, TransmitInformation,\n\tUpdateThreadResponse,\n} from '../../messenger-types';\nimport { ServiceScaffoldEvent } from '../../service-scaffold-types';\nimport { ServiceType } from '../../service-types';\nimport { Translator, TranslatorError } from './translator';\nimport { TranslatorScaffold } from './translator-scaffold';\nimport { EmitConverters, ResponseConverters, TranslatorErrorCode } from './translator-types';\n\n/**\n * Class to enable the translating between messenger standard forms and service\n * specific forms.\n */\nexport class FrontTranslator extends TranslatorScaffold implements Translator {\n\t/**\n\t * Promises to find the name of the person who authored a comment.\n\t * @param connectionDetails  Details required to connect to the Front instance.\n\t * @param message            Details of the message we care about.\n\t * @returns                  Promise that resolves to the name of the author.\n\t */\n\tprivate static fetchAuthorName(connectionDetails: FrontConstructor, message: Message): Promise<string> {\n\t\tif (message.author) {\n\t\t\treturn Promise.resolve(message.author.username.replace('_', '-'));\n\t\t}\n\t\tfor (const recipient of message.recipients) {\n\t\t\tif (recipient.role === 'from') {\n\t\t\t\tconst contactUrl = recipient._links.related.contact;\n\t\t\t\tif (contactUrl) {\n\t\t\t\t\treturn FrontTranslator.fetchContactName(connectionDetails, contactUrl);\n\t\t\t\t}\n\t\t\t\treturn Promise.resolve(recipient.handle.replace('_', '-'));\n\t\t\t}\n\t\t}\n\t\treturn Promise.resolve('Unknown Author');\n\t}\n\n\t/**\n\t * Promises to fetch the name from a provided contact (ctc_blah) url.\n\t * @param connectionDetails  Details required to connect to the Front instance.\n\t * @param contactUrl         Url of the contact to fetch.\n\t * @returns                  Promise that resolves to the name of the contact.\n\t */\n\tprivate static fetchContactName(connectionDetails: FrontConstructor, contactUrl: string): Promise<string> {\n\t\t// https://github.com/resin-io-modules/resin-procbots/issues/200\n\t\treturn request({\n\t\t\theaders: {\n\t\t\t\tauthorization: `Bearer ${connectionDetails.token}`,\n\t\t\t},\n\t\t\tjson: true,\n\t\t\tmethod: 'GET',\n\t\t\turl: contactUrl,\n\t\t})\n\t\t.then((contact) => {\n\t\t\treturn contact.name || contact.handles[0].handle;\n\t\t});\n\t}\n\n\t/**\n\t * Promises to fetch the subject of a conversation\n\t * @param connectionDetails  Details required to connect to the Front instance.\n\t * @param conversation       Details of the conversation we care about.\n\t * @returns                  Promise that resolves to the subject line of the conversation.\n\t */\n\tprivate static fetchSubject(\n\t\tconnectionDetails: FrontConstructor, conversation: Conversation\n\t): Promise<string> {\n\t\tif (conversation.subject) {\n\t\t\treturn Promise.resolve(conversation.subject);\n\t\t}\n\t\tconst contactUrl = conversation.recipient._links.related.contact;\n\t\tif (contactUrl) {\n\t\t\treturn FrontTranslator.fetchContactName(connectionDetails, contactUrl)\n\t\t\t.then((name: string) => {\n\t\t\t\treturn `Conversation with ${name}`;\n\t\t\t});\n\t\t}\n\t\treturn Promise.resolve(`Conversation ID ${conversation.id}`);\n\t}\n\n\t/**\n\t * Internal function to retrieve the ID for a particular username.\n\t * ... only needed because on the way into Front events use ID, but on their way out use username.\n\t * @param token     Token to use for request.\n\t * @param username  Username to search for.\n\t * @returns         Promise that resolves to the user ID.\n\t */\n\tprivate static fetchUserId(token: string, username: string): Promise<string|undefined> {\n\t\treturn request({\n\t\t\theaders: {\n\t\t\t\tauthorization: `Bearer ${token}`,\n\t\t\t},\n\t\t\tjson: true,\n\t\t\tmethod: 'GET',\n\t\t\turl: 'https://api2.frontapp.com/teammates',\n\t\t})\n\t\t.then((teammates) => {\n\t\t\tconst loweredUsername = username.toLowerCase();\n\t\t\tconst substitutedUsername = loweredUsername.replace('-', '_');\n\t\t\tconst teammate = _.find(teammates._results, (eachTeammate: { username: string, id: string }) => {\n\t\t\t\treturn eachTeammate.username.toLowerCase() === substitutedUsername;\n\t\t\t});\n\t\t\treturn teammate && teammate.id;\n\t\t});\n\t}\n\n\t/**\n\t * An internal function that converts a conversation subject into a conversation ID\n\t * ... only needed because the Front channel structure clashes with its comment endpoint.\n\t * (the one only knows about external or reference, the other only knows about ID)\n\t * @param session   Session to interrogate\n\t * @param subject   Subject line to search for.\n\t * @param delay     Increasing time between attempts, starts by default at 50ms.\n\t * @param maxDelay  A threshold that once the delay reaches this long we should give up.\n\t * @returns         Promise that resolves to the conversation ID.\n\t */\n\tprivate static findConversation = (\n\t\tsession: Front, subject: string, delay: number = 50, maxDelay: number = 60000\n\t): Promise<string> => {\n\t\treturn session.conversation.list()\n\t\t.then((conversations: Conversations) => {\n\t\t\tconst conversationsMatched = _.filter(conversations._results, (eachConversation: Conversation) => {\n\t\t\t\treturn eachConversation.subject === subject;\n\t\t\t});\n\t\t\tif (conversationsMatched.length > 0) {\n\t\t\t\treturn Promise.resolve(conversationsMatched[0].id);\n\t\t\t}\n\t\t\tif (delay > maxDelay) {\n\t\t\t\treturn Promise.reject(new TranslatorError(\n\t\t\t\t\tTranslatorErrorCode.WebServiceError, 'Tried loads of times to find the conversation.'\n\t\t\t\t));\n\t\t\t}\n\t\t\treturn Promise.delay(\n\t\t\t\tdelay,\n\t\t\t\tFrontTranslator.findConversation(session, subject, delay * (Math.random() + 1.5), maxDelay)\n\t\t\t);\n\t\t});\n\t}\n\n\t/**\n\t * Converts a provided message object into instructions to update tags.\n\t * @param message  object to analyse.\n\t * @returns        Promise that resolves to emit instructions.\n\t */\n\tprivate static updateTagsIntoEmit(message: TransmitInformation): Promise<FrontEmitInstructions> {\n\t\t// Check we have a thread.\n\t\tconst threadId = message.target.thread;\n\t\tif (!threadId) {\n\t\t\treturn Promise.reject(new TranslatorError(\n\t\t\t\tTranslatorErrorCode.IncompleteTransmitInformation, 'Cannot update tags without a thread.'\n\t\t\t));\n\t\t}\n\t\t// Check we have an array of tags.\n\t\tconst tags = message.details.tags;\n\t\tif (!_.isArray(tags)) {\n\t\t\treturn Promise.reject(new TranslatorError(\n\t\t\t\tTranslatorErrorCode.IncompleteTransmitInformation, 'Cannot update tags without a tags array.'\n\t\t\t));\n\t\t}\n\t\t// Bundle it for the session.\n\t\tconst updateTagsData: ConversationRequest.Update = {\n\t\t\tconversation_id: threadId,\n\t\t\ttags,\n\t\t};\n\t\treturn Promise.resolve({ method: ['conversation', 'update'], payload: updateTagsData });\n\t}\n\n\t/**\n\t * Converts a provided message object into instructions to create a thread.\n\t * @param connectionDetails  Details of the connection to find things like channels to use.\n\t * @param message            object to analyse.\n\t * @returns                  Promise that resolves to emit instructions.\n\t */\n\tprivate static createThreadIntoEmit(\n\t\tconnectionDetails: FrontConstructor, message: TransmitInformation\n\t): Promise<FrontEmitInstructions> {\n\t\t// Check we have a title.\n\t\tif (!message.details.title) {\n\t\t\treturn Promise.reject(new TranslatorError(\n\t\t\t\tTranslatorErrorCode.IncompleteTransmitInformation, 'Cannot create a thread without a title'\n\t\t\t));\n\t\t}\n\t\t// Check we have a way of mapping channels.\n\t\tconst channelMap = connectionDetails.channelPerInbox;\n\t\tif (!channelMap) {\n\t\t\treturn Promise.reject(new TranslatorError(\n\t\t\t\t\tTranslatorErrorCode.ConfigurationError,\n\t\t\t\t\t'Cannot translate Front threads without a channelPerInbox specified.'\n\t\t\t\t)\n\t\t\t);\n\t\t}\n\t\t// Gather the ID for the user.\n\t\treturn FrontTranslator.fetchUserId(connectionDetails.token, message.target.username)\n\t\t.then((userId) => {\n\t\t\t// Bundle for the session.\n\t\t\tconst createThreadData: MessageRequest.Send = {\n\t\t\t\tauthor_id: userId,\n\t\t\t\tbody: `${message.details.text}<hr />${TranslatorScaffold.stringifyMetadata(message, 'logo')}`,\n\t\t\t\tchannel_id: channelMap[message.target.flow],\n\t\t\t\toptions: {\n\t\t\t\t\tarchive: false,\n\t\t\t\t\ttags: message.details.tags,\n\t\t\t\t},\n\t\t\t\tsubject: message.details.title,\n\t\t\t\tto: [message.details.handle],\n\t\t\t};\n\t\t\treturn { method: ['message', 'send'], payload: createThreadData };\n\t\t});\n\t}\n\n\t/**\n\t * Converts a provided message object into instructions to create a message.\n\t * @param connectionDetails  Details of the connection to find things user ID.\n\t * @param message            object to analyse.\n\t * @returns                  Promise that resolves to emit instructions.\n\t */\n\tprivate static createMessageIntoEmit(\n\t\tconnectionDetails: FrontConstructor, message: TransmitInformation\n\t): Promise<FrontEmitInstructions> {\n\t\t// Check we have a thread.\n\t\tconst threadId = message.target.thread;\n\t\tif (!threadId) {\n\t\t\treturn Promise.reject(new TranslatorError(\n\t\t\t\tTranslatorErrorCode.IncompleteTransmitInformation, 'Cannot create a comment without a thread.'\n\t\t\t));\n\t\t}\n\t\t// Gather the user ID for the username.\n\t\treturn FrontTranslator.fetchUserId(connectionDetails.token, message.target.username)\n\t\t.then((userId: string) => {\n\t\t\t// Bundle a 'comment', which is private, for the session.\n\t\t\tif (message.details.hidden) {\n\t\t\t\tconst footer = TranslatorScaffold.stringifyMetadata(message, 'human');\n\t\t\t\tconst createCommentData: CommentRequest.Create = {\n\t\t\t\t\tauthor_id: userId,\n\t\t\t\t\tbody: `${message.details.text}\\n${footer}`,\n\t\t\t\t\tconversation_id: threadId,\n\t\t\t\t};\n\t\t\t\treturn {method: ['comment', 'create'], payload: createCommentData };\n\t\t\t}\n\t\t\t// Bundle a 'reply', which is public, for the session.\n\t\t\tconst footer = TranslatorScaffold.stringifyMetadata(message, 'logo');\n\t\t\tconst createMessageData: MessageRequest.Reply = {\n\t\t\t\tauthor_id: userId,\n\t\t\t\tbody: `${message.details.text}<hr />${footer}`,\n\t\t\t\tconversation_id: threadId,\n\t\t\t\toptions: {\n\t\t\t\t\tarchive: false,\n\t\t\t\t},\n\t\t\t\tsubject: message.details.title,\n\t\t\t\ttype: 'message',\n\t\t\t};\n\t\t\treturn {method: ['message', 'reply'], payload: createMessageData };\n\t\t});\n\t}\n\n\t/**\n\t * Converts a provided message object into instructions to read a thread for connections.\n\t * @param message            object to analyse.\n\t * @returns                  Promise that resolves to emit instructions.\n\t */\n\tprivate static readConnectionIntoEmit(message: TransmitInformation): Promise<FrontEmitInstructions> {\n\t\t// Check we have a thread.\n\t\tconst threadId = message.target.thread;\n\t\tif (!threadId) {\n\t\t\treturn Promise.reject(new TranslatorError(\n\t\t\t\tTranslatorErrorCode.IncompleteTransmitInformation, 'Cannot search for connections without a thread.'\n\t\t\t));\n\t\t}\n\t\t// Bundle it for the session.\n\t\tconst readConnectionData: ConversationRequest.ListComments = {\n\t\t\tconversation_id: threadId,\n\t\t};\n\t\treturn Promise.resolve({ method: ['conversation', 'listComments'], payload: readConnectionData });\n\t}\n\n\t/**\n\t * Converts a response into the generic format.\n\t * @param message   The initial message that prompted this action.\n\t * @param response  The response from the SDK.\n\t * @returns         Promise that resolve to the thread details.\n\t */\n\tprivate static convertReadConnectionResponse(\n\t\tmessage: TransmitInformation, response: FrontResponse\n\t): Promise<IdentifyThreadResponse> {\n\t\t// Filter the response down to actually matching items\n\t\tconst idFinder = new RegExp(`\\\\[${message.source.service} thread ([\\\\w\\\\d-+\\\\/=]+)`);\n\t\tconst matches = _.filter(\n\t\t\t(response as ConversationComments)._results,\n\t\t\t(comment) => {\n\t\t\t\treturn idFinder.test(comment.body);\n\t\t\t}\n\t\t);\n\t\t// Let upstream know what we've found.\n\t\tif (matches.length > 0) {\n\t\t\tconst thread = matches[matches.length - 1].body.match(idFinder);\n\t\t\tif (thread) {\n\t\t\t\treturn Promise.resolve({\n\t\t\t\t\tthread: thread[1],\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t\treturn Promise.reject(new TranslatorError(\n\t\t\tTranslatorErrorCode.ValueNotFound, 'No connected thread found by querying Front.'\n\t\t));\n\t}\n\n\t/**\n\t * Converts a response into the generic format.\n\t * @param _message   Not used, the initial message that prompted this action.\n\t * @param _response  Not used, the response from the SDK.\n\t * @returns          Promise that resolve to the thread details.\n\t */\n\tprivate static convertUpdateThreadResponse(\n\t\t_message: TransmitInformation, _response: FrontResponse\n\t): Promise<UpdateThreadResponse> {\n\t\treturn Promise.resolve({});\n\t}\n\n\t/**\n\t * Converts a response into the generic format.\n\t * @param session    Session to query for conversation details.\n\t * @param message    The initial message that prompted this action.\n\t * @param _response  The response from the SDK.\n\t * @returns          Promise that resolve to the thread details.\n\t */\n\tprivate static convertCreateThreadResponse(\n\t\tsession: Front, message: TransmitInformation, _response: FrontResponse\n\t): Promise<CreateThreadResponse> {\n\t\t// The creation of a conversation returns a conversation_reference which is useless.\n\t\t// It bears no relation to anything understood by any other part of Front.\n\t\t// So we go diving through the recent conversations for a matching subject line.\n\t\treturn FrontTranslator.findConversation(session, message.details.title)\n\t\t.then((conversation: string) => {\n\t\t\treturn Promise.resolve({\n\t\t\t\tthread: conversation,\n\t\t\t\turl: `https://app.frontapp.com/open/${conversation}`,\n\t\t\t});\n\t\t});\n\t}\n\n\tprotected eventEquivalencies = {\n\t\tmessage: ['comment', 'out_reply', 'inbound', 'mention'],\n\t};\n\tprotected emitConverters: EmitConverters = {\n\t\t[MessengerAction.ReadConnection]: FrontTranslator.readConnectionIntoEmit,\n\t\t[MessengerAction.UpdateTags]: FrontTranslator.updateTagsIntoEmit,\n\t};\n\tprotected responseConverters: ResponseConverters = {\n\t\t[MessengerAction.UpdateTags]: FrontTranslator.convertUpdateThreadResponse,\n\t\t[MessengerAction.CreateMessage]: FrontTranslator.convertUpdateThreadResponse,\n\t\t[MessengerAction.ReadConnection]: FrontTranslator.convertReadConnectionResponse,\n\t};\n\n\tprivate session: Front;\n\tprivate connectionDetails: FrontConstructor;\n\n\tconstructor(data: FrontConstructor) {\n\t\tsuper();\n\t\tthis.connectionDetails = data;\n\t\tthis.session = new Front(data.token);\n\t\tthis.responseConverters[MessengerAction.CreateThread] =\n\t\t\t_.partial(FrontTranslator.convertCreateThreadResponse, this.session);\n\t\tthis.emitConverters[MessengerAction.CreateMessage] =\n\t\t\t_.partial(FrontTranslator.createMessageIntoEmit, this.connectionDetails);\n\t\tthis.emitConverters[MessengerAction.CreateThread] =\n\t\t\t_.partial(FrontTranslator.createThreadIntoEmit, this.connectionDetails);\n\t}\n\n\t/**\n\t * Promise to convert a provided service specific event into messenger's standard form.\n\t * @param event  Service specific event, straight out of the ServiceListener.\n\t * @returns      Promise that resolves to the standard form of the message.\n\t */\n\tpublic eventIntoMessage(event: ServiceScaffoldEvent): Promise<MessengerEvent> {\n\t\t// Gather details of all the inboxes and the complete event.\n\t\treturn Promise.props({\n\t\t\tinboxes: this.session.conversation.listInboxes({conversation_id: event.rawEvent.conversation.id}),\n\t\t\tevent: request({\n\t\t\t\theaders: {\n\t\t\t\t\tauthorization: `Bearer ${this.connectionDetails.token}`,\n\t\t\t\t},\n\t\t\t\tjson: true,\n\t\t\t\tmethod: 'GET',\n\t\t\t\turl: `https://api2.frontapp.com/events/${event.rawEvent.id}`,\n\t\t\t}),\n\t\t})\n\t\t.then((firstPhase: { inboxes: ConversationInboxes, event: any}) => {\n\t\t\treturn Promise.props({\n\t\t\t\tsubject: FrontTranslator.fetchSubject(this.connectionDetails, firstPhase.event.conversation),\n\t\t\t\tauthor: FrontTranslator.fetchAuthorName(this.connectionDetails, firstPhase.event.target.data),\n\t\t\t})\n\t\t\t.then((secondPhase: { subject: string, author: string }) => {\n\t\t\t\treturn {\n\t\t\t\t\tinboxes: firstPhase.inboxes,\n\t\t\t\t\tevent: firstPhase.event,\n\t\t\t\t\tsubject: secondPhase.subject,\n\t\t\t\t\tauthor: secondPhase.author,\n\t\t\t\t};\n\t\t\t});\n\t\t})\n\t\t.then((details: { inboxes: ConversationInboxes, event: any, subject: string, author: string }) => {\n\t\t\t// Extract some details from the event.\n\t\t\tconst message = details.event.target.data;\n\t\t\tconst metadataFormat = details.event.type === 'comment' ? 'human' : 'logo';\n\t\t\tconst metadata = TranslatorScaffold.extractMetadata(message.body, metadataFormat);\n\t\t\tconst tags = _.map(details.event.conversation.tags, (tag: {name: string}) => {\n\t\t\t\treturn tag.name;\n\t\t\t});\n\t\t\t// Bundle it in service scaffold form and resolve.\n\t\t\tconst cookedEvent: BasicMessageInformation = {\n\t\t\t\tdetails: {\n\t\t\t\t\tgenesis: metadata.genesis || event.source,\n\t\t\t\t\thandle: details.author,\n\t\t\t\t\thidden: _.includes(['comment', 'mention'], details.event.type),\n\t\t\t\t\tinternal: (message.author !== null) && /^tea_/.test(message.author.id),\n\t\t\t\t\ttags,\n\t\t\t\t\ttext: message.text || metadata.content,\n\t\t\t\t\ttitle: details.subject,\n\t\t\t\t},\n\t\t\t\tsource: {\n\t\t\t\t\tservice: event.source,\n\t\t\t\t\tmessage: message.id,\n\t\t\t\t\tflow: details.inboxes._results[0].id,\n\t\t\t\t\tthread: details.event.conversation.id,\n\t\t\t\t\turl: `https://app.frontapp.com/open/${details.event.conversation.id}`,\n\t\t\t\t\tusername: details.author,\n\t\t\t\t},\n\t\t\t};\n\t\t\treturn {\n\t\t\t\tcontext: `${event.source}.${event.cookedEvent.context}`,\n\t\t\t\ttype: this.eventIntoMessageType(event),\n\t\t\t\tcookedEvent,\n\t\t\t\trawEvent: event.rawEvent,\n\t\t\t\tsource: event.source,\n\t\t\t};\n\t\t});\n\t}\n\n\t/**\n\t * Promise to provide emitter construction details for a provided message.\n\t * @param _message  Message information, not used.\n\t * @returns         Promise that resolves to the details required to construct an emitter.\n\t */\n\tpublic messageIntoEmitterConstructor(_message: TransmitInformation): Promise<FrontConstructor> {\n\t\treturn Promise.resolve({\n\t\t\ttoken: this.connectionDetails.token,\n\t\t\ttype: ServiceType.Emitter,\n\t\t});\n\t}\n\n\t/**\n\t * Populate the listener constructor with details from the more generic constructor.\n\t * Provided since the connectionDetails might need to be parsed from JSON and the server details might be instantiated.\n\t * @param connectionDetails  Construction details for the service, probably 'inert', ie from JSON.\n\t * @param genericDetails     Details from the construction of the messenger.\n\t * @returns                  Connection details with the value merged in.\n\t */\n\tpublic mergeGenericDetails(\n\t\tconnectionDetails: FrontConstructor, genericDetails: MessengerConstructor\n\t): FrontConstructor {\n\t\tif (connectionDetails.server === undefined) {\n\t\t\tconnectionDetails.server = genericDetails.server;\n\t\t}\n\t\tconnectionDetails.server = connectionDetails.server !== undefined ? connectionDetails.server : genericDetails.server;\n\t\tif (connectionDetails.type === undefined) {\n\t\t\tconnectionDetails.type = genericDetails.type;\n\t\t}\n\t\treturn connectionDetails;\n\t}\n}\n\n/**\n * Builds a translator that will convert Front specific information to and from Messenger format.\n * @param data  Construction details for creating a Front session.\n * @returns     A translator, ready to interpret Front's babbling\n */\nexport function createTranslator(data: FrontConstructor): Translator {\n\treturn new FrontTranslator(data);\n}\n"],"sourceRoot":"../../../../lib"}