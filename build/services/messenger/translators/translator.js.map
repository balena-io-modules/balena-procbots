{"version":3,"sources":["services/messenger/translators/translator.ts"],"names":[],"mappings":"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","file":"translator.js","sourcesContent":["/*\n Copyright 2016-2017 Resin.io\n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n you may not use this file except in compliance with the License.\n You may obtain a copy of the License at\n\n http://www.apache.org/licenses/LICENSE-2.0\n\n Unless required by applicable law or agreed to in writing, software\n distributed under the License is distributed on an \"AS IS\" BASIS,\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n See the License for the specific language governing permissions and\n limitations under the License.\n */\n\nimport * as Promise from 'bluebird';\nimport * as _ from 'lodash';\nimport {\n\tMessageEvent, MessageInformation, MessageResponseData,\n\tMetadata, TransmitInformation,\n} from '../../messenger-types';\nimport { ServiceEvent } from '../../service-types';\nimport { DataHub } from '../datahubs/datahub';\n\nexport interface PublicityIndicator {\n\temoji: string;\n\tword: string;\n\tchar: string;\n}\n\nexport interface Translator {\n\teventIntoMessageType(event: MessageEvent): string;\n\tmessageTypeIntoEventTypes(type: string): string[];\n\tgetAllEventTypes(): string[];\n\n\teventIntoMessage(event: ServiceEvent): Promise<MessageEvent>;\n\n\tmessageIntoConnectionDetails(message: TransmitInformation): Promise<object>;\n\n\tmessageIntoEmitDetails(message: TransmitInformation): {method: string[], payload: any};\n\n\tresponseIntoMessageResponse(payload: TransmitInformation, response: any): MessageResponseData;\n}\n\n/**\n * Encode the metadata of an event into a string to embed in the message.\n * @param data    Event to gather details from.\n * @param format  Optional, markdown or plaintext, defaults to markdown.\n * @returns       Text with data embedded.\n */\nexport function stringifyMetadata(data: MessageInformation, format: string): string {\n\tconst indicators = data.details.hidden ? getIndicatorArrays().hidden : getIndicatorArrays().shown;\n\tswitch (format) {\n\t\tcase 'human':\n\t\t\treturn `${indicators.word} from ${data.source.service}`;\n\t\tcase 'emoji':\n\t\t\treturn `[${indicators.emoji}](${data.source.service})`;\n\t\tcase 'img':\n\t\t\tconst baseUrl = process.env.MESSAGE_CONVERTER_IMG_BASE_URL;\n\t\t\tconst queryString = `?hidden=${indicators.word}&source=${data.source.service}`;\n\t\t\treturn `<img src=\"${baseUrl}${queryString}\" height=\"18\" \\/>`;\n\t\tdefault:\n\t\t\tthrow new Error(`${format} format not recognised`);\n\t}\n}\n\n/**\n * Given a basic string this will extract a more rich context for the event, if embedded.\n * @param message  Basic string that may contain metadata.\n * @param format   Format of the metadata encoding.\n * @returns        Object of content, genesis and hidden.\n */\nexport function extractMetadata(message: string, format: string): Metadata {\n\tconst indicators = getIndicatorArrays();\n\tconst wordCapture = `(${indicators.hidden.word}|${indicators.shown.word})`;\n\tconst beginsLine = `(?:^|\\\\r|\\\\n)(?:\\\\s*)`;\n\tswitch (format.toLowerCase()) {\n\t\tcase 'char':\n\t\t\tconst charCapture = `(${_.escapeRegExp(indicators.hidden.char)}|${_.escapeRegExp(indicators.shown.char)})`;\n\t\t\tconst charRegex = new RegExp(`${beginsLine}${charCapture}`);\n\t\t\treturn metadataByRegex(message, charRegex);\n\t\tcase 'human':\n\t\t\tconst parensRegex = new RegExp(`${beginsLine}\\\\(${wordCapture} from (\\\\w*)\\\\)`, 'i');\n\t\t\treturn metadataByRegex(message, parensRegex);\n\t\tcase 'emoji':\n\t\t\tconst emojiCapture = `(${indicators.hidden.emoji}|${indicators.shown.emoji})`;\n\t\t\tconst emojiRegex = new RegExp(`${beginsLine}\\\\[${emojiCapture}\\\\]\\\\((\\\\w*)\\\\)`, 'i');\n\t\t\treturn metadataByRegex(message, emojiRegex);\n\t\tcase 'img':\n\t\t\tconst baseUrl = _.escapeRegExp(process.env.MESSAGE_CONVERTER_IMG_BASE_URL);\n\t\t\tconst querystring = `\\\\?hidden=${wordCapture}&source=(\\\\w*)`;\n\t\t\tconst imgRegex = new RegExp(`${beginsLine}<img src=\"${baseUrl}${querystring}\" height=\"18\" \\/>`, 'i');\n\t\t\treturn metadataByRegex(message, imgRegex);\n\t\tdefault:\n\t\t\tthrow new Error(`${format} format not recognised`);\n\t}\n\n}\n\n/**\n * Generic handler for stock metadata regex, must match the syntax of:\n * first match is the indicator of visibility, second match is message source, remove the whole match for content.\n * @param message String to evaluate into metadata.\n * @param regex   Criteria for extraction.\n * @returns       Object of the metadata, decoded.\n */\nfunction metadataByRegex(message: string, regex: RegExp): Metadata {\n\tconst indicators = getIndicatorArrays();\n\tconst metadata = message.match(regex);\n\tif (metadata) {\n\t\treturn {\n\t\t\tcontent: message.replace(regex, '').trim(),\n\t\t\tgenesis: metadata[2] || null,\n\t\t\thidden: !_.includes(_.values(indicators.shown), metadata[1]),\n\t\t};\n\t}\n\treturn {\n\t\tcontent: message.trim(),\n\t\tgenesis: null,\n\t\thidden: true,\n\t};\n}\n\n/**\n * Retrieve from the environment array of strings to use as indicators of visibility.\n * @returns  Object of arrays of indicators, shown and hidden.\n */\nfunction getIndicatorArrays(): { 'shown': PublicityIndicator, 'hidden': PublicityIndicator } {\n\tlet shown;\n\tlet hidden;\n\ttry {\n\t\t// Retrieve publicity indicators from the environment\n\t\tshown = JSON.parse(process.env.MESSAGE_TRANSLATOR_PUBLICITY_INDICATORS_OBJECT);\n\t\thidden = JSON.parse(process.env.MESSAGE_TRANSLATOR_PRIVACY_INDICATORS_OBJECT);\n\t} catch (error) {\n\t\tthrow new Error('Message convertor environment variables not set correctly');\n\t}\n\tif (shown.length === 0 || hidden.length === 0) {\n\t\tthrow new Error('Message convertor environment variables not set correctly');\n\t}\n\treturn { hidden, shown };\n}\n\n/**\n * Retrieves and loads a Translator by name.\n * @param name  The name of the Translator to load.\n * @param data  The constructor object for the createTranslator method.\n * @param hubs  The sources for any extra information required.\n * @return      The newly instantiated Translator.\n */\nexport function createTranslator(name: string, data: any, hubs: DataHub[]): Translator {\n\treturn require(`./${name}`).createTranslator(data, hubs);\n}\n"],"sourceRoot":"../../../../lib"}