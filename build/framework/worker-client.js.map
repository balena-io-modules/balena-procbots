{"version":3,"sources":["framework/worker-client.ts"],"names":[],"mappings":";;AAuBA;IAAA;QACW,YAAO,GAAiB,IAAI,GAAG,EAAgB,CAAC;QAsChD,iBAAY,GAAG,CAAC,OAAU;YACnC,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;QAC9B,CAAC,CAAA;IACF,CAAC;IA3BU,UAAU,CAAC,KAAkB;QACtC,IAAI,KAA4B,CAAC;QAEjC,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC,YAAY,CAAC,CAAC,CAAC;YACzB,MAAM,CAAC;QACR,CAAC;QAGD,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC;YACjB,MAAM,CAAC;QACR,CAAC;QAID,KAAK,GAAG,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;QAG9B,KAAK,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;IACvB,CAAC;CASD;AA1CD,oCA0CC","file":"worker-client.js","sourcesContent":["/*\nCopyright 2016-2017 Resin.io\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n   http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\nimport { Worker, WorkerEvent, WorkerMap } from './worker';\n\n/**\n * The WorkerClient class is extended by Service implementations to allow queueing of\n * incoming events.\n * It allows the use of generic contexts, to suit the service using it.\n */\nexport class WorkerClient<T> {\n\tprotected workers: WorkerMap<T> = new Map<T, Worker<T>>();\n\n\t/**\n\t * This generic method must be implemented in children extended from a ProcBot.\n\t * It defines the context type used for Workers.\n\t * @param event  The WorkerEvent to retrieve a valid Worker for.\n\t * @return       Returns a Worker that should be used to process the event.\n\t */\n\tprotected getWorker: (event: WorkerEvent) => Worker<T>;\n\n\t/**\n\t * Queue an event ready for running in a child.\n\t * @param event  The WorkerEvent to add to the queue for processing.\n\t */\n\tprotected queueEvent(event: WorkerEvent): void {\n\t\tlet entry: Worker<T> | undefined;\n\n\t\tif (!event.workerMethod) {\n\t\t\treturn;\n\t\t}\n\n\t\t// If there's no data, we can't actually do anything with this.\n\t\tif (!event.data) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Retrieve any worker with a matching context, or create a new one.\n\t\t// Bot implementation specific.\n\t\tentry = this.getWorker(event);\n\n\t\t// Now add the event to the found/created repo worker.\n\t\tentry.addEvent(event);\n\t}\n\n\t/**\n\t * Remove a worker from a context post-action.\n\t * @param context  The context in which the Worker must be removed.\n\t */\n\tprotected removeWorker = (context: T): void => {\n\t\tthis.workers.delete(context);\n\t}\n}\n"],"sourceRoot":"../../lib"}