{"version":3,"sources":["framework/worker.ts"],"names":[],"mappings":";;AAqCC,CAAC;AAaF;IAaC,YAAY,OAAU,EAAE,MAAuB;QATvC,UAAK,GAAkB,EAAE,CAAC;QAUjC,IAAI,CAAC,QAAQ,GAAG,OAAO,CAAC;QACxB,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;IACtB,CAAC;IAMD,IAAI,OAAO;QACV,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC;IACtB,CAAC;IAMM,QAAQ,CAAC,KAAkB;QACjC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QAEvB,EAAE,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM,KAAK,CAAC,CAAC,CAAC,CAAC;YAC7B,IAAI,CAAC,SAAS,EAAE,CAAC;QAClB,CAAC;IACF,CAAC;IAMO,SAAS;QAEhB,MAAM,KAAK,GAAgB,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;QAGzC,KAAK,CAAC,YAAY,CAAC,KAAK,CAAC,IAAI,CAAC;aAC7B,IAAI,CAAC,GAAG,EAAE;YACV,IAAI,CAAC,KAAK,CAAC,KAAK,EAAE,CAAC;YACnB,EAAE,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;gBAC3B,IAAI,CAAC,SAAS,EAAE,CAAC;YAClB,CAAC;YAAC,IAAI,CAAC,CAAC;gBAEP,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;YAC3B,CAAC;QACF,CAAC,CAAC,CAAC;IACJ,CAAC;CACD;AA1DD,wBA0DC","file":"worker.js","sourcesContent":["/*\nCopyright 2016-2017 Resin.io\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n   http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\nimport * as Promise from 'bluebird';\nimport { ServiceEvent } from '../services/service-types';\n\n/**\n * A method called by the Worker class to process an event.\n * @param data\tThe ServiceEvent to process.\n */\nexport type WorkerMethod = (data: ServiceEvent) => Promise<void>;\n\n/**\n * Remove a worker from a context.\n * @param context\tThe context in which the Worker should be removed.\n */\nexport type WorkerRemove<T> = (context: T) => void;\n\n/** An event that has fired and needs to be processed. */\nexport interface WorkerEvent {\n\t/** The data arising from the event. */\n\tdata: ServiceEvent;\n\t/** The WorkerMethod to use to process the event. */\n\tworkerMethod: WorkerMethod;\n};\n\n/** Map linking contexts to Worker instances. */\nexport type WorkerMap<T> = Map<T, Worker<T>>;\n\n/**\n * The Worker class is responsible for the execution of scheduling tasks based on events.\n * Each Worker instance is bound to a context. This context could be, for example, a\n * unique Github repository, or a directory in a file system, a specific customer service\n * in a set, etc. It is also generic, and can therefore be of any type.\n * When WorkerEvents are added to an empty queue, they are processed for being worked on\n * in the next tick of event loop.\n */\nexport class Worker<T> {\n\t/** Holds the context for the Worker. */\n\tprivate _context: T;\n\t/** Holds the queue of events to work on. */\n\tprivate queue: WorkerEvent[] = [];\n\t/** Method to call when a Worker is to be removed. */\n\tprivate onDone: WorkerRemove<T>;\n\n\t/**\n\t * Creates the Worker class, specifying a context and the parent Map.\n\t * @param context  The context to use for hashing.\n\t * @param onDone   The method to use to remove a Worker post-event processing.\n\t */\n\tconstructor(context: T, onDone: WorkerRemove<T>) {\n\t\tthis._context = context;\n\t\tthis.onDone = onDone;\n\t}\n\n\t/**\n\t * Retrieve the context for the Worker.\n\t * @return The context for the Worker.\n\t */\n\tget context(): T {\n\t\treturn this._context;\n\t}\n\n\t/**\n\t * Add a new event to the Worker's event queue.\n\t * @param worker  The event to add to the queue.\n\t */\n\tpublic addEvent(event: WorkerEvent): void {\n\t\tthis.queue.push(event);\n\t\t// If this is a new worker, ensure it operates.\n\t\tif (this.queue.length === 1) {\n\t\t\tthis.runWorker();\n\t\t}\n\t}\n\n\t/**\n\t * Runs the next worker in the queue, before deleting its entry. Should more entries\n\t * exist it then runs those.\n\t */\n\tprivate runWorker(): void {\n\t\t// Get the next thing from the queue.\n\t\tconst entry = <WorkerEvent>this.queue[0];\n\n\t\t// Run worker, proceed to next worker.\n\t\tentry.workerMethod(entry.data)\n\t\t.then(() => {\n\t\t\tthis.queue.shift();\n\t\t\tif (this.queue.length > 0) {\n\t\t\t\tthis.runWorker();\n\t\t\t} else {\n\t\t\t\t// Unlink ourselves from our parent list.\n\t\t\t\tthis.onDone(this.context);\n\t\t\t}\n\t\t});\n\t}\n}\n"],"sourceRoot":"../../lib"}