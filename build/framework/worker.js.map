{"version":3,"sources":["framework/worker.ts"],"names":[],"mappings":";;AA8CC,CAAC;AAoBF;IAuBI,YAAY,OAAU,EAAE,MAAoB;QATpC,UAAK,GAAkB,EAAE,CAAC;QAU9B,IAAI,CAAC,QAAQ,GAAG,OAAO,CAAC;QACxB,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;IACzB,CAAC;IAMD,IAAI,OAAO;QACP,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC;IACzB,CAAC;IAMM,QAAQ,CAAC,KAAkB;QAC9B,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QAEvB,EAAE,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM,KAAK,CAAC,CAAC,CAAC,CAAC;YAC1B,IAAI,CAAC,SAAS,EAAE,CAAC;QACrB,CAAC;IACL,CAAC;IAMO,SAAS;QAEb,MAAM,KAAK,GAAgB,IAAI,CAAC,KAAK,CAAC,KAAK,EAAE,CAAC;QAC9C,MAAM,IAAI,GAAS,IAAI,CAAC;QAGxB,KAAK,CAAC,YAAY,CAAC,KAAK,CAAC,IAAI,CAAC;aAC7B,IAAI,CAAC;YACF,EAAE,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;gBACxB,OAAO,CAAC,QAAQ,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;YACrC,CAAC;YAAC,IAAI,CAAC,CAAC;gBAEJ,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;YAC9B,CAAC;QACL,CAAC,CAAC,CAAC;IACP,CAAC;CACJ;AApED,wBAoEC","file":"worker.js","sourcesContent":["/*\nCopyright 2016-2017 Resin.io\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n   http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\nimport * as Promise from 'bluebird';\nimport { ServiceEvent } from '../services/service-types';\n\n// Worker ---------------------------------------------------------------------\n\n// Standard worker method type that all other bots must implement.\n/**\n * A method called by the Worker class to process an event.\n * @typedef {function} WorkerMethod\n * @param {string} - The event sent.\n * @param {T} - Generic type data.\n * @param {PromiseLike<void>} - A Promise resolving once processing is complete.\n */\nexport type WorkerMethod = (data: ServiceEvent) => Promise<void>;\n\n// Remove a worker from a context.\nexport type WorkerRemove = <T>(context: T) => void;\n\n// An event passed from a derived Bot, detailing the event it wishes to work on,\n// the data to work on and the method to use for that data.\n/**\n * An event that has fired and needs to be processed.\n * @typedef {Object} ProcBot.WorkerEvent\n * @property {string} event - A string denoting the event; context dependent.\n * @property {any} data - The data arising from the event.\n * @property {WorkerMethod} - The method to call that will process the event.\n */\nexport interface WorkerEvent {\n    data: ServiceEvent;\n    workerMethod: WorkerMethod;\n};\n\n/**\n * A map linking contexts to Worker instances.\n * @typedef {Object} ProcBot.WorkerMap\n * @property {generic} - A generic context for the Worker.\n * @property {Worker}\n */\nexport type WorkerMap<T> = Map<T, Worker<T>>;\n\n/**\n * The Worker class is responsible for the execution of scheduling tasks based on events.\n * @class ProcBot.Worker\n * @classdesc\n * Each Worker instance is bound to a context. This context could be, for example, a\n * unique Github repository, or a directory in a file system, a specific customer service\n * in a set, etc. It is also generic, and can therefore be of any type.\n * When WorkerEvents are added to an empty queue, they are processed for being worked on\n * in the next tick of event loop.\n */\nexport class Worker<T> {\n    /**\n     * Holds the context for the Worker.\n     * @member Worker._context\n     * @private\n     * @type {generic}\n     */\n    private _context: T;\n    /**\n     * Holds the queue of events to work on.\n     * @member Worker.queue\n     * @private\n     * @type {ProcBot.WorkerEvent[]}\n     */\n    private queue: WorkerEvent[] = [];\n\n    private onDone: WorkerRemove;\n\n    /**\n     * Creates the Worker class, specifying a context and the parent Map.\n     * @param {generic} context - The context to use for hashing.\n     * @param {ProcBot.WorkerMap} parentMap - The parent Map containing all Workers.\n     */\n    constructor(context: T, onDone: WorkerRemove) {\n        this._context = context;\n        this.onDone = onDone;\n    }\n\n    /**\n     * Retrieve the context for the Worker.\n     * @return {generic} - The context.\n     */\n    get context(): T {\n        return this._context;\n    }\n\n    /**\n     * Add a new event to the Worker's event queue.\n     * @param {ProcBot.WorkerEvent} worker - The event to add to the queue.\n     */\n    public addEvent(event: WorkerEvent): void {\n        this.queue.push(event);\n        // If this is a new worker, ensure it operates.\n        if (this.queue.length === 1) {\n            this.runWorker();\n        }\n    }\n\n    /**\n     * Runs the next worker in the queue, before deleting its entry. Should more entries\n     * exist it then runs those.\n     */\n    private runWorker(): void {\n        // Get the next thing from the queue.\n        const entry = <WorkerEvent>this.queue.shift();\n        const self: this = this;\n\n        // Run worker, proceed to next worker.\n        entry.workerMethod(entry.data)\n        .then(() => {\n            if (this.queue.length > 0) {\n                process.nextTick(this.runWorker);\n            } else {\n                // Unlink ourselves from our parent list.\n                self.onDone(self.context);\n            }\n        });\n    }\n}\n"],"sourceRoot":"../../lib"}