{"version":3,"sources":["framework/procbot.ts"],"names":[],"mappings":";;AAgBA,oCAAoC;AACpC,8CAA8C;AAC9C,yBAAyB;AACzB,gCAAgC;AAChC,4BAA4B;AAG5B,4CAAmD;AAEnD,MAAM,UAAU,GAAG,OAAO,CAAC,SAAS,CAAC,EAAE,CAAC,QAAQ,CAAC,CAAC;AAClD,MAAM,IAAI,GAAoD,OAAO,CAAC,SAAS,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC;AAOnG;IAOI,YAAY,IAAI,GAAG,SAAS;QALlB,WAAM,GAAG,IAAI,eAAM,EAAE,CAAC;QACxB,aAAQ,GAAqB,EAAE,CAAC;QAChC,cAAS,GAAsB,EAAE,CAAC;QAItC,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC;IACzB,CAAC;IAEM,cAAc;QACjB,EAAE,CAAC,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC;YACnB,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;QAC7C,CAAC;QAED,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,IAAI,CAAC,CAAC,OAAe;YACxC,IAAI,CAAC,WAAW,GAAG,OAAO,CAAC,IAAI,EAAE,CAAC;YAClC,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC;QAC5B,CAAC,CAAC,CAAC;IACP,CAAC;IAGS,oBAAoB,CAAC,UAAkB;QAC7C,MAAM,MAAM,GAAyB,IAAI,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAC;QAE/D,EAAE,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC;YACV,MAAM,CAAC;QACX,CAAC;QAGD,MAAM,cAAc,GAAG,CAAC,CAAC,MAAM,IAAI,EAAE,CAAC,CAAC,OAAO,IAAI,EAAE,CAAC,CAAC,eAAe,CAAC;QACtE,EAAE,CAAC,CAAC,cAAc,IAAI,OAAO,CAAC,GAAG,CAAC,mBAAmB,CAAC,CAAC,CAAC;YACpD,EAAE,CAAC,CAAC,OAAO,CAAC,GAAG,CAAC,mBAAmB,GAAG,cAAc,CAAC,CAAC,CAAC;gBACnD,MAAM,IAAI,KAAK,CAAC,+EAA+E,CAAC,CAAC;YACrG,CAAC;QACL,CAAC;QAED,MAAM,CAAC,MAAM,CAAC;IAClB,CAAC;IAKS,qBAAqB,CAAC,MAAc,EAAE,QAAqC;QAIjF,IAAI,eAA6B,CAAC;QAClC,EAAE,CAAC,CAAC,MAAM,KAAK,IAAI,CAAC,CAAC,CAAC;YAClB,eAAe,GAAG,UAAU,CAAS,QAAQ,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;QACpE,CAAC;QAAC,IAAI,CAAC,CAAC;YACJ,eAAe,GAAG,IAAI,CAAC,iBAAiB,CAAC,MAAM,EAAsB,QAAQ,CAAC,CAAC;QACnF,CAAC;QACD,MAAM,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC,QAAQ;YACjC,EAAE,CAAC,CAAC,MAAM,KAAK,IAAI,CAAC,CAAC,CAAC;gBAClB,MAAM,CAAC,IAAI,CAAC,oBAAoB,CAAC,QAAQ,CAAC,CAAC;YAC/C,CAAC;YAED,MAAM,CAAC,QAAQ,CAAC;QACpB,CAAC,CAAC,CAAC,KAAK,CAAC;YACL,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,iBAAQ,CAAC,IAAI,EAAE,0BAA0B,CAAC,CAAC;QAC/D,CAAC,CAAC,CAAC;IACP,CAAC;IAIS,kBAAkB,CAAC,IAAY,EAAE,IAAU;QACjD,MAAM,OAAO,GAAG,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;QACtC,IAAI,QAAQ,CAAC;QAEb,EAAE,CAAC,CAAC,OAAO,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,CAAE,aAAa,EAAE,IAAI,CAAE,CAAC,CAAC,CAAC,CAAC;YAC9D,QAAQ,GAAG,OAAO,CAAC,qBAAqB,CAAC,IAAI,CAAC,CAAC;YAC/C,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;QAClC,CAAC;QAED,MAAM,CAAC,QAAQ,CAAC;IACpB,CAAC;IAIS,iBAAiB,CAAC,IAAY,EAAE,IAAU;QAChD,MAAM,OAAO,GAAG,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;QACtC,IAAI,OAAO,CAAC;QAEZ,EAAE,CAAC,CAAC,OAAO,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAE,aAAa,EAAE,IAAI,CAAE,CAAC,CAAC,CAAC,CAAC;YAC7D,OAAO,GAAG,OAAO,CAAC,oBAAoB,CAAC,IAAI,CAAC,CAAC;YAC7C,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;QAChC,CAAC;QAED,MAAM,CAAC,OAAO,CAAC;IACnB,CAAC;IAGS,WAAW,CAAC,IAAY;QAC9B,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,CAAC,QAAQ,KAAK,QAAQ,CAAC,WAAW,KAAK,IAAI,CAAC,CAAC;IAC/E,CAAC;IAGS,UAAU,CAAC,IAAY;QAC7B,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC,OAAO,KAAK,OAAO,CAAC,WAAW,KAAK,IAAI,CAAC,CAAC;IAC5E,CAAC;IAQS,qBAAqB,CAAC,IAAwB;QAGpD,IAAI,OAAO,GAA0B,EAAE,CAAC;QAKxC,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC,OAAO;YACtC,MAAM,CAAC,OAAO,CAAC,QAAQ,CAAC,IAAI,CAAC;iBAC5B,IAAI,CAAC,CAAC,MAAM,OAAO,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;iBAC3C,KAAK,CAAC,CAAC,KAAK,OAAO,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QAChD,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;IACvB,CAAC;IAMS,iBAAiB,CAAC,IAAY,EAAE,IAAwB;QAE9D,MAAM,YAAY,GAAG,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC,OAAO,KAAK,OAAO,CAAC,WAAW,KAAK,IAAI,CAAC,CAAC;QAEtF,EAAE,CAAC,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC;YAChB,MAAM,IAAI,KAAK,CAAC,GAAG,IAAI,0BAA0B,CAAC,CAAC;QACvD,CAAC;QAGD,MAAM,WAAW,GAAuB,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC,IAAI,EAAE,GAAG;YACtE,MAAM,CAAC,GAAG,KAAK,IAAI,CAAC;QACxB,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,CAAC,CAAC,WAAW,CAAC,CAAC,CAAC;YACf,OAAO,CAAC,GAAG,CAAC,uBAAuB,CAAC,CAAC;YACrC,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC;gBACnB,GAAG,EAAE,IAAI,KAAK,CAAC,oBAAoB,CAAC;gBACpC,MAAM,EAAE,IAAI;aACf,CAAC,CAAC;QACP,CAAC;QAED,MAAM,CAAC,YAAY,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;IACvC,CAAC;IAGO,UAAU,CAAC,IAAY;QAI3B,MAAM,OAAO,GAAmB,OAAO,CAAC,eAAe,IAAI,EAAE,CAAC,CAAC;QAC/D,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC;YACX,MAAM,IAAI,KAAK,CAAC,0BAA0B,IAAI,EAAE,CAAC,CAAC;QACtD,CAAC;QAED,MAAM,CAAC,OAAO,CAAC;IACnB,CAAC;CACJ;AApKD,0BAoKC","file":"procbot.js","sourcesContent":["/*\nCopyright 2016-2017 Resin.io\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n   http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\nimport * as Promise from 'bluebird';\nimport * as ChildProcess from 'child_process';\nimport * as FS from 'fs';\nimport * as yaml from 'js-yaml';\nimport * as _ from 'lodash';\nimport { ServiceEmitContext, ServiceEmitRequest, ServiceEmitResponse, ServiceEmitter,\n    ServiceFactory, ServiceListener } from '../services/service-types';\nimport { Logger, LogLevel } from '../utils/logger';\nimport { ProcBotConfiguration } from './procbot-types';\nconst fsReadFile = Promise.promisify(FS.readFile);\nconst exec: (command: string, options?: any) => Promise<{}> = Promise.promisify(ChildProcess.exec);\n\n// The ProcBot class is a parent class that can be used for some top-level tasks:\n//  * Schedule the processing of events clustered by a given context\n//  * Support the addition of listeners or emitters by the child class, and dispatch events\n//    to emitters\n//  * Retrieve configuration file from either the local FS or a ServiceEmitter\nexport class ProcBot {\n    protected _botname: string;\n    protected logger = new Logger();\n    private emitters: ServiceEmitter[] = [];\n    private listeners: ServiceListener[] = [];\n    private nodeBinPath: string;\n\n    constructor(name = 'ProcBot') {\n        this._botname = name;\n    }\n\n    public getNodeBinPath(): Promise<string> {\n        if (this.nodeBinPath) {\n            return Promise.resolve(this.nodeBinPath);\n        }\n\n        return exec('npm bin').then((binPath: string) => {\n            this.nodeBinPath = binPath.trim();\n            return this.nodeBinPath;\n        });\n    }\n\n    // Process a configuration file from YAML into a nested object.\n    protected processConfiguration(configFile: string): ProcBotConfiguration | void {\n        const config: ProcBotConfiguration = yaml.safeLoad(configFile);\n\n        if (!config) {\n            return;\n        }\n\n        // Swap out known tags that become booleans.\n        const minimumVersion = ((config || {}).procbot || {}).minimum_version;\n        if (minimumVersion && process.env.npm_package_version) {\n            if (process.env.npm_package_version < minimumVersion) {\n                throw new Error('Current ProcBot implementation does not meet minimum required version to run ');\n            }\n        }\n\n        return config;\n    }\n\n    // Retrieve a configuration file.\n    // This default implementation assumes a pathname.\n    // We should really pass in string | ServiceEmitRequest, the FS module should be a type of emmitter.\n    protected retrieveConfiguration(source: string, location: string | ServiceEmitRequest):\n    Promise<ProcBotConfiguration | ServiceEmitResponse | void> {\n        // If the path is a string, then we simply try and get from the filesystem,\n        // else we try and get the emitter passed in to read it.\n        let retrievePromise: Promise<any>;\n        if (source === 'fs') {\n            retrievePromise = fsReadFile(<string>location).call('toString');\n        } else {\n            retrievePromise = this.dispatchToEmitter(source, <ServiceEmitRequest>location);\n        }\n        return retrievePromise.then((contents) => {\n            if (source === 'fs') {\n                return this.processConfiguration(contents);\n            }\n\n            return contents;\n        }).catch(() => {\n            this.logger.log(LogLevel.INFO, 'No config file was found');\n        });\n    }\n\n    // Add a new listener.\n    // If it already exists, we just ignore it.\n    protected addServiceListener(name: string, data?: any): ServiceListener | void {\n        const service = this.getService(name);\n        let listener;\n\n        if (service && !_.find(this.listeners, [ 'serviceName', name ])) {\n            listener = service.createServiceListener(data);\n            this.listeners.push(listener);\n        }\n\n        return listener;\n    }\n\n    // Add a new emitter.\n    // If it already exists, we just ignore it.\n    protected addServiceEmitter(name: string, data?: any): ServiceEmitter | void {\n        const service = this.getService(name);\n        let emitter;\n\n        if (service && !_.find(this.emitters, [ 'serviceName', name ])) {\n            emitter = service.createServiceEmitter(data);\n            this.emitters.push(emitter);\n        }\n\n        return emitter;\n    }\n\n    // Find a particular emitter based upon its name.\n    protected getListener(name: string): ServiceListener | void {\n        return _.find(this.listeners, (listener) => listener.serviceName === name);\n    }\n\n    // Find a particular emitter based upon its name.\n    protected getEmitter(name: string): ServiceEmitter | void {\n        return _.find(this.emitters, (emitter) => emitter.serviceName === name);\n    }\n\n    // Dispatch to the specified emitter. The wildcard name 'all' means\n    // dispatch to *all* emitters attached. This occurs in a non-defined\n    // order so care should be taken.\n    // This method exists as a shortcut to avoid having to retrieve a specific\n    // emitter before sending to it.\n    // Returns a promise containing the results of all final send statuses.\n    protected dispatchToAllEmitters(data: ServiceEmitRequest) {\n        // If throwError is true, then any error is returned to the caller as soon as it\n        // occurs, else it's stored in a response structure.\n        let results: ServiceEmitResponse[] = [];\n\n        // If there's not a context for a particular emmiter, it will result in a response\n        // with an error contained with in specifying as such. It is up to clients to determine\n        // whether this is an issue or not\n        return Promise.map(this.emitters, (emitter) => {\n            return emitter.sendData(data)\n            .then((result) => { results.push(result); })\n            .catch((error) => { results.push(error); });\n        }).return(results);\n    }\n\n    // Dispatch to a named emitter.\n    // This method exists as a shortcut to avoid having to retrieve a specific\n    // emitter before sending to it.\n    // Returns a promise containing the results of all final send statuses.\n    protected dispatchToEmitter(name: string, data: ServiceEmitRequest): Promise<ServiceEmitResponse> {\n        // If emitter not found, this is an error\n        const emitInstance = _.find(this.emitters, (emitter) => emitter.serviceName === name);\n\n        if (!emitInstance) {\n            throw new Error(`${name} emitter is not attached`);\n        }\n\n        // Ensure the right service context exists for the emitter.\n        const emitContext: ServiceEmitContext = _.pickBy(data.contexts, (_val, key) => {\n            return key === name;\n        });\n\n        if (!emitContext) {\n            console.log('No emit context, fail');\n            return Promise.resolve({\n                err: new Error('No emitter context'),\n                source: name\n            });\n        }\n\n        return emitInstance.sendData(data);\n    }\n\n    // Find a dynamic service based upon its name.\n    private getService(name: string): ServiceFactory {\n        // Actually what we could do is just do a require, where the Service\n        // exports a newly made object. We know that this always has a\n        // `registerAction`, so that's all we care about.\n        const service: ServiceFactory = require(`../services/${name}`);\n        if (!service) {\n            throw new Error(`Couldn't find Service: ${name}`);\n        }\n\n        return service;\n    }\n}\n"],"sourceRoot":"../../lib"}