{"version":3,"sources":["translators/discourse.ts"],"names":[],"mappings":"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","file":"discourse.js","sourcesContent":["/*\n Copyright 2016-2017 Resin.io\n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n you may not use this file except in compliance with the License.\n You may obtain a copy of the License at\n\n http://www.apache.org/licenses/LICENSE-2.0\n\n Unless required by applicable law or agreed to in writing, software\n distributed under the License is distributed on an \"AS IS\" BASIS,\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n See the License for the specific language governing permissions and\n limitations under the License.\n */\n\nimport * as Promise from 'bluebird';\nimport * as _ from 'lodash';\nimport * as path from 'path';\nimport * as request from 'request-promise';\nimport { DiscourseConstructor, DiscourseEmitContext, DiscoursePost } from './discourse-types';\nimport { Messenger } from './messenger';\nimport {\n\tMessengerAction, MessengerEmitResponse, MessengerEvent, ReceiptContext, TransmitContext\n} from './messenger-types';\nimport { ServiceEmitter, ServiceListener } from './service-types';\n\nexport class DiscourseService extends Messenger implements ServiceListener, ServiceEmitter {\n\tprivate static _serviceName = path.basename(__filename.split('.')[0]);\n\t// There are circumstances in which the discourse web-hook will fire twice for the same post, so track.\n\tprivate postsSynced = new Set<number>();\n\tprivate data: DiscourseConstructor;\n\n\tpublic constructor(data: DiscourseConstructor, listen = true) {\n\t\tsuper(listen);\n\t\tthis.data = data;\n\t}\n\n\t/**\n\t * Promise to turn the data enqueued into a generic message format.\n\t * @param data  Raw data from the enqueue, remembering this is as dumb and quick as possible.\n\t * @returns     A promise that resolves to the generic form of the event.\n\t */\n\tpublic makeGeneric = (data: MessengerEvent): Promise<ReceiptContext> => {\n\t\t// Encode once the common parts of a request\n\t\tconst getGeneric = {\n\t\t\tjson: true,\n\t\t\tmethod: 'GET',\n\t\t\tqs: {\n\t\t\t\tapi_key: this.data.token,\n\t\t\t\tapi_username: this.data.username,\n\t\t\t},\n\t\t\t// appended before execution\n\t\t\turi: `https://${this.data.instance}`,\n\t\t};\n\t\t// Gather more complete details of the enqueued event\n\t\tconst getPost = _.cloneDeep(getGeneric);\n\t\tgetPost.uri += `/posts/${data.rawEvent.id}`;\n\t\tconst getTopic = _.cloneDeep(getGeneric);\n\t\tgetTopic.uri += `/t/${data.rawEvent.topic_id}`;\n\t\treturn Promise.props({\n\t\t\tpost: request(getPost),\n\t\t\ttopic: request(getTopic),\n\t\t})\n\t\t.then((details: {post: any, topic: any}) => {\n\t\t\t// Gather metadata and resolve\n\t\t\tconst metadata = Messenger.extractMetadata(details.post.raw);\n\t\t\tconst first = details.post.post_number === 1;\n\t\t\treturn {\n\t\t\t\taction: MessengerAction.Create,\n\t\t\t\tfirst,\n\t\t\t\tgenesis: metadata.genesis || data.source,\n\t\t\t\t// post_type 4 seems to correspond to whisper\n\t\t\t\thidden: first ? !details.topic.visible : details.post.post_type === 4,\n\t\t\t\tsource: DiscourseService._serviceName,\n\t\t\t\tsourceIds: {\n\t\t\t\t\t// These come in as integers, but should be strings\n\t\t\t\t\tflow: details.topic.category_id.toString(),\n\t\t\t\t\tmessage: details.post.id.toString(),\n\t\t\t\t\tthread: details.post.topic_id.toString(),\n\t\t\t\t\turl: getTopic.uri,\n\t\t\t\t\tuser: details.post.username,\n\t\t\t\t},\n\t\t\t\ttext: metadata.content,\n\t\t\t\ttitle: details.topic.title,\n\t\t\t};\n\t\t});\n\t}\n\n\t/**\n\t * Promise to turn the generic message format into a specific form to be emitted.\n\t * @param data  Generic message format object to be encoded.\n\t * @returns     Promise that resolves to the emit suitable form.\n\t */\n\tpublic makeSpecific = (data: TransmitContext): Promise<DiscourseEmitContext> => {\n\t\t// Attempt to find the thread ID to know if this is a new topic or not\n\t\tconst topicId = data.toIds.thread;\n\t\tif (!topicId) {\n\t\t\tconst title = data.title;\n\t\t\tif (!title) {\n\t\t\t\tthrow new Error('Cannot create Discourse Thread without a title');\n\t\t\t}\n\t\t\t// A new topic request for discourse\n\t\t\treturn new Promise<DiscourseEmitContext>((resolve) => {\n\t\t\t\tresolve({\n\t\t\t\t\tendpoint: {\n\t\t\t\t\t\tapi_key: data.toIds.token,\n\t\t\t\t\t\tapi_username: data.toIds.user,\n\t\t\t\t\t},\n\t\t\t\t\tpayload: {\n\t\t\t\t\t\tcategory: data.toIds.flow,\n\t\t\t\t\t\traw: `${data.text}\\n\\n---\\n${Messenger.stringifyMetadata(data)}`,\n\t\t\t\t\t\ttitle,\n\t\t\t\t\t\tunlist_topic: data.hidden ? 'true' : 'false',\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t});\n\t\t}\n\t\t// A new message request for discourse\n\t\treturn new Promise<DiscourseEmitContext>((resolve) => {\n\t\t\tresolve({\n\t\t\t\tendpoint: {\n\t\t\t\t\tapi_key: data.toIds.token,\n\t\t\t\t\tapi_username: data.toIds.user,\n\t\t\t\t},\n\t\t\t\tpayload: {\n\t\t\t\t\traw: `${data.text}\\n\\n---\\n${Messenger.stringifyMetadata(data)}`,\n\t\t\t\t\ttopic_id: topicId,\n\t\t\t\t\twhisper: data.hidden ? 'true' : 'false',\n\t\t\t\t},\n\t\t\t});\n\t\t});\n\t}\n\n\t/**\n\t * Turns the generic, messenger, name for an event into a specific trigger name for this class.\n\t * @param eventType  Name of the event to translate, eg 'message'.\n\t * @returns          This class's equivalent, eg 'post'.\n\t */\n\tpublic translateEventName(eventType: string): string {\n\t\tconst equivalents: {[key: string]: string} = {\n\t\t\tmessage: 'post',\n\t\t};\n\t\treturn equivalents[eventType];\n\t}\n\n\t/**\n\t * Promise to find the comment history of a particular thread.\n\t * @param thread  id of the thread to search.\n\t * @param _room   id of the room in which the thread resides.\n\t * @param filter  Criteria to match.\n\t */\n\tpublic fetchNotes = (thread: string, _room: string, filter: RegExp): Promise<string[]> => {\n\t\t// Query the API\n\t\tconst getThread = {\n\t\t\tjson: true,\n\t\t\tmethod: 'GET',\n\t\t\tqs: {\n\t\t\t\tapi_key: this.data.token,\n\t\t\t\tapi_username: this.data.username,\n\t\t\t},\n\t\t\turi: `https://${this.data.instance}/t/${thread}`,\n\t\t};\n\t\treturn request(getThread).then((threadObject) => {\n\t\t\treturn _.map(threadObject.post_stream.posts, (item: DiscoursePost) => {\n\t\t\t\t// Clean the response down to only the text\n\t\t\t\treturn item.cooked;\n\t\t\t}).filter((value: string) => {\n\t\t\t\t// Filter the response down to only matches\n\t\t\t\tconst match = value.match(filter);\n\t\t\t\treturn match !== null && match.length > 0;\n\t\t\t});\n\t\t});\n\t}\n\n\t/**\n\t * Activate this service as a listener.\n\t */\n\tprotected activateMessageListener = (): void => {\n\t\t// Create an endpoint for this listener and protect against double-web-hooks\n\t\tMessenger.app.post(`/${DiscourseService._serviceName}/`, (formData, response) => {\n\t\t\tif(!this.postsSynced.has(formData.body.post.id)) {\n\t\t\t\tthis.postsSynced.add(formData.body.post.id);\n\t\t\t\t// Enqueue the event as simply as possible\n\t\t\t\tthis.queueEvent({\n\t\t\t\t\tdata: {\n\t\t\t\t\t\tcookedEvent: {\n\t\t\t\t\t\t\tcontext: formData.body.post.topic_id,\n\t\t\t\t\t\t\ttype: 'post',\n\t\t\t\t\t\t},\n\t\t\t\t\t\trawEvent: formData.body.post,\n\t\t\t\t\t\tsource: DiscourseService._serviceName,\n\t\t\t\t\t},\n\t\t\t\t\tworkerMethod: this.handleEvent,\n\t\t\t\t});\n\t\t\t}\n\t\t\t// Thank you, bye-bye\n\t\t\tresponse.sendStatus(200);\n\t\t});\n\t}\n\n\t/**\n\t * Deliver the payload to the service. Sourcing the relevant context has already been performed.\n\t * @param data  The object to be delivered to the service.\n\t * @returns     Response from the service endpoint.\n\t */\n\tprotected sendPayload = (data: DiscourseEmitContext): Promise<MessengerEmitResponse> => {\n\t\t// Build and send a request to the API endpoint\n\t\tconst requestOptions = {\n\t\t\tbody: data.payload,\n\t\t\tjson: true,\n\t\t\tqs: data.endpoint,\n\t\t\turl: `https://${this.data.instance}/posts`\n\t\t};\n\t\treturn request.post(requestOptions).then((resData) => {\n\t\t\t// Translate the response from the API back into the message service\n\t\t\treturn {\n\t\t\t\tresponse: {\n\t\t\t\t\tmessage: resData.id,\n\t\t\t\t\tthread: resData.topic_id,\n\t\t\t\t\turl: `https://${this.data.instance}/t/${resData.topic_id}`\n\t\t\t\t},\n\t\t\t\tsource: DiscourseService._serviceName,\n\t\t\t};\n\t\t});\n\t}\n\n\t/**\n\t * Get the service name, as required by the framework.\n\t * @returns  The service name for Discourse.\n\t */\n\tget serviceName(): string {\n\t\treturn DiscourseService._serviceName;\n\t}\n\n\t/**\n\t * Retrieve Discourse API SDK handle (currently none).\n\t * @returns void (currently no Discourse SDK API handle).\n\t */\n\tget apiHandle(): void {\n\t\treturn;\n\t}\n}\n\n/**\n * Build this class, typed and activated as a listener.\n * @returns  Service Listener object, awakened and ready to go.\n */\nexport function createServiceListener(data: DiscourseConstructor): ServiceListener {\n\treturn new DiscourseService(data, true);\n}\n\n/**\n * Build this class, typed as an emitter.\n * @returns  Service Emitter object, ready for your events.\n */\nexport function createServiceEmitter(data: DiscourseConstructor): ServiceEmitter {\n\treturn new DiscourseService(data, false);\n}\n\n/**\n * Build this class, typed as a message service.\n * @returns  Message Service object, ready to convert events.\n */\nexport function createMessageService(data: DiscourseConstructor): Messenger {\n\treturn new DiscourseService(data, false);\n}\n"],"sourceRoot":"../../lib"}