{"version":3,"sources":["translators/translator.ts"],"names":[],"mappings":"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","file":"translator.js","sourcesContent":["/*\n Copyright 2016-2017 Resin.io\n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n you may not use this file except in compliance with the License.\n You may obtain a copy of the License at\n\n http://www.apache.org/licenses/LICENSE-2.0\n\n Unless required by applicable law or agreed to in writing, software\n distributed under the License is distributed on an \"AS IS\" BASIS,\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n See the License for the specific language governing permissions and\n limitations under the License.\n */\n\nimport * as Promise from 'bluebird';\nimport * as _ from 'lodash';\nimport {\n\tInterimContext, MessageContext, MessageIds,\n\tMetadata, TransmitContext,\n} from '../services/messenger-types';\nimport {\n\tServiceEmitContext, ServiceEvent,\n} from '../services/service-types';\n\nexport abstract class MessageTranslator {\n\t/**\n\t * Retrieves and loads a Translator by name.\n\t * @param name  The name of the Translator to load.\n\t * @param data  The constructor object for the createTranslator method.\n\t * @return      The newly instantiated Translator.\n\t */\n\tpublic static newTranslator(name: string, data: any): MessageTranslator {\n\t\treturn require(name).createTranslator(data);\n\t}\n\n\t/**\n\t * Make a handle context, using a receipt context and some extra information.\n\t * @param event  Event to be converted.\n\t * @param to     Destination for the handle context.\n\t * @param toIds  Pre-populate the toIds, if desired.\n\t * @returns      Newly created context for handling a message.\n\t */\n\tpublic static initInterimContext(event: MessageContext, to: string, toIds: MessageIds = {}): InterimContext {\n\t\treturn {\n\t\t\t// Details from the ReceiptContext\n\t\t\taction: event.action,\n\t\t\tfirst: event.first,\n\t\t\tgenesis: event.genesis,\n\t\t\thidden: event.hidden,\n\t\t\tsource: event.source,\n\t\t\tsourceIds: event.sourceIds,\n\t\t\ttext: event.text,\n\t\t\ttitle: event.title,\n\t\t\t// Details from the arguments\n\t\t\tto,\n\t\t\ttoIds,\n\t\t};\n\t}\n\n\t/**\n\t * Encode the metadata of an event into a string to embed in the message.\n\t * @param data    Event to gather details from.\n\t * @param format  Optional, markdown or plaintext, defaults to markdown.\n\t * @returns       Text with data embedded.\n\t */\n\tprotected static stringifyMetadata(data: MessageContext, format: 'markdown'|'plaintext' = 'markdown'): string {\n\t\tconst indicators = MessageTranslator.getIndicatorArrays();\n\t\t// Build the content with the indicator and genesis at the front\n\t\tswitch (format) {\n\t\t\tcase 'markdown':\n\t\t\t\treturn `[${data.hidden ? indicators.hidden[0] : indicators.shown[0]}](${data.source})`;\n\t\t\tcase 'plaintext':\n\t\t\t\treturn `${data.hidden ? indicators.hidden[0] : indicators.shown[0]}:${data.source}`;\n\t\t\tdefault:\n\t\t\t\tthrow new Error(`${format} format not recognised`);\n\t\t}\n\t}\n\n\t/**\n\t * Given a basic string this will extract a more rich context for the event, if embedded.\n\t * @param message  Basic string that may contain metadata.\n\t * @returns        Object of content, genesis and hidden.\n\t */\n\tprotected static extractMetadata(message: string): Metadata {\n\t\tconst indicators = MessageTranslator.getIndicatorArrays();\n\t\tconst visible = indicators.shown.join('|\\\\');\n\t\tconst hidden = indicators.hidden.join('|\\\\');\n\t\t// Anchored with new line; followed by whitespace.\n\t\t// Captured, the show/hide; brackets to enclose.\n\t\t// Then comes genesis; parens may surround.\n\t\t// The case we ignore; a Regex we form!\n\t\tconst findMetadata = new RegExp(`(?:^|\\\\r|\\\\n)(?:\\\\s*)\\\\[?(${hidden}|${visible})\\\\]?:?\\\\(?(\\\\w*)\\\\)?`, 'i');\n\t\tconst metadata = message.match(findMetadata);\n\t\tif (metadata) {\n\t\t\t// The content without the metadata, the word after the emoji, and whether the emoji is in the visible set\n\t\t\treturn {\n\t\t\t\tcontent: message.replace(findMetadata, '').trim(),\n\t\t\t\tgenesis: metadata[2] || null,\n\t\t\t\thidden: !_.includes(indicators.shown, metadata[1]),\n\t\t\t};\n\t\t}\n\t\t// Return some default values if there wasn't any metadata\n\t\treturn {\n\t\t\tcontent: message,\n\t\t\tgenesis: null,\n\t\t\thidden: true,\n\t\t};\n\t}\n\n\t/**\n\t * Retrieve from the environment array of strings to use as indicators of visibility\n\t * @returns  Object of arrays of indicators, shown and hidden.\n\t */\n\tprivate static getIndicatorArrays(): { 'shown': string[], 'hidden': string[] } {\n\t\tlet shown;\n\t\tlet hidden;\n\t\ttry {\n\t\t\t// Retrieve publicity indicators from the environment\n\t\t\tshown = JSON.parse(process.env.MESSAGE_TRANSLATOR_PUBLIC_INDICATORS);\n\t\t\thidden = JSON.parse(process.env.MESSAGE_TRANSLATOR_PRIVATE_INDICATORS);\n\t\t} catch (error) {\n\t\t\tthrow new Error('Message convertor environment variables not set correctly');\n\t\t}\n\t\tif (shown.length === 0 || hidden.length === 0) {\n\t\t\tthrow new Error('Message convertor environment variables not set correctly');\n\t\t}\n\t\treturn { hidden, shown };\n\t}\n\n\t/**\n\t * Translate the provided data, enqueued by the service, into a message context\n\t * @param data  Data in the form raw to the service\n\t */\n\tpublic abstract dataIntoMessage(data: ServiceEvent): Promise<MessageContext>;\n\n\t/**\n\t * Translate the provided message context into an emit context\n\t * @param message  Standard form of the message\n\t */\n\tpublic abstract messageIntoEmit(message: TransmitContext): Promise<ServiceEmitContext>;\n\n\t/**\n\t * Translate the provided generic name for an event into the service events to listen to\n\t * @param eventName  Generic name for an event\n\t */\n\tpublic abstract eventIntoEvents(eventName: string): string[];\n}\n"],"sourceRoot":"../../lib"}