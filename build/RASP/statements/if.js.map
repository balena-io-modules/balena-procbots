{"version":3,"sources":["RASP/statements/if.ts"],"names":[],"mappings":"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","file":"if.js","sourcesContent":["import * as _ from 'lodash';\nimport { R_ifContext, R_if_elseifContext, R_if_elseContext } from '../Antlr/RASPParser';\nimport { BotDetails, Expression, ObjectExpression, IfClause, IfStatement, Statement,\n\tStatementOp } from '../parser-types';\nimport { DebugExpression } from '../helpers';\nimport { ExtRASPListener } from '../parser';\n\nexport enum IfType {\n\tIf,\n\tElse\n};\n\nexport class IfStatementGenerator implements IfStatement {\n\tpublic type: StatementOp.If = StatementOp.If;\n\tpublic parent: Statement;\n\tpublic ifs: IfClause[];\n\tpublic else: Statement;\n\tpublic currentClause: IfType;\n\t\n\tpublic static enterR_if(ctx: R_ifContext, bot: BotDetails): void {\n\t\t// New R_if\n\t\tconsole.log('send if in');\n\t\tconsole.log(ctx.text);\n\t\tbot.currentStatement = {\n\t\t\ttype: StatementOp.If,\n\t\t\tparent: bot.currentStatement\n\t\t};\n\t}\n\n\tpublic static exitR_if(ctx: R_ifContext, bot: BotDetails): void {\n\t\t// Is this a\n\t\tconsole.log('send if out');\n\n\t\t// Ensure we have the name from the current expression and the values.\n\t\tconsole.log(bot.currentStatement);\n\t\tconsole.log(bot.currentExpression);\n\t\tif (bot.currentStatement && bot.currentExpression && bot.currentListenerMethod) {\n\t\t\tconsole.log('got everything required');\n\t\t\tconst R_if = <IfStatement>bot.currentStatement;\n\n\t\t\tconst parent = bot.currentStatement.parent;\n\t\t\tif (parent && parent.assignChild) {\n\t\t\t\tparent.assignChild(bot.currentStatement);\n\t\t\t\tbot.currentStatement = parent;\n\t\t\t} else {\n\t\t\t\tif (!bot.currentListenerMethod.statements) {\n\t\t\t\t\tbot.currentListenerMethod.statements = [];\n\t\t\t\t}\n\n\t\t\t\t// Add to the statements.\n\t\t\t\tif (bot.currentStatement) {\n\t\t\t\t\tconsole.log('pushing statment');\n\t\t\t\t\tconsole.log(bot.currentStatement);\n\t\t\t\t\tbot.currentListenerMethod.statements.push(R_if);\n\t\t\t\t}\n\t\t\t\tbot.currentStatement = undefined;\t\t\n\t\t\t}\n\t\t\t//DebugExpression(bot.currentStatement);\n\t\t}\n\t\tbot.currentExpression = undefined;\n\t}\n\n\tpublic enterR_if_elseif(ctx.) {\n\t\tSet the parent's internal state to the IfElse clause, so when assignChild is called it can be set\n\t}\n\n\tpublic exitR_if_elseif() {\n\t\tOn exit, set the expression for the current clause (last of the IfClause statements)\n\t}\n\n\tpublic enterR_if_else(ctx.) {\n\t\tSet the parent's internal state to the ELSE clause, so when assignChild is called it sets the right thing\n\t}\n\n\tpublic exitR_if_else() {\n\t\tOn exit, we set the expression for it (the else statement)\n\t}\n\n\tpublic assignChild(statement: Statement, expr: Expression) {\n\t\t// We set the statement based on the current entrance vector\n\t\tif (this.currentClause === IfType.If) {\n\t\t\tthis.ifs.push({ statement })\n\t\t} else {\n\t\t\tthis.else = statement;\n\t\t}\n\t}\n}\n\nexport function addListenerMethods(listener: ExtRASPListener, definition: BotDetails): void {\n\tlistener['enterR_if'] = _.partial(IfStatementGenerator.enterR_if, _, definition);\n\tlistener['exitR_if'] = _.partial(IfStatementGenerator.exitR_if, _, definition);\n}"],"sourceRoot":"../../../lib"}