{"version":3,"sources":["RASP/statements/assignment.ts"],"names":[],"mappings":";;AAAA,4BAA4B;AAO5B;IAAA;QACQ,SAAI,KAA0C;IA+CtD,CAAC;IA1CO,MAAM,CAAC,eAAe,CAAC,GAAsB,EAAE,GAAe;QAEpE,GAAG,CAAC,gBAAgB,GAAG;YACtB,IAAI,GAAoB;YACxB,MAAM,EAAE,GAAG,CAAC,gBAAgB;SAC5B,CAAC;IACH,CAAC;IAEM,MAAM,CAAC,cAAc,CAAC,IAAuB,EAAE,GAAe;QAEpE,IAAI,iBAA8B,CAAC;QAGnC,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,iBAAiB,CAAC,CAAC;QACnC,EAAE,CAAC,CAAC,GAAG,CAAC,gBAAgB,IAAI,GAAG,CAAC,iBAAiB,CAAC,CAAC,CAAC;YACnD,MAAM,QAAQ,GAAuB,GAAG,CAAC,iBAAiB,CAAC;YAC3D,MAAM,UAAU,GAAwB,GAAG,CAAC,gBAAgB,CAAC;YAC7D,UAAU,CAAC,IAAI,GAAG,QAAQ,CAAC,IAAI,CAAC;YAChC,UAAU,CAAC,KAAK,GAAG,QAAQ,CAAC,KAAK,CAAC;YAElC,EAAE,CAAC,CAAC,GAAG,CAAC,qBAAqB,CAAC,CAAC,CAAC;gBAC/B,MAAM,MAAM,GAAG,GAAG,CAAC,gBAAgB,CAAC,MAAM,CAAC;gBAC3C,EAAE,CAAC,CAAC,MAAM,IAAI,MAAM,CAAC,WAAW,CAAC,CAAC,CAAC;oBAClC,MAAM,CAAC,WAAW,CAAC,GAAG,CAAC,gBAAgB,CAAC,CAAC;oBACzC,GAAG,CAAC,gBAAgB,GAAG,MAAM,CAAC;gBAC/B,CAAC;gBAAC,IAAI,CAAC,CAAC;oBAEP,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,qBAAqB,CAAC,UAAU,CAAC,CAAC,CAAC;wBAC3C,GAAG,CAAC,qBAAqB,CAAC,UAAU,GAAG,EAAE,CAAC;oBAC3C,CAAC;oBACD,GAAG,CAAC,qBAAqB,CAAC,UAAU,CAAC,IAAI,CAAC,GAAG,CAAC,gBAAgB,CAAC,CAAC;oBAChE,GAAG,CAAC,gBAAgB,GAAG,SAAS,CAAC;gBAClC,CAAC;YACF,CAAC;YAAC,IAAI,CAAC,CAAC;gBACP,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC,CAAC;oBACtB,GAAG,CAAC,WAAW,GAAG,EAAE,CAAC;gBACtB,CAAC;gBACD,GAAG,CAAC,WAAW,CAAC,IAAI,CAAC,GAAG,CAAC,gBAAgB,CAAC,CAAC;YAC5C,CAAC;YACD,GAAG,CAAC,iBAAiB,GAAG,SAAS,CAAC;QACnC,CAAC;IACF,CAAC;CACD;AAhDD,oEAgDC;AAED,4BAAmC,QAAyB,EAAE,UAAsB;IACnF,QAAQ,CAAC,iBAAiB,CAAC,GAAG,CAAC,CAAC,OAAO,CAAC,4BAA4B,CAAC,eAAe,EAAE,CAAC,EAAE,UAAU,CAAC,CAAC;IACrG,QAAQ,CAAC,gBAAgB,CAAC,GAAG,CAAC,CAAC,OAAO,CAAC,4BAA4B,CAAC,cAAc,EAAE,CAAC,EAAE,UAAU,CAAC,CAAC;AACpG,CAAC;AAHD,gDAGC","file":"assignment.js","sourcesContent":["import * as _ from 'lodash';\nimport { AssignmentContext } from '../Antlr/RASPParser';\nimport { AssignmentStatement, BotDetails, Expression, Statement, StatementOp,\n\tVariableExpression  } from '../parser-types';\nimport { DebugExpression } from '../helpers';\nimport { ExtRASPListener } from '../parser';\n\nexport class AssignmentStatementGenerator implements AssignmentStatement {\n\tpublic type: StatementOp.Assign = StatementOp.Assign;\n\tpublic parent: Statement | undefined;\n\tpublic name: string;\n\tpublic value: Expression;\n\t\n\tpublic static enterAssignment(ctx: AssignmentContext, bot: BotDetails): void {\n\t\t// New Assignment\n\t\tbot.currentStatement = {\n\t\t\ttype: StatementOp.Assign,\n\t\t\tparent: bot.currentStatement\n\t\t};\n\t}\n\n\tpublic static exitAssignment(_ctx: AssignmentContext, bot: BotDetails): void {\n\t\t// We have to test if this is a listener method or in the global context.\n\t\tlet assignmentContext: Statement[];\n\n\t\t// Ensure we have the name from the current expression and the values.\n\t\tconsole.log(bot.currentExpression);\n\t\tif (bot.currentStatement && bot.currentExpression) {\n\t\t\tconst variable = <VariableExpression>bot.currentExpression;\n\t\t\tconst assignment = <AssignmentStatement>bot.currentStatement;\n\t\t\tassignment.name = variable.name;\n\t\t\tassignment.value = variable.value;\n\t\t\t//DebugExpression(bot.currentExpression);\n\t\t\tif (bot.currentListenerMethod) {\n\t\t\t\tconst parent = bot.currentStatement.parent;\n\t\t\t\tif (parent && parent.assignChild) {\n\t\t\t\t\tparent.assignChild(bot.currentStatement);\n\t\t\t\t\tbot.currentStatement = parent;\n\t\t\t\t} else {\n\t\t\t\t\t// We'd set context to the listener method.\n\t\t\t\t\tif (!bot.currentListenerMethod.statements) {\n\t\t\t\t\t\tbot.currentListenerMethod.statements = [];\n\t\t\t\t\t}\n\t\t\t\t\tbot.currentListenerMethod.statements.push(bot.currentStatement);\n\t\t\t\t\tbot.currentStatement = undefined;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif (!bot.assignments) {\n\t\t\t\t\tbot.assignments = [];\n\t\t\t\t}\n\t\t\t\tbot.assignments.push(bot.currentStatement);\n\t\t\t}\n\t\t\tbot.currentExpression = undefined;\n\t\t}\n\t}\n}\n\nexport function addListenerMethods(listener: ExtRASPListener, definition: BotDetails): void {\n\tlistener['enterAssignment'] = _.partial(AssignmentStatementGenerator.enterAssignment, _, definition);\n\tlistener['exitAssignment'] = _.partial(AssignmentStatementGenerator.exitAssignment, _, definition);\n}"],"sourceRoot":"../../../lib"}