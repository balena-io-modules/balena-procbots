{"version":3,"sources":["RASP/statements/assignment.ts"],"names":[],"mappings":";;AAAA,4BAA4B;AAI5B,wCAA6C;AAG7C;IAAA;QACW,SAAI,KAA0C;IAyCzD,CAAC;IArCU,MAAM,CAAC,eAAe,CAAC,GAAsB,EAAE,GAAe;QAEjE,EAAE,CAAC,CAAC,GAAG,CAAC,wBAAwB,CAAC,CAAC,CAAC;YAC/B,MAAM,IAAI,KAAK,CAAC,gEAAgE,CAAC,CAAC;QACtF,CAAC;QACD,GAAG,CAAC,gBAAgB,GAAG;YACnB,IAAI,GAAoB;SAC3B,CAAC;IACN,CAAC;IAEM,MAAM,CAAC,cAAc,CAAC,IAAuB,EAAE,GAAe;QAEjE,IAAI,iBAA8B,CAAC;QAGnC,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,iBAAiB,CAAC,CAAC;QACnC,EAAE,CAAC,CAAC,GAAG,CAAC,gBAAgB,IAAI,GAAG,CAAC,iBAAiB,CAAC,CAAC,CAAC;YAChD,MAAM,QAAQ,GAAuB,GAAG,CAAC,iBAAiB,CAAC;YAC3D,MAAM,UAAU,GAAwB,GAAG,CAAC,gBAAgB,CAAC;YAC7D,UAAU,CAAC,IAAI,GAAG,QAAQ,CAAC,IAAI,CAAC;YAChC,UAAU,CAAC,KAAK,GAAG,QAAQ,CAAC,KAAK,CAAC;YAClC,yBAAe,CAAC,GAAG,CAAC,iBAAiB,CAAC,CAAC;QAC3C,CAAC;QACD,EAAE,CAAC,CAAC,GAAG,CAAC,qBAAqB,CAAC,CAAC,CAAC;QAEhC,CAAC;QAAC,IAAI,CAAC,CAAC;YACJ,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC,CAAC;gBACnB,GAAG,CAAC,WAAW,GAAG,EAAE,CAAC;YACzB,CAAC;YACD,iBAAiB,GAAG,GAAG,CAAC,WAAW,CAAC;YACpC,EAAE,CAAC,CAAC,GAAG,CAAC,gBAAgB,CAAC,CAAC,CAAC;gBACvB,iBAAiB,CAAC,IAAI,CAAC,GAAG,CAAC,gBAAgB,CAAC,CAAC;YACjD,CAAC;QACL,CAAC;QAED,GAAG,CAAC,gBAAgB,GAAG,SAAS,CAAC;IACrC,CAAC;CACJ;AA1CD,oEA0CC;AAED,4BAAmC,QAAyB,EAAE,UAAsB;IAChF,QAAQ,CAAC,iBAAiB,CAAC,GAAG,CAAC,CAAC,OAAO,CAAC,4BAA4B,CAAC,eAAe,EAAE,CAAC,EAAE,UAAU,CAAC,CAAC;IACrG,QAAQ,CAAC,gBAAgB,CAAC,GAAG,CAAC,CAAC,OAAO,CAAC,4BAA4B,CAAC,cAAc,EAAE,CAAC,EAAE,UAAU,CAAC,CAAC;AACvG,CAAC;AAHD,gDAGC","file":"assignment.js","sourcesContent":["import * as _ from 'lodash';\nimport { AssignmentContext } from '../Antlr/RASPParser';\nimport { AssignmentStatement, BotDetails, Expression, Statement, StatementOp,\n    VariableExpression  } from '../parser-types';\nimport { DebugExpression } from '../helpers';\nimport { ExtRASPListener } from '../parser';\n\nexport class AssignmentStatementGenerator implements AssignmentStatement {\n    public type: StatementOp.Assign = StatementOp.Assign;\n    public name: string;\n    public value: Expression;\n    \n    public static enterAssignment(ctx: AssignmentContext, bot: BotDetails): void {\n        // New Assignment\n        if (bot.currentEventRegistration) {\n            throw new Error('There is already a event registration being constructed, error');\n        }\n        bot.currentStatement = {\n            type: StatementOp.Assign\n        };\n    }\n\n    public static exitAssignment(_ctx: AssignmentContext, bot: BotDetails): void {\n        // We have to test if this is a listener method or in the global context.\n        let assignmentContext: Statement[];\n\n        // Ensure we have the name from the current expression and the values.\n        console.log(bot.currentExpression);\n        if (bot.currentStatement && bot.currentExpression) {\n            const variable = <VariableExpression>bot.currentExpression;\n            const assignment = <AssignmentStatement>bot.currentStatement;\n            assignment.name = variable.name;\n            assignment.value = variable.value;\n            DebugExpression(bot.currentExpression);\n        }\n        if (bot.currentListenerMethod) {\n            // We'd set context to the listener method.\n        } else {\n            if (!bot.assignments) {\n                bot.assignments = [];\n            }\n            assignmentContext = bot.assignments;\n            if (bot.currentStatement) {\n                assignmentContext.push(bot.currentStatement);\n            }\n        }\n        // Do assignment here\n        bot.currentStatement = undefined;\n    }\n}\n\nexport function addListenerMethods(listener: ExtRASPListener, definition: BotDetails): void {\n    listener['enterAssignment'] = _.partial(AssignmentStatementGenerator.enterAssignment, _, definition);\n    listener['exitAssignment'] = _.partial(AssignmentStatementGenerator.exitAssignment, _, definition);\n}"],"sourceRoot":"../../../lib"}