{"version":3,"sources":["RASP/services/events.ts"],"names":[],"mappings":";;AAAA,4BAA4B;AAM5B;IACW,MAAM,CAAC,yBAAyB,CAAC,GAAgC,EAAE,GAAe;QAErF,EAAE,CAAC,CAAC,GAAG,CAAC,wBAAwB,CAAC,CAAC,CAAC;YAC/B,MAAM,IAAI,KAAK,CAAC,gEAAgE,CAAC,CAAC;QACtF,CAAC;QACD,GAAG,CAAC,wBAAwB,GAAG;YAC3B,UAAU,EAAE,GAAG,CAAC,EAAE,EAAE,CAAC,IAAI;SAC5B,CAAC;IACN,CAAC;IAEM,MAAM,CAAC,wBAAwB,CAAC,IAAiC,EAAE,GAAe;QAErF,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,aAAa,CAAC,CAAC,CAAC;YACrB,GAAG,CAAC,aAAa,GAAG,EAAE,CAAC;QAC3B,CAAC;QACD,EAAE,CAAC,CAAC,GAAG,CAAC,wBAAwB,CAAC,CAAC,CAAC;YAC/B,GAAG,CAAC,aAAa,CAAC,IAAI,CAAC,GAAG,CAAC,wBAAwB,CAAC,CAAC;QACzD,CAAC;QACD,GAAG,CAAC,wBAAwB,GAAG,SAAS,CAAC;IAC7C,CAAC;IAEM,MAAM,CAAC,WAAW,CAAC,GAAkB,EAAE,GAAe;QACzD,EAAE,CAAC,CAAC,GAAG,CAAC,wBAAwB,CAAC,CAAC,CAAC;YAC/B,GAAG,CAAC,wBAAwB,CAAC,MAAM,GAAG,EAAE,CAAC;YACzC,GAAG,CAAC,CAAC,IAAI,KAAK,IAAI,GAAG,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;gBACzB,GAAG,CAAC,wBAAwB,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;YACzD,CAAC;QACL,CAAC;IACL,CAAC;CACJ;AA9BD,gEA8BC;AAED,4BAAmC,QAAyB,EAAE,UAAsB;IAChF,QAAQ,CAAC,2BAA2B,CAAC,GAAG,CAAC,CAAC,OAAO,CAAC,0BAA0B,CAAC,yBAAyB,EAAE,CAAC,EAAE,UAAU,CAAC,CAAC;IACvH,QAAQ,CAAC,0BAA0B,CAAC,GAAG,CAAC,CAAC,OAAO,CAAC,0BAA0B,CAAC,wBAAwB,EAAE,CAAC,EAAE,UAAU,CAAC,CAAC;IACrH,QAAQ,CAAC,aAAa,CAAC,GAAG,CAAC,CAAC,OAAO,CAAC,0BAA0B,CAAC,WAAW,EAAE,CAAC,EAAE,UAAU,CAAC,CAAC;AAC/F,CAAC;AAJD,gDAIC","file":"events.js","sourcesContent":["import * as _ from 'lodash';\nimport { EventsContext, RequestServiceEventsContext } from '../Antlr/RASPParser';\nimport { BotDetails, ClassType, ServiceDefinition, ServiceType } from '../parser-types';\nimport { DebugExpression } from '../helpers';\nimport { ExtRASPListener } from '../parser';\n\nexport class EventRegistrationGenerator {\n    public static enterRequestServiceEvents(ctx: RequestServiceEventsContext, bot: BotDetails): void {\n        // New EventRegistration\n        if (bot.currentEventRegistration) {\n            throw new Error('There is already a event registration being constructed, error');\n        }\n        bot.currentEventRegistration = {\n            methodName: ctx.ID().text\n        };\n    }\n\n    public static exitRequestServiceEvents(_ctx: RequestServiceEventsContext, bot: BotDetails): void {\n        // Push this into the events registrations.\n        if (!bot.registrations) {\n            bot.registrations = [];\n        }\n        if (bot.currentEventRegistration) {\n            bot.registrations.push(bot.currentEventRegistration);\n        }\n        bot.currentEventRegistration = undefined;\n    }\n\n    public static enterEvents(ctx: EventsContext, bot: BotDetails): void {\n        if (bot.currentEventRegistration) {\n            bot.currentEventRegistration.events = [];\n            for (let event of ctx.ID()) {\n                bot.currentEventRegistration.events.push(event.text);\n            }\n        }\n    }\n}\n\nexport function addListenerMethods(listener: ExtRASPListener, definition: BotDetails): void {\n    listener['enterRequestServiceEvents'] = _.partial(EventRegistrationGenerator.enterRequestServiceEvents, _, definition);\n    listener['exitRequestServiceEvents'] = _.partial(EventRegistrationGenerator.exitRequestServiceEvents, _, definition);\n    listener['enterEvents'] = _.partial(EventRegistrationGenerator.enterEvents, _, definition);\n}"],"sourceRoot":"../../../lib"}