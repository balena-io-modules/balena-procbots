{"version":3,"sources":["RASP/services/events.ts"],"names":[],"mappings":";;AAAA,4BAA4B;AAM5B;IACQ,MAAM,CAAC,yBAAyB,CAAC,GAAgC,EAAE,GAAe;QAExF,EAAE,CAAC,CAAC,GAAG,CAAC,wBAAwB,CAAC,CAAC,CAAC;YAClC,MAAM,IAAI,KAAK,CAAC,gEAAgE,CAAC,CAAC;QACnF,CAAC;QACD,GAAG,CAAC,wBAAwB,GAAG;YAC9B,UAAU,EAAE,GAAG,CAAC,EAAE,EAAE,CAAC,IAAI;SACzB,CAAC;IACH,CAAC;IAEM,MAAM,CAAC,wBAAwB,CAAC,IAAiC,EAAE,GAAe;QAExF,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,aAAa,CAAC,CAAC,CAAC;YACxB,GAAG,CAAC,aAAa,GAAG,EAAE,CAAC;QACxB,CAAC;QACD,EAAE,CAAC,CAAC,GAAG,CAAC,wBAAwB,CAAC,CAAC,CAAC;YAClC,GAAG,CAAC,aAAa,CAAC,IAAI,CAAC,GAAG,CAAC,wBAAwB,CAAC,CAAC;QACtD,CAAC;QACD,GAAG,CAAC,wBAAwB,GAAG,SAAS,CAAC;IAC1C,CAAC;IAEM,MAAM,CAAC,WAAW,CAAC,GAAkB,EAAE,GAAe;QAC5D,EAAE,CAAC,CAAC,GAAG,CAAC,wBAAwB,CAAC,CAAC,CAAC;YAClC,GAAG,CAAC,wBAAwB,CAAC,MAAM,GAAG,EAAE,CAAC;YACzC,GAAG,CAAC,CAAC,IAAI,KAAK,IAAI,GAAG,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;gBAC5B,GAAG,CAAC,wBAAwB,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;YACtD,CAAC;QACF,CAAC;IACF,CAAC;CACD;AA9BD,gEA8BC;AAED,4BAAmC,QAAyB,EAAE,UAAsB;IACnF,QAAQ,CAAC,2BAA2B,CAAC,GAAG,CAAC,CAAC,OAAO,CAAC,0BAA0B,CAAC,yBAAyB,EAAE,CAAC,EAAE,UAAU,CAAC,CAAC;IACvH,QAAQ,CAAC,0BAA0B,CAAC,GAAG,CAAC,CAAC,OAAO,CAAC,0BAA0B,CAAC,wBAAwB,EAAE,CAAC,EAAE,UAAU,CAAC,CAAC;IACrH,QAAQ,CAAC,aAAa,CAAC,GAAG,CAAC,CAAC,OAAO,CAAC,0BAA0B,CAAC,WAAW,EAAE,CAAC,EAAE,UAAU,CAAC,CAAC;AAC5F,CAAC;AAJD,gDAIC","file":"events.js","sourcesContent":["import * as _ from 'lodash';\nimport { EventsContext, RequestServiceEventsContext } from '../Antlr/RASPParser';\nimport { BotDetails, ClassType, ServiceDefinition, ServiceType } from '../parser-types';\nimport { DebugExpression } from '../helpers';\nimport { ExtRASPListener } from '../parser';\n\nexport class EventRegistrationGenerator {\n\tpublic static enterRequestServiceEvents(ctx: RequestServiceEventsContext, bot: BotDetails): void {\n\t\t// New EventRegistration\n\t\tif (bot.currentEventRegistration) {\n\t\t\tthrow new Error('There is already a event registration being constructed, error');\n\t\t}\n\t\tbot.currentEventRegistration = {\n\t\t\tmethodName: ctx.ID().text\n\t\t};\n\t}\n\n\tpublic static exitRequestServiceEvents(_ctx: RequestServiceEventsContext, bot: BotDetails): void {\n\t\t// Push this into the events registrations.\n\t\tif (!bot.registrations) {\n\t\t\tbot.registrations = [];\n\t\t}\n\t\tif (bot.currentEventRegistration) {\n\t\t\tbot.registrations.push(bot.currentEventRegistration);\n\t\t}\n\t\tbot.currentEventRegistration = undefined;\n\t}\n\n\tpublic static enterEvents(ctx: EventsContext, bot: BotDetails): void {\n\t\tif (bot.currentEventRegistration) {\n\t\t\tbot.currentEventRegistration.events = [];\n\t\t\tfor (let event of ctx.ID()) {\n\t\t\t\tbot.currentEventRegistration.events.push(event.text);\n\t\t\t}\n\t\t}\n\t}\n}\n\nexport function addListenerMethods(listener: ExtRASPListener, definition: BotDetails): void {\n\tlistener['enterRequestServiceEvents'] = _.partial(EventRegistrationGenerator.enterRequestServiceEvents, _, definition);\n\tlistener['exitRequestServiceEvents'] = _.partial(EventRegistrationGenerator.exitRequestServiceEvents, _, definition);\n\tlistener['enterEvents'] = _.partial(EventRegistrationGenerator.enterEvents, _, definition);\n}"],"sourceRoot":"../../../lib"}