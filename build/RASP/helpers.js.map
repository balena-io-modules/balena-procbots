{"version":3,"sources":["RASP/helpers.ts"],"names":[],"mappings":";;AAAA,oCAAoC;AACpC,4BAA4B;AAC5B,yBAAyB;AACzB,+BAA2B;AAE3B,MAAM,EAAE,GAAQ,OAAO,CAAC,YAAY,CAAC,EAAE,CAAC,CAAC;AAEzC,8BAAqC,OAAe,EAAE,KAAa,EAAE,QAAa,EAAE,WAAgB;IAChG,EAAE,CAAC,CAAC,CAAC,CAAC,UAAU,CAAC,KAAK,EAAE,OAAO,CAAC,CAAC,CAAC,CAAC;QAC/B,QAAQ,CAAC,OAAO,CAAC,GAAG,WAAW,CAAC,IAAI,CAAC;IACzC,CAAC;AACL,CAAC;AAJD,oDAIC;AAED,wCAA+C,GAAG,UAAiB;IAE/D,GAAG,CAAC,CAAC,IAAI,KAAK,GAAG,CAAC,EAAE,KAAK,GAAG,UAAU,CAAC,MAAM,EAAE,KAAK,EAAE,EAAE,CAAC;QACrD,EAAE,CAAC,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;YACpB,MAAM,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC;QAC7B,CAAC;IACL,CAAC;AACL,CAAC;AAPD,wEAOC;AAED,sBAA6B,GAAW,EAAE,QAAgB,CAAC,EAAE,MAA0B,EAAE,cAAwB,EAAE;IAC/G,IAAI,KAAK,GAAa,EAAE,CAAC;IAIzB,MAAM,WAAW,GAAG,CAAC,SAAiB,EAAE,QAAgB;QAGpD,MAAM,CAAC,EAAE,CAAC,YAAY,CAAC,SAAS,CAAC,CAAC,GAAG,CAAC,CAAC,KAAU;YAE7C,MAAM,OAAO,GAAG,GAAG,SAAS,GAAG,UAAG,GAAG,KAAK,EAAE,CAAC;YAC7C,MAAM,CAAC,EAAE,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,CAAC,KAAe;gBAC/C,EAAE,CAAC,CAAC,KAAK,CAAC,WAAW,EAAE,CAAC,CAAC,CAAC;oBACtB,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,WAAW,EAAE,CAAC,SAAS,KAAK,SAAS,KAAK,KAAK,CAAC,CAAC,CAAC,CAAC;wBAC3D,MAAM,CAAC,WAAW,CAAC,OAAO,EAAE,QAAQ,GAAG,CAAC,CAAC,CAAC;oBAC9C,CAAC;gBACL,CAAC;gBAAC,IAAI,CAAC,EAAE,CAAC,CAAC,KAAK,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;oBAGxB,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC;wBACT,MAAM,QAAQ,GAAG,OAAO,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;wBACtC,EAAE,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC;4BACZ,MAAM,CAAC;wBACX,CAAC;wBAED,MAAM,MAAM,GAAG,OAAO,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC;wBAC3C,EAAE,CAAC,CAAC,MAAM,KAAK,MAAM,CAAC,CAAC,CAAC;4BACpB,MAAM,CAAC;wBACX,CAAC;oBACL,CAAC;oBACD,EAAE,CAAC,CAAC,QAAQ,IAAI,KAAK,CAAC,CAAC,CAAC;wBACpB,KAAK,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;oBACxB,CAAC;gBACL,CAAC;YACL,CAAC,CAAC,CAAC;QACP,CAAC,CAAC,CAAC;IACP,CAAC,CAAA;IAED,MAAM,CAAC,WAAW,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;AAC7C,CAAC;AAvCD,oCAuCC","file":"helpers.js","sourcesContent":["import * as Promise from 'bluebird';\nimport * as _ from 'lodash';\nimport * as FS from 'fs';\nimport { sep } from 'path';\n\nconst fs: any = Promise.promisifyAll(FS);\n\nexport function MatchAssignByKeyword(keyword: string, value: string, assignTo: any, assignValue: any) {\n    if (_.startsWith(value, keyword)) {\n        assignTo[keyword] = assignValue.text;\n    }\n}\n\nexport function GetSingletonFromRulePotentials(...potentials: any[]) {\n    // This assumes that there can only be one match in the potentials.\n    for (let index = 0; index < potentials.length; index++) {\n        if (potentials[index]) {\n            return potentials[index];\n        }\n    }\n}\n\nexport function FindAllFiles(dir: string, level: number = 0, filter: string | undefined, excludeDirs: string[] = []): Promise<string[]> {\n    let files: string[] = [];\n\n    // We keep trawling directories and finding files. We only add files\n    // that are level 'level' under the first directory given or deeper.\n    const findEntries = (directory: string, dirLevel: number): Promise<string[]> => {\n        // Get all entries and find files in it. If we find a directory, add a\n        // new object and go into it.\n        return fs.readdirAsync(directory).map((entry: any) => {\n            // Is this a file or a directory?\n            const abEntry = `${directory}${sep}${entry}`;\n            return fs.lstatAsync(abEntry).then((stats: FS.Stats) => {\n                if (stats.isDirectory()) {\n                    if (!_.find(excludeDirs, (lookupDir) => lookupDir === entry)) {\n                        return findEntries(abEntry, dirLevel + 1);\n                    }\n                } else if (stats.isFile()) {\n                    // We don't deal with links if they're not transparent.\n                    // Ensure that the suffix matches.\n                    if (filter) {\n                        const extIndex = abEntry.indexOf('.');\n                        if (!extIndex) {\n                            return;\n                        }\n\n                        const suffix = abEntry.substring(extIndex);\n                        if (filter !== suffix) {\n                            return;\n                        }\n                    }\n                    if (dirLevel >= level) {\n                        files.push(abEntry);\n                    }\n                }\n            });\n        });\n    }\n\n    return findEntries(dir, 0).return(files);\n}\n"],"sourceRoot":"../../lib"}