import { ParseTreeVisitor } from 'antlr4ts/tree/ParseTreeVisitor';
import { InitContext } from './RASPParser';
import { CommentContext } from './RASPParser';
import { BotDefinitionContext } from './RASPParser';
import { BotBodyContext } from './RASPParser';
import { AddListenerContext } from './RASPParser';
import { AddEmitterContext } from './RASPParser';
import { ServiceNameContext } from './RASPParser';
import { ServiceConstructorContext } from './RASPParser';
import { ServiceConstructorPairContext } from './RASPParser';
import { RequestServiceEventsContext } from './RASPParser';
import { EventRegistrationContext } from './RASPParser';
import { EventsContext } from './RASPParser';
import { ListenerMethodNameContext } from './RASPParser';
import { ListenerMethodContext } from './RASPParser';
import { ListenerBodyContext } from './RASPParser';
import { EnvvarContext } from './RASPParser';
import { PathContext } from './RASPParser';
export interface RASPVisitor<Result> extends ParseTreeVisitor<Result> {
    visitInit?: (ctx: InitContext) => Result;
    visitComment?: (ctx: CommentContext) => Result;
    visitBotDefinition?: (ctx: BotDefinitionContext) => Result;
    visitBotBody?: (ctx: BotBodyContext) => Result;
    visitAddListener?: (ctx: AddListenerContext) => Result;
    visitAddEmitter?: (ctx: AddEmitterContext) => Result;
    visitServiceName?: (ctx: ServiceNameContext) => Result;
    visitServiceConstructor?: (ctx: ServiceConstructorContext) => Result;
    visitServiceConstructorPair?: (ctx: ServiceConstructorPairContext) => Result;
    visitRequestServiceEvents?: (ctx: RequestServiceEventsContext) => Result;
    visitEventRegistration?: (ctx: EventRegistrationContext) => Result;
    visitEvents?: (ctx: EventsContext) => Result;
    visitListenerMethodName?: (ctx: ListenerMethodNameContext) => Result;
    visitListenerMethod?: (ctx: ListenerMethodContext) => Result;
    visitListenerBody?: (ctx: ListenerBodyContext) => Result;
    visitEnvvar?: (ctx: EnvvarContext) => Result;
    visitPath?: (ctx: PathContext) => Result;
}
