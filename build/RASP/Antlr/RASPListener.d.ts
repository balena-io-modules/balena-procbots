import { ParseTreeListener } from 'antlr4ts/tree/ParseTreeListener';
import { InitContext } from './RASPParser';
import { CommentContext } from './RASPParser';
import { BotDefinitionContext } from './RASPParser';
import { BotBodyContext } from './RASPParser';
import { AddListenerContext } from './RASPParser';
import { AddEmitterContext } from './RASPParser';
import { ServiceNameContext } from './RASPParser';
import { ServiceConstructorContext } from './RASPParser';
import { ServiceConstructorPairContext } from './RASPParser';
import { RequestServiceEventsContext } from './RASPParser';
import { EventRegistrationContext } from './RASPParser';
import { EventsContext } from './RASPParser';
import { ListenerMethodNameContext } from './RASPParser';
import { ListenerMethodContext } from './RASPParser';
import { ListenerBodyContext } from './RASPParser';
import { EnvvarContext } from './RASPParser';
import { PathContext } from './RASPParser';
export interface RASPListener extends ParseTreeListener {
    enterInit?: (ctx: InitContext) => void;
    exitInit?: (ctx: InitContext) => void;
    enterComment?: (ctx: CommentContext) => void;
    exitComment?: (ctx: CommentContext) => void;
    enterBotDefinition?: (ctx: BotDefinitionContext) => void;
    exitBotDefinition?: (ctx: BotDefinitionContext) => void;
    enterBotBody?: (ctx: BotBodyContext) => void;
    exitBotBody?: (ctx: BotBodyContext) => void;
    enterAddListener?: (ctx: AddListenerContext) => void;
    exitAddListener?: (ctx: AddListenerContext) => void;
    enterAddEmitter?: (ctx: AddEmitterContext) => void;
    exitAddEmitter?: (ctx: AddEmitterContext) => void;
    enterServiceName?: (ctx: ServiceNameContext) => void;
    exitServiceName?: (ctx: ServiceNameContext) => void;
    enterServiceConstructor?: (ctx: ServiceConstructorContext) => void;
    exitServiceConstructor?: (ctx: ServiceConstructorContext) => void;
    enterServiceConstructorPair?: (ctx: ServiceConstructorPairContext) => void;
    exitServiceConstructorPair?: (ctx: ServiceConstructorPairContext) => void;
    enterRequestServiceEvents?: (ctx: RequestServiceEventsContext) => void;
    exitRequestServiceEvents?: (ctx: RequestServiceEventsContext) => void;
    enterEventRegistration?: (ctx: EventRegistrationContext) => void;
    exitEventRegistration?: (ctx: EventRegistrationContext) => void;
    enterEvents?: (ctx: EventsContext) => void;
    exitEvents?: (ctx: EventsContext) => void;
    enterListenerMethodName?: (ctx: ListenerMethodNameContext) => void;
    exitListenerMethodName?: (ctx: ListenerMethodNameContext) => void;
    enterListenerMethod?: (ctx: ListenerMethodContext) => void;
    exitListenerMethod?: (ctx: ListenerMethodContext) => void;
    enterListenerBody?: (ctx: ListenerBodyContext) => void;
    exitListenerBody?: (ctx: ListenerBodyContext) => void;
    enterEnvvar?: (ctx: EnvvarContext) => void;
    exitEnvvar?: (ctx: EnvvarContext) => void;
    enterPath?: (ctx: PathContext) => void;
    exitPath?: (ctx: PathContext) => void;
}
