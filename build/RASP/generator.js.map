{"version":3,"sources":["RASP/generator.ts"],"names":[],"mappings":";;AAAA,uCAA+D;AAC/D,iDAA8C;AAC9C,mDAAsE;AAEtE,mEAAgE;AAIhE,kDAA+C;AAC/C,4BAA4B;AAM5B,MAAM,UAAU,GAAkB,EAAE,CAAC;AAErC;IAAA;QAEI,uBAAkB,GAAG,CAAC,CAAC,OAAO,CAAC,iBAAO,CAAC,kBAAkB,EAAE,CAAC,EAAE,UAAU,CAAC,CAAC;QAC1E,sBAAiB,GAAG,CAAC,CAAC,OAAO,CAAC,iBAAO,CAAC,iBAAiB,EAAE,CAAC,EAAE,UAAU,CAAC,CAAC;IAC5E,CAAC;CAAA;AAGD,IAAI,WAAW,GAAG,IAAI,2BAAgB,CAAC;;CAEtC,CAAC,CAAC;AACH,IAAI,KAAK,GAAG,IAAI,qBAAS,CAAC,WAAW,CAAC,CAAC;AACvC,IAAI,WAAW,GAAG,IAAI,4BAAiB,CAAC,KAAK,CAAC,CAAC;AAC/C,IAAI,MAAM,GAAG,IAAI,uBAAU,CAAC,WAAW,CAAC,CAAC;AACzC,MAAM,CAAC,cAAc,GAAG,IAAI,CAAC;AAG7B,IAAI,IAAI,GAAG,MAAM,CAAC,IAAI,EAAE,CAAC;AACzB,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,YAAY,EAAE,CAAC,CAAC;AACjC,MAAM,QAAQ,GAAG,IAAI,iBAAiB,EAAE,CAAC;AACzC,iCAAe,CAAC,OAAO,CAAC,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAC;AAC7C,OAAO,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC","file":"generator.js","sourcesContent":["import { ANTLRInputStream, CommonTokenStream } from 'antlr4ts';\nimport { RASPLexer } from './Antlr/RASPLexer';\nimport { RASPParser, BotDefinitionContext } from './Antlr/RASPParser';\nimport { RASPListener } from './Antlr/RASPListener';\nimport { ParseTreeWalker } from 'antlr4ts/tree/ParseTreeWalker';\n//import { ParserRuleContext } from 'antlr4ts/ParserRuleContext';\n//import { ParseTreeListener } from 'antlr4ts/tree/ParseTreeListener';\n//import { RuleNode } from 'antlr4ts/tree/RuleNode';\nimport { ProcBot } from '../framework/procbot';\nimport * as _ from 'lodash';\n\ninterface BotDefinition {\n    botName: string;\n}\n\nconst definition: BotDefinition = {};\n\nclass TreeShapeListener implements RASPListener {\n\n    enterBotDefinition = _.partial(ProcBot.enterBotDefinition, _, definition);\n    exitBotDefinition = _.partial(ProcBot.exitBotDefinition, _, definition);\n}\n\n// Create the lexer and parser\nlet inputStream = new ANTLRInputStream(`\nbot(Hello) { AddListener(github, { appId: hello, appId: goodbye}); }\n`);\nlet lexer = new RASPLexer(inputStream);\nlet tokenStream = new CommonTokenStream(lexer);\nlet parser = new RASPParser(tokenStream);\nparser.buildParseTree = true;\n\n// Parse the input, where `compilationUnit` is whatever entry point you defined\nlet tree = parser.init();\nconsole.log(tree.toStringTree());\nconst listener = new TreeShapeListener();\nParseTreeWalker.DEFAULT.walk(listener, tree);\nconsole.log(definition);\n"],"sourceRoot":"../../lib"}