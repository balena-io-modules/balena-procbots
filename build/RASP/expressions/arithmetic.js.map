{"version":3,"sources":["RASP/expressions/arithmetic.ts"],"names":[],"mappings":";;AAKA;IAMQ,WAAW,CAAC,IAAgB;QAElC,OAAO,CAAC,GAAG,CAAC,+BAA+B,CAAC,CAAC;QAC7C,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;QAClB,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC;YACtB,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC;QACxB,CAAC;QAAC,IAAI,CAAC,CAAC;YACP,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC;QACxB,CAAC;IACF,CAAC;CACD;AAhBD,sEAgBC","file":"arithmetic.js","sourcesContent":["import * as _ from 'lodash';\nimport { ExprContext } from '../Antlr/RASPParser';\nimport { ArithmeticExpression, BotDetails, Expression, ExpressionOp } from '../parser-types';\nimport { ExtRASPListener } from '../parser';\n\nexport class ArithmeticExpressionGenerator implements ArithmeticExpression {\n\tpublic type: ExpressionOp.Add | ExpressionOp.Subtract | ExpressionOp.Multiply | ExpressionOp.Divide;\n\tpublic parent: Expression | undefined;\n\tpublic operandOne: Expression;\n\tpublic operandTwo: Expression;\n\n\tpublic assignChild(expr: Expression): void {\n\t\t// Shove it onto one of the operands.\n\t\tconsole.log('this is an operand expression');\n\t\tconsole.log(expr);\n\t\tif (!this.operandOne) {\n\t\t\tthis.operandOne = expr;\n\t\t} else {\n\t\t\tthis.operandTwo = expr;\n\t\t}\n\t}\n}\n"],"sourceRoot":"../../../lib"}