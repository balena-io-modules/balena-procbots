{"version":3,"sources":["RASP/expressions/variable.ts"],"names":[],"mappings":";;AAAA,4BAA4B;AAK5B;IAAA;QACW,SAAI,KAAgD;IAyC/D,CAAC;IApCU,MAAM,CAAC,aAAa,CAAC,GAAoB,EAAE,YAAwB;QAGtE,MAAM,YAAY,GAAG,IAAI,2BAA2B,EAAE,CAAC;QACvD,YAAY,CAAC,MAAM,GAAG,YAAY,CAAC,iBAAiB,CAAC;QAKrD,YAAY,CAAC,IAAI,GAAG,EAAE,CAAC;QACvB,IAAI,SAAS,GAAG,IAAI,CAAC;QACrB,GAAG,CAAC,CAAC,IAAI,IAAI,IAAI,GAAG,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;YACxB,EAAE,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC;gBACb,YAAY,CAAC,IAAI,IAAI,GAAG,CAAC;YAC7B,CAAC;YACD,SAAS,GAAG,KAAK,CAAC;YAClB,YAAY,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,CAAC;QACnC,CAAC;QAED,YAAY,CAAC,iBAAiB,GAAG,YAAY,CAAC;IAClD,CAAC;IAEM,MAAM,CAAC,YAAY,CAAC,GAAoB,EAAE,YAAwB;QACrE,EAAE,CAAC,CAAC,YAAY,CAAC,iBAAiB,CAAC,CAAC,CAAC;YACjC,MAAM,MAAM,GAAG,YAAY,CAAC,iBAAiB,CAAC,MAAM,CAAC;YAErD,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC;gBACT,MAAM,CAAC,WAAW,CAAC,YAAY,CAAC,iBAAiB,CAAC,CAAC;gBACnD,YAAY,CAAC,iBAAiB,GAAG,MAAM,CAAC;YAC5C,CAAC;QACL,CAAC;IACL,CAAC;IAEM,WAAW,CAAC,IAAgB;QAC/B,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC;IACtB,CAAC;CACJ;AA1CD,kEA0CC;AAED,4BAAmC,QAAyB,EAAE,UAAsB;IAChF,QAAQ,CAAC,eAAe,CAAC,GAAG,CAAC,CAAC,OAAO,CAAC,2BAA2B,CAAC,aAAa,EAAE,CAAC,EAAE,UAAU,CAAC,CAAC;IAChG,QAAQ,CAAC,cAAc,CAAC,GAAG,CAAC,CAAC,OAAO,CAAC,2BAA2B,CAAC,YAAY,EAAE,CAAC,EAAE,UAAU,CAAC,CAAC;AAClG,CAAC;AAHD,gDAGC","file":"variable.js","sourcesContent":["import * as _ from 'lodash';\nimport { VariableContext } from '../Antlr/RASPParser';\nimport { BotDetails, Expression, ExpressionOp, VariableExpression } from '../parser-types';\nimport { ExtRASPListener } from '../parser';\n\nexport class VariableExpressionGenerator implements VariableExpression {\n    public type: ExpressionOp.Variable = ExpressionOp.Variable;\n    public name: string;\n    public value: Expression;\n    public parent: Expression | undefined;\n\n    public static enterVariable(ctx: VariableContext, botStructure: BotDetails): void {\n        // Create a new Object Expression, set its parent, and then ensure the current\n        // parsed expression is this.\n        const variableExpr = new VariableExpressionGenerator();\n        variableExpr.parent = botStructure.currentExpression;\n\n        // Get the full variable name.\n        // If this were an object, we'd check that it were in context here.\n        // TBD.\n        variableExpr.name = '';\n        let firstPart = true;\n        for (let part of ctx.ID()) {\n            if (!firstPart) {\n                variableExpr.name += '.';\n            }\n            firstPart = false;\n            variableExpr.name += part.text;\n        }\n\n        botStructure.currentExpression = variableExpr;\n    }\n\n    public static exitVariable(ctx: VariableContext, botStructure: BotDetails): void {\n        if (botStructure.currentExpression) {\n            const parent = botStructure.currentExpression.parent;\n            // Assign to parent, or leave it as we're at the top of the stack.\n            if (parent) {\n                parent.assignChild(botStructure.currentExpression);\n                botStructure.currentExpression = parent;\n            }\n        }\n    }\n\n    public assignChild(expr: Expression): void {\n        this.value = expr;\n    }\n}\n\nexport function addListenerMethods(listener: ExtRASPListener, definition: BotDetails): void {\n    listener['enterVariable'] = _.partial(VariableExpressionGenerator.enterVariable, _, definition);\n    listener['exitVariable'] = _.partial(VariableExpressionGenerator.exitVariable, _, definition);\n}"],"sourceRoot":"../../../lib"}