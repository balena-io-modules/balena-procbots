{"version":3,"sources":["RASP/expressions/array.ts"],"names":[],"mappings":";;AAAA,4BAA4B;AAK5B;IAAA;QACW,SAAI,KAA0C;QAE9C,WAAM,GAAiB,EAAE,CAAC;IAgCrC,CAAC;IA7BU,MAAM,CAAC,UAAU,CAAC,GAAiB,EAAE,YAAwB;QAGhE,MAAM,SAAS,GAAG,IAAI,wBAAwB,EAAE,CAAC;QACjD,SAAS,CAAC,MAAM,GAAG,YAAY,CAAC,iBAAiB,CAAC;QAGlD,MAAM,SAAS,GAAG,GAAG,CAAC,EAAE,EAAE,CAAC;QAC3B,EAAE,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC;YACZ,SAAS,CAAC,IAAI,GAAG,SAAS,CAAC,IAAI,CAAC;QACpC,CAAC;QAED,YAAY,CAAC,iBAAiB,GAAG,SAAS,CAAC;IAC/C,CAAC;IAEM,MAAM,CAAC,SAAS,CAAC,GAAiB,EAAE,YAAwB;QAC/D,EAAE,CAAC,CAAC,YAAY,CAAC,iBAAiB,CAAC,CAAC,CAAC;YACjC,MAAM,MAAM,GAAG,YAAY,CAAC,iBAAiB,CAAC,MAAM,CAAC;YAErD,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC;gBACT,MAAM,CAAC,WAAW,CAAC,YAAY,CAAC,iBAAiB,CAAC,CAAC;gBACnD,YAAY,CAAC,iBAAiB,GAAG,MAAM,CAAC;YAC5C,CAAC;QACL,CAAC;IACL,CAAC;IAEM,WAAW,CAAC,IAAgB;QAC/B,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IAC3B,CAAC;CACJ;AAnCD,4DAmCC;AAED,4BAAmC,QAAyB,EAAE,UAAsB;IAChF,QAAQ,CAAC,YAAY,CAAC,GAAG,CAAC,CAAC,OAAO,CAAC,wBAAwB,CAAC,UAAU,EAAE,CAAC,EAAE,UAAU,CAAC,CAAC;IACvF,QAAQ,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC,OAAO,CAAC,wBAAwB,CAAC,SAAS,EAAE,CAAC,EAAE,UAAU,CAAC,CAAC;AACzF,CAAC;AAHD,gDAGC","file":"array.js","sourcesContent":["import * as _ from 'lodash';\nimport { ArrayContext } from '../Antlr/RASPParser';\nimport { BotDetails, Expression, ExpressionOp, ArrayExpression } from '../parser-types';\nimport { ExtRASPListener } from '../parser';\n\nexport class ArrayExpressionGenerator implements ArrayExpression {\n    public type: ExpressionOp.Array = ExpressionOp.Array;\n    public name: string;\n    public values: Expression[] = [];\n    public parent: Expression | undefined;\n\n    public static enterArray(ctx: ArrayContext, botStructure: BotDetails): void {\n        // Create a new Array Expression, set its parent, and then ensure the current\n        // parsed expression is this.\n        const arrayExpr = new ArrayExpressionGenerator();\n        arrayExpr.parent = botStructure.currentExpression;\n\n        // Get the Array name if there is one.\n        const arrayName = ctx.ID();\n        if (arrayName) {\n            arrayExpr.name = arrayName.text;\n        }\n\n        botStructure.currentExpression = arrayExpr;\n    }\n\n    public static exitArray(ctx: ArrayContext, botStructure: BotDetails): void {\n        if (botStructure.currentExpression) {\n            const parent = botStructure.currentExpression.parent;\n            // Either assign current to parent.\n            if (parent) {\n                parent.assignChild(botStructure.currentExpression);\n                botStructure.currentExpression = parent;\n            }\n        }\n    }\n\n    public assignChild(expr: Expression): void {\n        this.values.push(expr);\n    }\n}\n\nexport function addListenerMethods(listener: ExtRASPListener, definition: BotDetails): void {\n    listener['enterArray'] = _.partial(ArrayExpressionGenerator.enterArray, _, definition);\n    listener['exitArray'] = _.partial(ArrayExpressionGenerator.exitArray, _, definition);\n}"],"sourceRoot":"../../../lib"}