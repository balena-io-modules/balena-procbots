{"version":3,"sources":["RASP/expressions/property.ts"],"names":[],"mappings":";;AAAA,4BAA4B;AAK5B;IAAA;QACQ,SAAI,KAAgD;IAkC5D,CAAC;IA7BO,MAAM,CAAC,aAAa,CAAC,GAAoB,EAAE,YAAwB;QAGzE,MAAM,QAAQ,GAAG,IAAI,2BAA2B,EAAE,CAAC;QACnD,QAAQ,CAAC,MAAM,GAAG,YAAY,CAAC,iBAAiB,CAAC;QAGjD,QAAQ,CAAC,IAAI,GAAG,GAAG,CAAC,EAAE,EAAE,CAAC,IAAI,CAAC;QAE9B,YAAY,CAAC,iBAAiB,GAAG,QAAQ,CAAC;IAC3C,CAAC;IAEM,MAAM,CAAC,YAAY,CAAC,GAAoB,EAAE,YAAwB;QACxE,EAAE,CAAC,CAAC,YAAY,CAAC,iBAAiB,CAAC,CAAC,CAAC;YACpC,MAAM,MAAM,GAAG,YAAY,CAAC,iBAAiB,CAAC,MAAM,CAAC;YAErD,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC;gBACZ,MAAM,CAAC,WAAW,CAAC,YAAY,CAAC,iBAAiB,CAAC,CAAC;gBACnD,YAAY,CAAC,iBAAiB,GAAG,MAAM,CAAC;YACzC,CAAC;YAAC,IAAI,CAAC,CAAC;gBAEP,YAAY,CAAC,iBAAiB,GAAG,SAAS,CAAC;YAC5C,CAAC;QACF,CAAC;IACF,CAAC;IAEM,WAAW,CAAC,IAAgB;QAClC,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC;IACnB,CAAC;CACD;AAnCD,kEAmCC;AAED,4BAAmC,QAAyB,EAAE,UAAsB;IACnF,QAAQ,CAAC,eAAe,CAAC,GAAG,CAAC,CAAC,OAAO,CAAC,2BAA2B,CAAC,aAAa,EAAE,CAAC,EAAE,UAAU,CAAC,CAAC;IAChG,QAAQ,CAAC,cAAc,CAAC,GAAG,CAAC,CAAC,OAAO,CAAC,2BAA2B,CAAC,YAAY,EAAE,CAAC,EAAE,UAAU,CAAC,CAAC;AAC/F,CAAC;AAHD,gDAGC","file":"property.js","sourcesContent":["import * as _ from 'lodash';\nimport { PropertyContext } from '../Antlr/RASPParser';\nimport { BotDetails, Expression, ExpressionOp, PropertyExpression } from '../parser-types';\nimport { ExtRASPListener } from '../parser';\n\nexport class PropertyExpressionGenerator implements PropertyExpression {\n\tpublic type: ExpressionOp.Property = ExpressionOp.Property;\n\tpublic name: string;\n\tpublic value: Expression;\n\tpublic parent: Expression | undefined;\n\n\tpublic static enterProperty(ctx: PropertyContext, botStructure: BotDetails): void {\n\t\t// Create a new Object Expression, set its parent, and then ensure the current\n\t\t// parsed expression is this.\n\t\tconst propExpr = new PropertyExpressionGenerator();\n\t\tpropExpr.parent = botStructure.currentExpression;\n\n\t\t// Get the property name.\n\t\tpropExpr.name = ctx.ID().text;\n\n\t\tbotStructure.currentExpression = propExpr;\n\t}\n\n\tpublic static exitProperty(ctx: PropertyContext, botStructure: BotDetails): void {\n\t\tif (botStructure.currentExpression) {\n\t\t\tconst parent = botStructure.currentExpression.parent;\n\t\t\t// Either assign current to parent.\n\t\t\tif (parent) {\n\t\t\t\tparent.assignChild(botStructure.currentExpression);\n\t\t\t\tbotStructure.currentExpression = parent;\n\t\t\t} else {\n\t\t\t\t// Or there's no more parent expressions.\n\t\t\t\tbotStructure.currentExpression = undefined;\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic assignChild(expr: Expression): void {\n\t\tthis.value = expr;\n\t}\n}\n\nexport function addListenerMethods(listener: ExtRASPListener, definition: BotDetails): void {\n\tlistener['enterProperty'] = _.partial(PropertyExpressionGenerator.enterProperty, _, definition);\n\tlistener['exitProperty'] = _.partial(PropertyExpressionGenerator.exitProperty, _, definition);\n}"],"sourceRoot":"../../../lib"}