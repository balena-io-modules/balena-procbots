{"version":3,"sources":["RASP/expressions/property.ts"],"names":[],"mappings":";;AAAA,4BAA4B;AAK5B;IAAA;QACW,SAAI,KAAgD;IAkC/D,CAAC;IA7BU,MAAM,CAAC,aAAa,CAAC,GAAoB,EAAE,YAAwB;QAGtE,MAAM,QAAQ,GAAG,IAAI,2BAA2B,EAAE,CAAC;QACnD,QAAQ,CAAC,MAAM,GAAG,YAAY,CAAC,iBAAiB,CAAC;QAGjD,QAAQ,CAAC,IAAI,GAAG,GAAG,CAAC,EAAE,EAAE,CAAC,IAAI,CAAC;QAE9B,YAAY,CAAC,iBAAiB,GAAG,QAAQ,CAAC;IAC9C,CAAC;IAEM,MAAM,CAAC,YAAY,CAAC,GAAoB,EAAE,YAAwB;QACrE,EAAE,CAAC,CAAC,YAAY,CAAC,iBAAiB,CAAC,CAAC,CAAC;YACjC,MAAM,MAAM,GAAG,YAAY,CAAC,iBAAiB,CAAC,MAAM,CAAC;YAErD,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC;gBACT,MAAM,CAAC,WAAW,CAAC,YAAY,CAAC,iBAAiB,CAAC,CAAC;gBACnD,YAAY,CAAC,iBAAiB,GAAG,MAAM,CAAC;YAC5C,CAAC;YAAC,IAAI,CAAC,CAAC;gBAEJ,YAAY,CAAC,iBAAiB,GAAG,SAAS,CAAC;YAC/C,CAAC;QACL,CAAC;IACL,CAAC;IAEM,WAAW,CAAC,IAAgB;QAC/B,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC;IACtB,CAAC;CACJ;AAnCD,kEAmCC;AAED,4BAAmC,QAAyB,EAAE,UAAsB;IAChF,QAAQ,CAAC,eAAe,CAAC,GAAG,CAAC,CAAC,OAAO,CAAC,2BAA2B,CAAC,aAAa,EAAE,CAAC,EAAE,UAAU,CAAC,CAAC;IAChG,QAAQ,CAAC,cAAc,CAAC,GAAG,CAAC,CAAC,OAAO,CAAC,2BAA2B,CAAC,YAAY,EAAE,CAAC,EAAE,UAAU,CAAC,CAAC;AAClG,CAAC;AAHD,gDAGC","file":"property.js","sourcesContent":["import * as _ from 'lodash';\nimport { PropertyContext } from '../Antlr/RASPParser';\nimport { BotDetails, Expression, ExpressionOp, PropertyExpression } from '../parser-types';\nimport { ExtRASPListener } from '../parser';\n\nexport class PropertyExpressionGenerator implements PropertyExpression {\n    public type: ExpressionOp.Property = ExpressionOp.Property;\n    public name: string;\n    public value: Expression;\n    public parent: Expression | undefined;\n\n    public static enterProperty(ctx: PropertyContext, botStructure: BotDetails): void {\n        // Create a new Object Expression, set its parent, and then ensure the current\n        // parsed expression is this.\n        const propExpr = new PropertyExpressionGenerator();\n        propExpr.parent = botStructure.currentExpression;\n\n        // Get the property name.\n        propExpr.name = ctx.ID().text;\n\n        botStructure.currentExpression = propExpr;\n    }\n\n    public static exitProperty(ctx: PropertyContext, botStructure: BotDetails): void {\n        if (botStructure.currentExpression) {\n            const parent = botStructure.currentExpression.parent;\n            // Either assign current to parent.\n            if (parent) {\n                parent.assignChild(botStructure.currentExpression);\n                botStructure.currentExpression = parent;\n            } else {\n                // Or there's no more parent expressions.\n                botStructure.currentExpression = undefined;\n            }\n        }\n    }\n\n    public assignChild(expr: Expression): void {\n        this.value = expr;\n    }\n}\n\nexport function addListenerMethods(listener: ExtRASPListener, definition: BotDetails): void {\n    listener['enterProperty'] = _.partial(PropertyExpressionGenerator.enterProperty, _, definition);\n    listener['exitProperty'] = _.partial(PropertyExpressionGenerator.exitProperty, _, definition);\n}"],"sourceRoot":"../../../lib"}