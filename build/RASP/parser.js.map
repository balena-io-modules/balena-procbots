{"version":3,"sources":["RASP/parser.ts"],"names":[],"mappings":";;AAAA,uCAAkF;AAClF,iDAA8C;AAC9C,mDAA6E;AAE7E,mEAAgE;AAKhE,iDAAuD;AACvD,gDAAsD;AACtD,4BAA4B;AAC5B,yBAAyB;AAEzB,MAAM,UAAU,GAAe,EAAE,CAAC;AAElC;IAAA;QACI,uBAAkB,GAAG,CAAC,CAAC,OAAO,CAAC,0BAAgB,CAAC,kBAAkB,EAAE,CAAC,EAAE,UAAU,CAAC,CAAC;QACnF,sBAAiB,GAAG,CAAC,CAAC,OAAO,CAAC,0BAAgB,CAAC,iBAAiB,EAAE,CAAC,EAAE,UAAU,CAAC,CAAC;QAEjF,qBAAgB,GAAG,CAAC,CAAC,OAAO,CAAC,0BAAgB,CAAC,eAAe,EAAE,CAAC,EAAE,UAAU,CAAC,CAAC;QAC9E,oBAAe,GAAG,CAAC,CAAC,OAAO,CAAC,0BAAgB,CAAC,cAAc,EAAE,CAAC,EAAE,UAAU,CAAC,CAAC;QAC5E,oBAAe,GAAG,CAAC,CAAC,OAAO,CAAC,0BAAgB,CAAC,eAAe,EAAE,CAAC,EAAE,UAAU,CAAC,CAAC;QAC7E,mBAAc,GAAG,CAAC,CAAC,OAAO,CAAC,0BAAgB,CAAC,cAAc,EAAE,CAAC,EAAE,UAAU,CAAC,CAAC;QAC3E,qBAAgB,GAAG,CAAC,CAAC,OAAO,CAAC,0BAAgB,CAAC,gBAAgB,EAAE,CAAC,EAAE,UAAU,CAAC,CAAC;QAE/E,4BAAuB,GAAG,CAAC,CAAC,OAAO,CAAC,0BAAgB,CAAC,uBAAuB,EAAE,CAAC,EAAE,UAAU,CAAC,CAAC;QAC7F,gCAA2B,GAAG,CAAC,CAAC,OAAO,CAAC,0BAAgB,CAAC,2BAA2B,EAAE,CAAC,EAAE,UAAU,CAAC,CAAC;IAKzG,CAAC;IAHG,kBAAkB,CAAC,GAAgC;QAC/C,OAAO,CAAC,GAAG,CAAC,eAAe,CAAC,CAAC;IACjC,CAAC;CACJ;AAGD,MAAM,QAAQ,GAAG,EAAE,CAAC,YAAY,CAAC,0CAA0C,EAAE,EAAE,QAAQ,EAAE,MAAM,EAAE,CAAC,CAAC;AACnG,MAAM,WAAW,GAAG,IAAI,2BAAgB,CAAC,QAAQ,CAAC,CAAC;AAEnD,IAAI,KAAK,GAAG,IAAI,qBAAS,CAAC,WAAW,CAAC,CAAC;AACvC,IAAI,WAAW,GAAG,IAAI,4BAAiB,CAAC,KAAK,CAAC,CAAC;AAC/C,IAAI,MAAM,GAAG,IAAI,uBAAU,CAAC,WAAW,CAAC,CAAC;AACzC,MAAM,CAAC,cAAc,GAAG,IAAI,CAAC;AAC7B,MAAM,CAAC,YAAY,GAAG,IAAI,4BAAiB,EAAE,CAAC;AAG9C,IAAI,IAAI,GAAG,MAAM,CAAC,IAAI,EAAE,CAAC;AACzB,MAAM,QAAQ,GAAG,IAAI,iBAAiB,EAAE,CAAC;AACzC,iCAAe,CAAC,OAAO,CAAC,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAC;AAC7C,OAAO,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC","file":"parser.js","sourcesContent":["import { ANTLRInputStream, CommonTokenStream, BailErrorStrategy } from 'antlr4ts';\nimport { RASPLexer } from './Antlr/RASPLexer';\nimport { RASPParser, RequestServiceEventsContext } from './Antlr/RASPParser';\nimport { RASPListener } from './Antlr/RASPListener';\nimport { ParseTreeWalker } from 'antlr4ts/tree/ParseTreeWalker';\n//import { ParserRuleContext } from 'antlr4ts/ParserRuleContext';\n//import { ParseTreeListener } from 'antlr4ts/tree/ParseTreeListener';\n//import { RuleNode } from 'antlr4ts/tree/RuleNode';\nimport { BotDetails } from './parser-types';\nimport { ProcBotGenerator } from './framework/procbot';\nimport { ServiceGenerator } from './services/service';\nimport * as _ from 'lodash';\nimport * as fs from 'fs';\n\nconst definition: BotDetails = {};\n\nclass TreeShapeListener implements RASPListener {\n    enterBotDefinition = _.partial(ProcBotGenerator.enterBotDefinition, _, definition);\n    exitBotDefinition = _.partial(ProcBotGenerator.exitBotDefinition, _, definition);\n    \n    enterAddListener = _.partial(ServiceGenerator.enterAddService, _, definition);\n    exitAddListener = _.partial(ServiceGenerator.exitAddService, _, definition);\n    enterAddEmitter = _.partial(ServiceGenerator.enterAddService, _, definition);\n    exitAddEmitter = _.partial(ServiceGenerator.exitAddService, _, definition);\n    enterServiceName = _.partial(ServiceGenerator.enterServiceName, _, definition);\n\n    enterServiceConstructor = _.partial(ServiceGenerator.enterServiceConstructor, _, definition);\n    enterServiceConstructorPair = _.partial(ServiceGenerator.enterServiceConstructorPair, _, definition);\n\n    enterRequestEvents(ctx: RequestServiceEventsContext) {\n        console.log('enter request');\n    }\n}\n\n// Create the lexer and parser\nconst fileData = fs.readFileSync('/Work/git/resin-procbots/fortunebot.rasp', { encoding: 'utf8' });\nconst inputStream = new ANTLRInputStream(fileData);\n\nlet lexer = new RASPLexer(inputStream);\nlet tokenStream = new CommonTokenStream(lexer);\nlet parser = new RASPParser(tokenStream);\nparser.buildParseTree = true;\nparser.errorHandler = new BailErrorStrategy();\n\n// Parse the input, where `compilationUnit` is whatever entry point you defined\nlet tree = parser.init();\nconst listener = new TreeShapeListener();\nParseTreeWalker.DEFAULT.walk(listener, tree);\nconsole.log(definition);\n"],"sourceRoot":"../../lib"}