{"version":3,"sources":["githubbot.ts"],"names":[],"mappings":"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","file":"githubbot.js","sourcesContent":["/*\nCopyright 2016 Resin.io\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n   http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\n// The GithubBot is a generic class that any bot that wishes to execute\n// based on Github webhooks can be extended upon.\n// It deals with:\n//  * Handling the scheduling of bot workers for each unique repo\n//  * Adding and removing workers/events as they fire/finalise\n//  * Error/Information logging to known endpoints (TBD)\n//  * Dealing with order of precedence (TBD)\n//\n// The latter may be important for some updates back to Github,\n// so we ensure that if a bot needs to be run after another,\n// if that bot is also running, it's ensured that this occurs.\n\nimport * as ProcBot from './procbot';\nimport * as Promise from 'bluebird';\nimport * as _ from 'lodash';\nimport * as fs from 'fs';\n\nconst GithubApi = require('github');\nconst hmac = require('crypto');\nconst githubHooks = require('github-webhook-handler');\nconst jwt = require('jsonwebtoken');\nconst request: any = Promise.promisifyAll(require('request'));\n\n// GithubBot ---------------------------------------------------------------------------\n\n// Main GithubBot.\nexport class GithubBot extends ProcBot.ProcBot<string> {\n\t// Github API\n    private integrationId: number;\n    private jwt: string;\n    private user: number;\n    private token: string;\n    protected githubApi: any;\n\n    // Takes a set of webhook types that the bot is interested in.\n    constructor(integration: number) {\n        super();\n\t\tthis._botname = 'GithubBot';\n        this.integrationId = integration;\n\n        // The getWorker method is an overload for generic context types.\n        // In the case of the GithubBot, it's the name of the repo (a string).\n        this.getWorker = (event: ProcBot.BotEvent): ProcBot.Worker<string> => {\n            const context = event.data.repository.full_name;\n            let worker: ProcBot.Worker<string> | undefined = this.workers.get(context);\n\n            // If we already have a worker for this context (the repo name), return it.\n            if (worker) {\n                return worker;\n            }\n\n            // Create new Worker using the repo name as context.\n            worker = new ProcBot.Worker(context, this.workers);\n\n            // Note that workers are self-regualting; that is, they will remove themselves\n            // from the Map once there are no more queued tasks.\n            this.workers.set(context, worker);\n\n            return worker;\n        };\n\n        // The `github` module is a bit behind the preview API. We may have to override\n        // some of the methods here (PR review comments for a start).\n        this.githubApi = new GithubApi({\n            //debug: true,\n            protocol: 'https',\n            host: 'api.github.com',\n            headers: {\n                // This is the current voodoo to allow all API calls to succeed.\n                'Accept': 'application/vnd.github.black-cat-preview+json'\n            },\n            Promise: Promise,\n            timeout: 5000\n        });\n    }\n\n    // Not a pure virtual, but not callable directly from GithubBot.\n    public firedEvent(event: string, repoEvent: any): void {\n        console.log('This method should not be called directly.');\n    }\n\n    // If user is passed, then the Integration is authenticating as a installation user\n    protected authenticate(user?: number): Promise<void> {\n        // Initialise JWTs\n        const privatePem = new Buffer(process.env.PROCBOTS_PEM, 'base64').toString();\n\n        const payload = {\n            iat: Math.floor((Date.now() / 1000)),\n            exp: Math.floor((Date.now() / 1000)) + (10 * 60),\n            iss: this.integrationId\n        };\n\n        const jwToken = jwt.sign(payload, privatePem, { algorithm: 'RS256' });\n        const installationsOpts = {\n            url: 'https://api.github.com/integration/installations',\n            headers: {\n                'Authorization': `Bearer ${jwToken}`,\n                'Accept': 'application/vnd.github.machine-man-preview+json',\n                'User-Agent': 'request'\n            },\n            json: true\n        };\n\n        if (user) {\n            this.user = user;\n        }\n        return request.getAsync(installationsOpts).then((res: any) => {\n            // Get the URL for the token.\n            const installations: any[] = res.body;\n            const tokenUrl = installations[0].access_tokens_url;\n\n            // Request new token.\n            //\n            // Whilst I don't think it does, because of the way the docs are written:\n            // This may need to change when more than one repo can be used by the integration.\n            // What needs to happen here is each separate repository needs its own version of the\n            // 'github' API so that the token matches it correctly.\n            // As we have a slot for every repo in the Repo, it means that for each RepoWorker\n            // we need to Authenticate. So we move this from GithubBot to RepoWorker constructor.\n            // Then, every time we see a new repo we authenticate to the correct one.\n            // The docs are not very clear about this.\n            const tokenOpts: any = {\n                url: tokenUrl,\n                method: 'POST',\n                headers: {\n                    'Authorization': `Bearer ${jwToken}`,\n                    'Accept': 'application/vnd.github.machine-man-preview+json',\n                    'User-Agent': 'request'\n                },\n                json: true\n            };\n            if (user) {\n                tokenOpts.body = { user_id: user };\n            }\n\n            return request.postAsync(tokenOpts);\n        }).then((res: any) => {\n            // We also need to take into account the expiry date, which will require a new kickoff.\n            const tokenDetails = res.body;\n\n            this.githubApi.authenticate({\n                type: 'token',\n                token: tokenDetails.token\n            });\n\n            // For debug.\n            console.log(`token for manual fiddling is: ${tokenDetails.token}`);\n            console.log('Base curl command:');\n            console.log(`curl -XGET -H \"Authorisation: token ${tokenDetails.token}\" -H \"Accept: application/vnd.github.black-cat-preview+json\" https://api.github.com/`)\n        });\n    }\n\n    // Make a 'github' API call. We explicitly wrap this so that any authentication error\n    // can result in re-authentication before moving on.\n    protected gitCall = (method: any, options: any, retries?: number): Promise<any> => {\n        let badCreds = false;\n        let retriesLeft: number = retries || 3;\n\n        // We need a new Promise here, as we might need to do retries.\n        return new Promise((resolve, reject) => {\n            const runApi = () => {\n                retriesLeft -= 1;\n\n                // Run the method.\n                return method(options).catch((err: Error) => {\n                    // We only try and reauthenticate once, else we throw.\n                    if ((err.message === 'Bad credentials') && !badCreds) {\n                        badCreds = true;\n                        // Re-authenticate, then try again.\n                        return runApi();\n                    } else if (retriesLeft === 0) {\n                        // No more retries, just reject.\n                        reject(err);\n                    } else {\n                        // If there's more retries, try again in 5 seconds.\n                        setTimeout(() => {\n                            runApi();\n                        }, 5000);\n                    }\n                }).then((data: any) => {\n                    // Hurrah, all data back safely.\n                    resolve(data);\n                });\n            };\n\n            // Kick it off.\n            runApi();\n        });\n    }\n}\n\n// Create a new GithubBot.\nexport function createBot(): GithubBot {\n    return new GithubBot(0);\n}"],"sourceRoot":"../lib"}