{"version":3,"sources":["bots/syncbot.ts"],"names":[],"mappings":"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","file":"syncbot.js","sourcesContent":["/*\nCopyright 2016-2017 Resin.io\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n   http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\nimport * as Promise from 'bluebird';\nimport * as _ from 'lodash';\nimport { ProcBot } from '../framework/procbot';\nimport { MessengerService } from '../services/messenger';\nimport {\n\tBasicMessageInformation, CreateThreadResponse, FlowDefinition,\n\tMessageListener, MessengerAction, MessengerEmitResponse,\n\tMessengerEvent, ThreadDefinition, TransmitInformation,\n} from '../services/messenger-types';\nimport { createDataHub, DataHub } from '../services/messenger/datahubs/datahub';\nimport { ServiceType } from '../services/service-types';\nimport { Logger, LogLevel } from '../utils/logger';\n\n/**\n * A bot that mirrors threads across services.\n */\nexport class SyncBot extends ProcBot {\n\t/**\n\t * Provide a method that:\n\t *  * Encloses details available in advance.\n\t *  * Reacts to details provided by each event.\n\t * @param from       Definition, {service, flow}, of the flow being listened to.\n\t * @param to         Definition {service, flow} of the flow being emitted to.\n\t * @param messenger  Service to use to interact with the cloud.\n\t * @param logger     Logger to use to interact with the maintainers.\n\t * @returns          Function that processes events from the messenger.\n\t */\n\tprivate static makeRouter(\n\t\tfrom: FlowDefinition, to: FlowDefinition, messenger: MessengerService, logger: Logger\n\t): MessageListener {\n\t\t// This method returns a method that in turn processes events.\n\t\treturn (_registration, event: MessengerEvent) => {\n\t\t\tconst data = event.cookedEvent;\n\t\t\t// Check that the event is one we want to synchronise.\n\t\t\tif (\n\t\t\t\tfrom.service === data.source.service &&\n\t\t\t\tfrom.flow === data.source.flow &&\n\t\t\t\t!_.includes(['system', to.service], data.details.genesis)\n\t\t\t) {\n\t\t\t\t// Log that we received this event.\n\t\t\t\tconst text = data.details.text;\n\t\t\t\tlogger.log(LogLevel.INFO, `---> Heard '${text}' on ${from.service}.`);\n\t\t\t\t// Find details of any connections stored in the originating thread.\n\t\t\t\treturn SyncBot.readConnectedThread(to, messenger, data)\n\t\t\t\t// Then comment on or create a thread\n\t\t\t\t.then((threadDetails: MessengerEmitResponse) => {\n\t\t\t\t\t// If the search resolved with a response.\n\t\t\t\t\tconst threadId = _.get(threadDetails, 'response.thread', false);\n\t\t\t\t\tif (threadId) {\n\t\t\t\t\t\t// Comment on the found thread\n\t\t\t\t\t\treturn SyncBot.createComment({\n\t\t\t\t\t\t\tservice: to.service, flow: to.flow, thread: threadId,\n\t\t\t\t\t\t}, messenger, data)\n\t\t\t\t\t\t// Pass through details of the thread updated\n\t\t\t\t\t\t.then((emitResponse) => {\n\t\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\tresponse: {\n\t\t\t\t\t\t\t\t\tthread: threadId,\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tsource: emitResponse.source,\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t\t// Create a thread if the quest for connections didn't find any\n\t\t\t\t\treturn SyncBot.createThreadAndConnect(to, messenger, data);\n\t\t\t\t})\n\t\t\t\t// Then update the tags on the thread\n\t\t\t\t.then((emitResponse: MessengerEmitResponse) => {\n\t\t\t\t\t// If the process this far resolved with a response\n\t\t\t\t\tconst threadId = _.get(emitResponse, 'response.thread', false);\n\t\t\t\t\tif (threadId && data.details.tags) {\n\t\t\t\t\t\t// Request that the tags be updated\n\t\t\t\t\t\treturn SyncBot.updateTags({\n\t\t\t\t\t\t\tservice: to.service,\n\t\t\t\t\t\t\tflow: to.flow,\n\t\t\t\t\t\t\tthread: threadId,\n\t\t\t\t\t\t}, messenger, data);\n\t\t\t\t\t}\n\t\t\t\t\treturn emitResponse;\n\t\t\t\t})\n\t\t\t\t// Then report that we have passed the message on\n\t\t\t\t.then(() => {\n\t\t\t\t\tlogger.log(LogLevel.INFO, `---> Emitted '${text}' to ${to.service}.`);\n\t\t\t\t});\n\t\t\t}\n\t\t\t// The event received doesn't match the profile being routed, so nothing is the correct action.\n\t\t\treturn Promise.resolve();\n\t\t};\n\t}\n\n\t/**\n\t * Pass to the messenger a request to update the tags.\n\t * @param  to         Definition {service, flow, thread} of the thread being emitted to.\n\t * @param  messenger  Service to use to interact with the cloud.\n\t * @param  data       Event that is being processed.\n\t * @returns           Promise to update the tags and respond with the threadId updated.\n\t */\n\tprivate static updateTags(\n\t\tto: ThreadDefinition, messenger: MessengerService, data: BasicMessageInformation\n\t): Promise<MessengerEmitResponse> {\n\t\t// Bundle a tag update request, it's mainly as per the `to` and `data` passed in.\n\t\tconst updateTags: TransmitInformation = {\n\t\t\taction: MessengerAction.UpdateTags,\n\t\t\tdetails: data.details,\n\t\t\tsource: data.source,\n\t\t\ttarget: {\n\t\t\t\tflow: to.flow,\n\t\t\t\tservice: to.service,\n\t\t\t\tthread: to.thread,\n\t\t\t\t// Perform this operation as the SyncBot user.\n\t\t\t\tusername: process.env.SYNCBOT_NAME,\n\t\t\t},\n\t\t};\n\t\t// Request that the payload created above be sent.\n\t\treturn messenger.sendData({\n\t\t\tcontexts: {\n\t\t\t\tmessenger: updateTags,\n\t\t\t},\n\t\t\tsource: 'syncbot',\n\t\t});\n\t}\n\n\t/**\n\t * Pass to the messenger a request to create a comment.\n\t * @param  to         Definition {service, flow, thread} of the thread being emitted to.\n\t * @param  messenger  Service to use to interact with the cloud.\n\t * @param  data       Event that is being processed.\n\t * @returns           Promise to create the comment and respond with the threadId updated.\n\t */\n\tprivate static createComment(\n\t\tto: ThreadDefinition, messenger: MessengerService, data: BasicMessageInformation\n\t): Promise<MessengerEmitResponse> {\n\t\t// Bundle a comment create request, it's a mixture of the `to` and `data` passed in.\n\t\tconst createComment: TransmitInformation = {\n\t\t\taction: MessengerAction.CreateMessage,\n\t\t\tdetails: data.details,\n\t\t\tsource: data.source,\n\t\t\ttarget: {\n\t\t\t\tflow: to.flow,\n\t\t\t\tservice: to.service,\n\t\t\t\tthread: to.thread,\n\t\t\t\tusername: data.source.username,\n\t\t\t},\n\t\t};\n\t\t// Request that the payload created above be sent.\n\t\treturn messenger.sendData({\n\t\t\tcontexts: {\n\t\t\t\tmessenger: createComment,\n\t\t\t},\n\t\t\tsource: 'syncbot',\n\t\t});\n\t}\n\n\t/**\n\t * Pass to the messenger a request to create a comment.\n\t * @param  to         Definition {service, flow, thread} of the thread being emitted to.\n\t * @param  messenger  Service to use to interact with the cloud.\n\t * @param  data       Event that is being processed.\n\t * @returns           Promise to create the comment and respond with the threadId updated.\n\t */\n\tprivate static readConnectedThread(\n\t\tto: FlowDefinition, messenger: MessengerService, data: BasicMessageInformation\n\t): Promise<MessengerEmitResponse> {\n\t\t// Bundle a read connection request, it's a bit weird compared to others in this file.\n\t\t// I've typed this here to split the union type earlier, and make error reports more useful.\n\t\tconst readConnection: TransmitInformation = {\n\t\t\taction: MessengerAction.ReadConnection,\n\t\t\tdetails: data.details,\n\t\t\t// If credential details are required then consult with the SyncBot user.\n\t\t\t// Most of `source` doesn't matter, except `service`.\n\t\t\tsource: {\n\t\t\t\tflow: to.flow,\n\t\t\t\tmessage: 'duff',\n\t\t\t\t// The service you wish to find a connection for.\n\t\t\t\tservice: to.service,\n\t\t\t\tthread: 'duff',\n\t\t\t\tusername: process.env.SYNCBOT_NAME,\n\t\t\t},\n\t\t\t// This feels paradoxical because the target of the read request ...\n\t\t\t// is the place the event came from.\n\t\t\ttarget: {\n\t\t\t\tflow: data.source.flow,\n\t\t\t\tservice: data.source.service,\n\t\t\t\tthread: data.source.thread,\n\t\t\t\tusername: process.env.SYNCBOT_NAME,\n\t\t\t},\n\t\t};\n\t\t// Request that the payload created above be sent, which will resolve to the threadId connected.\n\t\treturn messenger.sendData({\n\t\t\tcontexts: {\n\t\t\t\tmessenger: readConnection,\n\t\t\t},\n\t\t\tsource: 'syncbot',\n\t\t});\n\t}\n\n\t/**\n\t * Pass to the messenger requests to create a thread and connect.\n\t * @param  to         Definition {service, flow} of the flow being emitted to.\n\t * @param  messenger  Service to use to interact with the cloud.\n\t * @param  data       Event that is being processed.\n\t * @returns           Promise to create the thread and respond with the threadId.\n\t */\n\tprivate static createThreadAndConnect(\n\t\tto: FlowDefinition, messenger: MessengerService, data: BasicMessageInformation\n\t): Promise<MessengerEmitResponse> {\n\t\t// Bundle a thread creation request.\n\t\t// I've typed this here to split the union type earlier, and make error reports more useful.\n\t\tconst createThread: TransmitInformation = {\n\t\t\taction: MessengerAction.CreateThread,\n\t\t\tdetails: data.details,\n\t\t\tsource: data.source,\n\t\t\ttarget: {\n\t\t\t\tflow: to.flow,\n\t\t\t\tservice: to.service,\n\t\t\t\tusername: data.source.username,\n\t\t\t},\n\t\t};\n\t\t// Request that the payload created above be sent.\n\t\treturn messenger.sendData({\n\t\t\tcontexts: {\n\t\t\t\tmessenger: createThread,\n\t\t\t},\n\t\t\tsource: 'syncbot',\n\t\t}).then((emitResponse: MessengerEmitResponse) => {\n\t\t\t// Insist that the response from creating a thread is a CreateThreadResponse for typing.\n\t\t\tconst response = emitResponse.response as CreateThreadResponse;\n\t\t\t// Check that we actually got a correct resolution, not a promise that resolved with an error.\n\t\t\t// I've typed this here to split the union type earlier, and make error reports more useful.\n\t\t\tif (response) {\n\t\t\t\t// Bundle a payload that can be easily mutated to each of the source and target threads.\n\t\t\t\tconst genericConnect: TransmitInformation = {\n\t\t\t\t\t// #251 This could be .CreateConnection, and translated\n\t\t\t\t\taction: MessengerAction.CreateMessage,\n\t\t\t\t\t// A message object from the 'system'.\n\t\t\t\t\tdetails: {\n\t\t\t\t\t\tgenesis: 'system',\n\t\t\t\t\t\thandle: process.env.SYNCBOT_NAME,\n\t\t\t\t\t\thidden: true,\n\t\t\t\t\t\tinternal: true,\n\t\t\t\t\t\ttags: data.details.tags,\n\t\t\t\t\t\ttext: 'Connects to ', // will be appended\n\t\t\t\t\t\ttitle: data.details.title,\n\t\t\t\t\t},\n\t\t\t\t\t// this message is being created from nothing.\n\t\t\t\t\tsource: {\n\t\t\t\t\t\tmessage: 'duff',\n\t\t\t\t\t\tthread: 'duff',\n\t\t\t\t\t\tflow: 'duff',\n\t\t\t\t\t\tservice: 'system',\n\t\t\t\t\t\tusername: 'duff',\n\t\t\t\t\t},\n\t\t\t\t\ttarget: {\n\t\t\t\t\t\tflow: 'duff', // will be replaced\n\t\t\t\t\t\tservice: 'duff', // will be replaced\n\t\t\t\t\t\t// This is happening using SyncBot's credentials.\n\t\t\t\t\t\tusername: process.env.SYNCBOT_NAME,\n\t\t\t\t\t\tthread: 'duff' // will be replaced\n\t\t\t\t\t}\n\t\t\t\t};\n\n\t\t\t\t// Clone and mutate the generic payload for emitting to the originating thread.\n\t\t\t\tconst updateOriginating = _.cloneDeep(genericConnect);\n\t\t\t\t// This should update the thread that this process sourced from.\n\t\t\t\tupdateOriginating.target = {\n\t\t\t\t\tflow: data.source.flow,\n\t\t\t\t\tservice: data.source.service,\n\t\t\t\t\tusername: process.env.SYNCBOT_NAME,\n\t\t\t\t\tthread: data.source.thread,\n\t\t\t\t};\n\t\t\t\t// This connects to the thread detailed in the response from creating.\n\t\t\t\tupdateOriginating.details.text += `[${createThread.target.service} thread ${response.thread}](${response.url})`;\n\n\t\t\t\t// Clone and mutate the generic payload for emitting to the created thread.\n\t\t\t\tconst updateCreated = _.cloneDeep(genericConnect);\n\t\t\t\t// This should update the thread that this process created.\n\t\t\t\tupdateCreated.target = {\n\t\t\t\t\tflow: createThread.target.flow,\n\t\t\t\t\tservice: createThread.target.service,\n\t\t\t\t\tusername: process.env.SYNCBOT_NAME,\n\t\t\t\t\tthread: response.thread,\n\t\t\t\t};\n\t\t\t\t// This connects to the thread that this process sourced from.\n\t\t\t\tupdateCreated.details.text += `[${data.source.service} thread ${data.source.thread}](${data.source.url})`;\n\n\t\t\t\t// Request that the payloads created just above be sent.\n\t\t\t\treturn Promise.all([\n\t\t\t\t\tmessenger.sendData({contexts: {messenger: updateOriginating}, source: 'syncbot'}),\n\t\t\t\t\tmessenger.sendData({contexts: {messenger: updateCreated}, source: 'syncbot'}),\n\t\t\t\t]).return(emitResponse);\n\t\t\t}\n\t\t\t// If we failed to create a thread then just pass this back unmolested.\n\t\t\treturn Promise.resolve(emitResponse);\n\t\t});\n\t}\n\n\t/**\n\t * Consults the environment for configuration and returns an array of places to seek information.\n\t * @returns  Array of DataHub objects that may be interrogated.\n\t */\n\tprivate static makeDataHubs(): DataHub[] {\n\t\t// Created this as its own function to scope the `let` a little\n\t\tlet dataHubArray = [];\n\t\ttry {\n\t\t\tdataHubArray = JSON.parse(process.env.SYNCBOT_DATAHUB_CONSTRUCTORS);\n\t\t} catch (error) {\n\t\t\tthrow new Error('SYNCBOT_DATAHUB_CONSTRUCTORS not a valid JSON array.');\n\t\t}\n\n\t\tconst dataHubs = _.map(dataHubArray, (constructor, type: string) => {\n\t\t\treturn createDataHub(type, constructor);\n\t\t});\n\n\t\tif (dataHubs) {\n\t\t\treturn dataHubs;\n\t\t}\n\t\tthrow new Error('Could not create dataHubs.');\n\t}\n\n\t/**\n\t * Consults the environment for configuration to create a service that aggregates many other services.\n\t * @returns  Service that wraps and translates specified sub services.\n\t */\n\tprivate static makeMessenger(): MessengerService {\n\t\t// Created this as its own function to scope the `let` a little\n\t\tlet listenerConstructors = [];\n\t\ttry {\n\t\t\tlistenerConstructors = JSON.parse(process.env.SYNCBOT_LISTENER_CONSTRUCTORS);\n\t\t} catch (error) {\n\t\t\tthrow new Error('SYNCBOT_LISTENER_CONSTRUCTORS not a valid JSON array.');\n\t\t}\n\n\t\tconst messenger = new MessengerService({\n\t\t\tdataHubs: SyncBot.makeDataHubs(),\n\t\t\tserver: parseInt(process.env.SYNCBOT_PORT, 10),\n\t\t\tsubServices: listenerConstructors,\n\t\t\ttype: ServiceType.Listener,\n\t\t});\n\n\t\tif (messenger) {\n\t\t\treturn messenger;\n\t\t}\n\t\tthrow new Error('Could not create Messenger.');\n\t}\n\n\t/**\n\t * Consults the environment to find the equivalencies between flows.\n\t * @returns  Nested array, each top level array is an array of mirrored flows.\n\t */\n\tprivate static makeMappings(): FlowDefinition[][] {\n\t\t// Created this as its own function so the try/catch stay close together\n\t\t// The alternative would be a let in the super scope.\n\t\ttry {\n\t\t\treturn JSON.parse(process.env.SYNCBOT_MAPPINGS);\n\t\t} catch (error) {\n\t\t\tthrow new Error('SYNCBOT_MAPPINGS not a valid JSON array.');\n\t\t}\n\t}\n\n\tconstructor(name = 'SyncBot') {\n\t\tsuper(name);\n\t\tconst logger = new Logger();\n\t\tconst messenger = SyncBot.makeMessenger();\n\n\t\t// Go around all the mappings defined by the configuration.\n\t\tconst mappings = SyncBot.makeMappings();\n\t\tfor (const mapping of mappings) {\n\t\t\t// Keeping track of prior, so we can find each adjacent pair.\n\t\t\tlet priorFlow = null;\n\t\t\tfor (const focusFlow of mapping) {\n\t\t\t\tif (priorFlow) {\n\t\t\t\t\t// Register a mirroring from the first of the pair, to the second.\n\t\t\t\t\tmessenger.registerEvent({\n\t\t\t\t\t\tevents: ['message'],\n\t\t\t\t\t\tlistenerMethod: SyncBot.makeRouter(priorFlow, focusFlow, messenger, logger),\n\t\t\t\t\t\tname: `${priorFlow.service}.${priorFlow.flow}=>${focusFlow.service}.${focusFlow.flow}`,\n\t\t\t\t\t});\n\t\t\t\t\t// Register a mirroring from the second of the pair, to the first.\n\t\t\t\t\tmessenger.registerEvent({\n\t\t\t\t\t\tevents: ['message'],\n\t\t\t\t\t\tlistenerMethod: SyncBot.makeRouter(focusFlow, priorFlow, messenger, logger),\n\t\t\t\t\t\tname: `${focusFlow.service}.${focusFlow.flow}=>${priorFlow.service}.${priorFlow.flow}`,\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\tpriorFlow = focusFlow;\n\t\t\t}\n\t\t}\n\t}\n}\n\nexport function createBot(): SyncBot {\n\treturn new SyncBot(process.env.SYNCBOT_NAME);\n}\n"],"sourceRoot":"../../lib"}