<<<<<<< HEAD
<<<<<<< HEAD
{"version":3,"sources":["bots/keyframebot.ts"],"names":[],"mappings":"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","file":"keyframebot.js","sourcesContent":["/*\nCopyright 2016-2017 Resin.io\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n   http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n/* tslint:disable: max-classes-per-file */\nimport * as Promise from 'bluebird';\nimport * as bodyParser from 'body-parser';\nimport * as express from 'express';\nimport * as GithubApi from 'github';\nimport * as jwtDecode from 'jwt-decode';\nimport * as keyframeControl from 'keyfctl';\nimport * as _ from 'lodash';\nimport * as path from 'path';\nimport { cleanup, track } from 'temp';\nimport * as GithubApiTypes from '../apis/githubapi-types';\nimport { ProcBot } from '../framework/procbot';\nimport { GithubError, GithubService } from '../services/github';\nimport { GithubCookedData, GithubHandle, GithubRegistration } from '../services/github-types';\nimport { ServiceEvent } from '../services/service-types';\nimport { BuildCommand, ExecuteCommand } from '../utils/environment';\nimport { AlertLevel, LogLevel } from '../utils/logger';\nimport TypedError = require('typed-error');\nimport resinSdk = require('resin-sdk');\n\nconst tempMkdir = Promise.promisify(track().mkdir);\nconst tempCleanup = Promise.promisify(cleanup);\n\n/**\n * A custom HTTP error to pass back in event of deployment failure.\n */\nclass HTTPError extends TypedError {\n\t/** Message error from the Github API. */\n\tpublic httpCode: number;\n\t/** Type of the error, to distinguish it from GithubError. */\n\tpublic type = 'HttpError';\n\n\t/**\n\t * Constructs a new HTTP error.\n\t * @param code     HTTP code to set.\n\t * @param message  Message to send back as reason error occurred.\n\t */\n\tconstructor(code: number, message: string) {\n\t\tsuper();\n\n\t\t// Attempt to parse from JSON.\n\t\tthis.httpCode = code;\n\t\tthis.message = message;\n\t}\n}\n\n/**\n * Details a keyframe for deployment,\n */\ninterface KeyframeDetails  {\n\t/** Version of the keyframe. */\n\tversion: string;\n\t/** The environment in which to deploy the keyframe. */\n\tenvironment: string;\n}\n\n/** Port on which the Github ServiceListener will listen. */\nconst GithubPort = 7788;\n/** Endpoint for deployment service. */\nconst DeployKeyframePath = '/deploykeyframe';\n/** Port for deployment service. */\nconst DeployKeyframePort = 7789;\n/** Standard name of a keyframe. */\nconst KeyframeFilename = 'keyframe.yml';\n\n/** Environments interface matching names to repositories. */\ninterface Environments {\n\t[index: string]: string;\n}\n\n/**\n * Deployment interface for passing to helper methods.\n */\ninterface DeploymentDetails {\n\t/** Keyframe body. */\n\tkeyframe: GithubApiTypes.Content;\n\t/** Resin admin username. */\n\tusername: string;\n\t/** Version of the keyframe. */\n\tversion: string;\n\t/** Owner of the environment repository. */\n\towner: string;\n\t/** Environment repository name. */\n\trepo: string;\n\t/** Environment name (eg. 'testing') */\n\tenvironment: string;\n}\n\n/**\n * Constructor for the KeyframeBot.\n */\nexport interface KeyframeBotConstructor {\n\t/** Github App id. */\n\tintegrationId: string;\n\t/** PEM for requesting data from Github ServiceEmitter. */\n\tpem: string;\n\t/** Secret webhook for receiving data from Github ServiceListener. */\n\twebhookSecret: string;\n\t/** The repo where product keyframes are stored. */\n\tproductRepo: string;\n\t/** The valid environments. JSON of form { \"environment\": \"repo\", ... } */\n\tenvironments: string;\n}\n\n// KeyframeBot listens for PullRequest and PullRequestReview events on both product\n// and environment repositories. The general flow is:\n// 1. User creates a PR to update the product keyframe.\n// 2. KeyframeBot lints the PR to ensure the keyframe is valid. It sets a status\n//    on the PR (pass/fail), along with an error if one exists.\n// 3. Usual PR flow is carried out, and eventually keyframe is merged to `master`.\n// 4. At some future point, a user requests that the keyframe is deployed to an environment.\n//    KeyframeBot runs an HTTP service that allows a user who is also a resin.io admin\n//    (ie. most engineers), to request this. They can do so by sending a payload of:\n//    '{ environment: <string>, version: <string> }' to it, along with their resin.io user token:\n//\n//    curl -XPOST http://<server>:7789/deploykeyframe -H 'Authorization: token <blah>' \\\n//    -H 'Content-Type: application/json' -d '{\"version\": \"v4.4.0\", \"environment\": \"test\"}'\n// 5. If the version is valid, and the user is confirmed as a resin.io admin, then a new branch\n//    in the given environment is created based off `master`, and the keyframe is committed to it.\n//    (Branches are named `<user>-<keyframeVersion>`).\n// 6. Finally, a new PR is created in the environment repository, ready for review.\n//\n// TBD:\n//  - Test deployment on opening/update of environment PR to create a status check.\n//  - Extended linting of keyframes along with variables in an environment PR\n//  - Label for saying 'Deploy to environment', which will:\n//    * Carry out deploy to the correct environment from the PR\n//    * On succesful deploy, kick VersionBot to merge the PR to `master`\nexport class KeyframeBot extends ProcBot {\n\t/** Github ServiceListener name. */\n\tprivate githubListenerName: string;\n\t/** Github ServiceEmitter. */\n\tprivate githubEmitter: GithubService;\n\t/** Github ServiceEmitter name. */\n\tprivate githubEmitterName: string;\n\t/** Instance of Github SDK API in use. */\n\tprivate githubApi: GithubApi;\n\t/** Instance of express. */\n\tprivate expressApp: express.Application;\n\t/** Environments available. */\n\tprivate environments: Environments;\n\t/** Product repo. */\n\tprivate productRepo: string;\n\n\t/**\n\t * Constructor for the KeyframeBot.\n\t *\n\t * @param name         Name of the KeyframeBot.\n\t * @param constObject  Constructor object.\n\t */\n\tconstructor(name: string, constObject: KeyframeBotConstructor) {\n\t\t// This is the KeyframeBot.\n\t\tsuper(name);\n\n\t\tconst integrationId = constObject.integrationId;\n\t\tconst pemString = constObject.pem;\n\t\tconst webhook = constObject.webhookSecret;\n\t\tconst environments = constObject.environments;\n\n\t\t// Create a new listener for Github with the right Integration ID.\n\t\tconst ghListener = this.addServiceListener('github', {\n\t\t\tclient: name,\n\t\t\tloginType: {\n\t\t\t\tintegrationId,\n\t\t\t\tpem: pemString,\n\t\t\t\ttype: 'integration'\n\t\t\t},\n\t\t\tpath: '/keyframehooks',\n\t\t\tport: GithubPort,\n\t\t\ttype: 'listener',\n\t\t\twebhookSecret: webhook\n\t\t});\n\n\t\t// Create a new emitter with the right Integration ID.\n\t\tconst ghEmitter = this.addServiceEmitter('github', {\n\t\t\tloginType: {\n\t\t\t\tintegrationId,\n\t\t\t\tpem: pemString,\n\t\t\t\ttype: 'integration'\n\t\t\t},\n\t\t\tpem: pemString,\n\t\t\ttype: 'emitter'\n\t\t});\n\n\t\t// Throw if we didn't get either of the services.\n\t\tif (!ghListener) {\n\t\t\tthrow new Error(\"Couldn't create a Github listener\");\n\t\t}\n\t\tif (!ghEmitter) {\n\t\t\tthrow new Error(\"Couldn't create a Github emitter\");\n\t\t}\n\t\tthis.githubEmitter = <GithubService>ghEmitter;\n\t\tthis.githubListenerName = ghListener.serviceName;\n\t\tthis.githubEmitterName = ghEmitter.serviceName;\n\n\t\t// Github API handle\n\t\tthis.githubApi = (<GithubHandle>ghEmitter.apiHandle).github;\n\t\tif (!this.githubApi) {\n\t\t\tthrow new Error('No Github API instance found');\n\t\t}\n\n\t\t// Parse our environments.\n\t\ttry {\n\t\t\tthis.environments = JSON.parse(constObject.environments);\n\t\t} catch (err) {\n\t\t\tthrow new Error('There are no valid environments to use');\n\t\t}\n\t\tthis.logger.log(LogLevel.INFO, `---> ${name}: Aware of the following environments: ${environments}`);\n\n\t\t// Get the product repo.\n\t\tthis.productRepo = constObject.productRepo;\n\n\t\t// Create a new endpoint to allow keyframes to be promoted to a particular environment.\n\t\t// New Express app. We'll reuse it in the GH SL.\n\t\tthis.expressApp = express();\n\t\tif (!this.expressApp) {\n\t\t\tthrow new Error(\"Couldn't create an Express application\");\n\t\t}\n\n\t\t// Add body parser.\n\t\tthis.expressApp.use(bodyParser.urlencoded({ extended: true }));\n\t\tthis.expressApp.use(bodyParser.json());\n\t\tthis.expressApp.post(DeployKeyframePath, this.deployKeyframe);\n\n\t\t// Listen.\n\t\tthis.expressApp.listen(DeployKeyframePort, () => {\n\t\t\tthis.logger.log(LogLevel.INFO, `---> ${name}: Listening on ${DeployKeyframePort}`);\n\t\t});\n\n\t\t// We have two different WorkerMethods here:\n\t\t// 1) Status checks on PR open and commits\n\t\t// 2) PR review and label checks for merge\n\t\t_.forEach([\n\t\t\t{\n\t\t\t\tevents: [ 'pull_request', 'pull_request_review' ],\n\t\t\t\tlistenerMethod: this.lintKeyframe,\n\t\t\t\tname: 'LintKeyframe',\n\t\t\t},\n\t\t], (reg: GithubRegistration) => {\n\t\t\tghListener.registerEvent(reg);\n\t\t});\n\t}\n\n\t/**\n\t * Lints a keyframe when the Github ServiceListener sees a PR open or synchronised.\n\t *\n\t * @param _registration Registration object for the event.\n\t * @param event  The Github event.\n\t * @returns      Void Promise fulfilled when the method has finished processing the event.\n\t */\n\tprotected lintKeyframe = (_registration: GithubRegistration, event: ServiceEvent): Promise<void> => {\n\t\tconst cookedEvent: GithubCookedData = event.cookedEvent;\n\t\tconst pr: GithubApiTypes.PullRequest = cookedEvent.data.pull_request;\n\t\tconst head = cookedEvent.data.pull_request.head;\n\t\tconst owner = head.repo.owner.login;\n\t\tconst repo = head.repo.name;\n\t\tconst prNumber = pr.number;\n\t\tlet branchName = pr.head.ref;\n\t\tlet authToken: string;\n\t\tlet fullPath = '';\n\n\t\t// Ensure we only lint on an open and a synchronise.\n\t\tif ((event.cookedEvent.data.action !== 'opened') && (event.cookedEvent.data.action !== 'synchronize')) {\n\t\t\treturn Promise.resolve();\n\t\t}\n\n\t\tthis.logger.log(LogLevel.INFO, `Linting ${owner}/${repo}#${prNumber} keyframe for issues`);\n\n\t\t// Ensure that there's actually a keyframe in the PR. If there isn't, we don't\n\t\t// even bother cloning for a lint.\n\t\treturn this.dispatchToEmitter(this.githubEmitterName, {\n\t\t\tdata: {\n\t\t\t\towner,\n\t\t\t\trepo,\n\t\t\t\tpath: 'keyframe.yml'\n\t\t\t},\n\t\t\tmethod: this.githubApi.repos.getContent\n\t\t}).then(() => {\n\t\t\t// Successful path get means the file exists.\n\t\t\tauthToken = this.githubEmitter.authenticationToken;\n\n\t\t\t// Create a new temporary directory for the repo holding the keyframe.\n\t\t\treturn tempMkdir(`keyframebot-${repo}-${pr.number}_`);\n\t\t}).then((tempDir: string) => {\n\t\t\tfullPath = `${tempDir}${path.sep}`;\n\n\t\t\treturn Promise.mapSeries([\n\t\t\t\tBuildCommand('git', ['clone', `https://${authToken}:${authToken}@github.com/${owner}/${repo}`,\n\t\t\t\t\tfullPath],\n\t\t\t\t\t{ cwd: fullPath, retries: 3 }),\n\t\t\t\tBuildCommand('git', ['checkout', branchName], { cwd: fullPath })\n\t\t\t], ExecuteCommand);\n\t\t}).then(() => {\n\t\t\t// Lint the keyframe\n\t\t\t// For this we need the base SHA and the last commit SHA for the PR.\n\t\t\tconst baseSha = pr.base.sha;\n\t\t\tconst headSha = pr.head.sha;\n\t\t\treturn keyframeControl.lint(baseSha, headSha, fullPath);\n\t\t}).then((lintResults: keyframeControl.LintResponse) => {\n\t\t\tlet lintMessage = 'Keyframe linted successfully';\n\t\t\tlet commentPromise = Promise.resolve();\n\n\t\t\t// Change status depending on lint.\n\t\t\tif (!lintResults.valid) {\n\t\t\t\tlintMessage = 'Keyframe linting failed';\n\n\t\t\t\t// We get array of arrays atm, not sure why.\n\t\t\t\tconst flattenedErrors = _.flatten(lintResults.messages);\n\t\t\t\tlet errorMessage = 'The following errors occurred whilst linting the `${KeyframeFilename}` file:\\n';\n\t\t\t\t// Comment on the PR so that the author knows why the lint failed.\n\t\t\t\t_.each(flattenedErrors, (error: keyframeControl.LintError) => {\n\t\t\t\t\terrorMessage += `${error.message} at line ${error.parsedLine}: ${error.snippet}\\n`;\n\t\t\t\t});\n\n\t\t\t\tcommentPromise = this.dispatchToEmitter(this.githubEmitterName, {\n\t\t\t\t\tdata: {\n\t\t\t\t\t\tbody: errorMessage,\n\t\t\t\t\t\towner,\n\t\t\t\t\t\trepo,\n\t\t\t\t\t\tnumber: prNumber,\n\t\t\t\t\t},\n\t\t\t\t\tmethod: this.githubApi.issues.createComment,\n\t\t\t\t});\n\n\t\t\t}\n\t\t\treturn commentPromise.then(() => {\n\t\t\t\treturn this.dispatchToEmitter(this.githubEmitterName, {\n\t\t\t\t\tdata: {\n\t\t\t\t\t\tcontext: 'KeyframeBot',\n\t\t\t\t\t\tdescription: lintMessage,\n\t\t\t\t\t\towner,\n\t\t\t\t\t\trepo,\n\t\t\t\t\t\tsha: head.sha,\n\t\t\t\t\t\tstate: (lintResults.valid) ? 'success' : 'failure'\n\t\t\t\t\t},\n\t\t\t\t\tmethod: this.githubApi.repos.createStatus,\n\t\t\t\t});\n\t\t\t});\n\t\t}).catch((error: Error) => {\n\t\t\t// Generic 'could not lint the PR' error.\n\t\t\tthis.dispatchToEmitter(this.githubEmitterName, {\n\t\t\t\tdata: {\n\t\t\t\t\tbody: 'Unable to lint keyframe for this PR.',\n\t\t\t\t\tnumber: prNumber,\n\t\t\t\t\towner,\n\t\t\t\t\trepo\n\t\t\t\t},\n\t\t\t\tmethod: this.githubApi.issues.createComment\n\t\t\t});\n\t\t\tthis.reportError(error);\n\t\t}).finally(tempCleanup);\n\t}\n\n\t/**\n\t * Deployment route method, hanging off an Express server.\n\t * When a valid keyframe version and environment is passed, this will verify the product keyframe,\n\t * and then create a new branch in the environment. The keyframe will be committed to this branch\n\t * and a new PR will be based off it. This will automatically be linted by the process.\n\t *\n\t * @param req  The HTTP request.\n\t * @param res  The HTTP response.\n\t */\n\tprivate deployKeyframe = (req: express.Request, res: express.Response): void => {\n\t\tconst payload: KeyframeDetails = req.body;\n\t\tconst environment = payload.environment;\n\t\tconst version = payload.version;\n\t\tconst headerToken = req.get('Authorization') || '';\n\t\tconst productSplitRepo = this.productRepo.split('/');\n\t\tconst productOwner = productSplitRepo[0];\n\t\tconst productRepo = productSplitRepo[1];\n\t\tconst resin = resinSdk();\n\n\t\tlet decodedToken: any;\n\t\tlet owner = '';\n\t\tlet repo = '';\n\t\tlet deployDetails: DeploymentDetails;\n\n\t\t// Read the headers, validate the bearer token with the SDK.\n\t\tconst tokenMatch = headerToken.match(/^token (.*)$/i);\n\t\tif (!tokenMatch) {\n\t\t\tres.sendStatus(400);\n\t\t\treturn;\n\t\t}\n\n\t\tconst token = tokenMatch[1];\n\t\tresin.auth.loginWithToken(token).then(() => {\n\t\t\ttry {\n\t\t\t\tdecodedToken = jwtDecode(token);\n\t\t\t} catch (_err) {\n\t\t\t\tthrow new Error('Cannot decode token into JWT object');\n\t\t\t}\n\n\t\t\tif (!_.includes(decodedToken.permissions, 'admin.home')) {\n\t\t\t\t// Ensure it's a 401 so anyone without rights doesn't know it exists,\n\t\t\t\t// and use the same message as an invalid token.\n\t\t\t\tthrow new HTTPError(401, 'The token is invalid');\n\t\t\t}\n\n\t\t\t// Get the right environment.\n\t\t\tconst envRepo = this.environments[environment];\n\t\t\tif (!envRepo) {\n\t\t\t\tthrow new HTTPError(404, 'Passed environment does not exist');\n\t\t\t}\n\n\t\t\t// Prep for the environment PR.\n\t\t\tconst splitRepo = envRepo.split('/');\n\t\t\towner = splitRepo[0];\n\t\t\trepo = splitRepo[1];\n\n\t\t\t// Ensure that the version of the keyframe specified actually exists.\n\t\t\t// If the keyframe version doesn't exist, then Github will respond\n\t\t\t// that the tag doesn't exist. This will get thrown as an error, which\n\t\t\t// gets passed back to the user.\n\t\t\t// Because of this, we don't need to explicitly catch/set one here.\n\t\t\treturn this.dispatchToEmitter(this.githubEmitterName, {\n\t\t\t\tdata: {\n\t\t\t\t\towner: productOwner,\n\t\t\t\t\trepo: productRepo,\n\t\t\t\t\tpath: KeyframeFilename,\n\t\t\t\t\tref: `refs/tags/${version}`\n\t\t\t\t},\n\t\t\t\tmethod: this.githubApi.repos.getContent\n\t\t\t});\n\t\t}).then((keyframeFile: GithubApiTypes.Content) => {\n\t\t\t// Github API docs state a blob will *always* be encoded base64...\n\t\t\tif (keyframeFile.encoding !== 'base64') {\n\t\t\t\tthis.logger.log(LogLevel.WARN, `Keyframe file exists for ${productOwner}/${productRepo} but is not ` +\n\t\t\t\t\t`Base64 encoded! Aborting.`);\n\t\t\t\tthrow new HTTPError(500, 'Keyframe was not correctly encoded');\n\t\t\t}\n\n\t\t\t// We now go ahead and:\n\t\t\t// 1. Create a new branch for this, create it from the version passed\n\t\t\t// 2. Commit the keyframe to that branch\n\t\t\t// 3. Open a new PR pointing to that branch. Any relevant reviewers can be set (when it works) from\n\t\t\t//    a `.procbot.yml` config in the env repo.\n\n\t\t\t// Create a new branch and commit the keyframe to it.\n\t\t\tdeployDetails = {\n\t\t\t\tkeyframe: keyframeFile,\n\t\t\t\tusername: decodedToken.username,\n\t\t\t\tenvironment,\n\t\t\t\tversion,\n\t\t\t\towner,\n\t\t\t\trepo\n\t\t\t};\n\t\t\treturn this.createNewEnvironmentBranchCommit(deployDetails);\n\t\t}).then((branchName: string) => {\n\t\t\t// Open a new PR using the new branch.\n\t\t\t// If there's a `.procbot.yml` config in the branch, it'll do setup for us.\n\t\t\treturn this.dispatchToEmitter(this.githubEmitterName, {\n\t\t\t\tdata: {\n\t\t\t\t\towner,\n\t\t\t\t\trepo,\n\t\t\t\t\ttitle: `Merge product keyframe ${deployDetails.version} into ${deployDetails.environment}`,\n\t\t\t\t\tbody: `PR was created via a deployment of the keyframe by Resin admin ${deployDetails.username}.`,\n\t\t\t\t\thead: branchName,\n\t\t\t\t\tbase: 'master'\n\t\t\t\t},\n\t\t\t\tmethod: this.githubApi.pullRequests.create\n\t\t\t});\n\t\t}).then(() => {\n\t\t\t// Badabing. We'll now do linting on the *environment* branch automatically, as the\n\t\t\t// PR will kick it off. NOTE: How do we determine which type of linting we do?\n\t\t\t// I guess we could look at repo, but that's a bit horrible. See if there's a variables file?\n\t\t\t// Talk to Jack.\n\t\t\tres.sendStatus(200);\n\t\t}).catch((err: GithubError | HTTPError | Error) => {\n\t\t\tlet errorCode = (err instanceof HTTPError) ? err.httpCode : 500;\n\t\t\tthis.reportError(err);\n\t\t\tres.status(errorCode).send(err.message);\n\t\t});\n\t}\n\n\t/**\n\t * Creates a new branch on the specified environment for a given keyframe.\n\t *\n\t * @param branchDetails  The details of the keyframe, user and version.\n\t * @returns              A string naming the branch created on fulfilment.\n\t */\n\tprivate createNewEnvironmentBranchCommit = (branchDetails: DeploymentDetails): Promise<string> => {\n\t\tconst owner = branchDetails.owner;\n\t\tconst repo = branchDetails.repo;\n\t\tconst keyframe = branchDetails.keyframe;\n\t\tconst environment = branchDetails.environment;\n\t\tconst version = branchDetails.version;\n\t\tconst user = branchDetails.username;\n\t\tconst branchName = `${user}-${version}`;;\n\t\tlet branchSha = '';\n\t\tlet keyframeEntry: GithubApiTypes.TreeEntry | void;\n\t\tlet oldTreeSha = '';\n\t\tlet newTreeSha = '';\n\t\tlet commitSha = '';\n\t\tconst existsMessage = `The branch ${branchName} already exists on the ${environment} environment ` +\n\t\t\t`(${owner}/${repo})`;\n\n\t\t// Ensure that the branch we're about to create doesn't already exist.\n\t\treturn this.dispatchToEmitter(this.githubEmitterName, {\n\t\t\tdata: {\n\t\t\t\towner,\n\t\t\t\trepo,\n\t\t\t\tref: `heads/${branchName}`\n\t\t\t},\n\t\t\tmethod: this.githubApi.gitdata.getReference\n\t\t}).then(() => {\n\t\t\tthrow new HTTPError(409, existsMessage);\n\t\t}).catch((err: GithubError) => {\n\t\t\t// Not Found is what we want to hit, else throw a new error.\n\t\t\tif (err.message !== 'Not Found') {\n\t\t\t\tif (err.message === existsMessage) {\n\t\t\t\t\tthrow err;\n\t\t\t\t}\n\n\t\t\t\tthrow new HTTPError(409, `Couldn't determine whether a branch could be created for the ` +\n\t\t\t\t\t`${environment} environment (${owner}/${repo})`);\n\t\t\t}\n\n\t\t\t// Now we can create a new branch.\n\t\t\treturn this.dispatchToEmitter(this.githubEmitterName, {\n\t\t\t\tdata: {\n\t\t\t\t\towner,\n\t\t\t\t\trepo,\n\t\t\t\t\tref: 'heads/master'\n\t\t\t\t},\n\t\t\t\tmethod: this.githubApi.gitdata.getReference\n\t\t\t});\n\t\t}).then((reference: GithubApiTypes.Reference) => {\n\t\t\t// Ensure that master exists.\n\t\t\tif (reference.ref !== 'refs/heads/master') {\n\t\t\t\tthrow new Error(`Master doesn't exist on ${owner}/${repo}`);\n\t\t\t}\n\n\t\t\t// Grab the reference to the head.\n\t\t\tconst headSha = reference.object.sha;\n\n\t\t\t// Create the new branch, using the version name and user.\n\t\t\treturn this.dispatchToEmitter(this.githubEmitterName, {\n\t\t\t\tdata: {\n\t\t\t\t\towner,\n\t\t\t\t\trepo,\n\t\t\t\t\tref: `refs/heads/${branchName}`,\n\t\t\t\t\tsha: headSha\n\t\t\t\t},\n\t\t\t\tmethod: this.githubApi.gitdata.createReference\n\t\t\t});\n\t\t}).then((reference: GithubApiTypes.Reference) => {\n\t\t\tconst branchReference = reference.ref;\n\t\t\tbranchSha = reference.object.sha;\n\n\t\t\tif (!branchReference) {\n\t\t\t\t// 500 as we probably have no idea why, at this point.\n\t\t\t\tthrow new HTTPError(500, `Couldn't create the new branch for the ${environment} environment`);\n\t\t\t}\n\n\t\t\t// Get the tree for the branch.\n\t\t\treturn this.dispatchToEmitter(this.githubEmitterName, {\n\t\t\t\tdata: {\n\t\t\t\t\towner,\n\t\t\t\t\trepo,\n\t\t\t\t\tsha: branchSha,\n\t\t\t\t},\n\t\t\t\tmethod: this.githubApi.gitdata.getTree\n\t\t\t});\n\t\t}).then((tree: GithubApiTypes.Tree) => {\n\t\t\t// Find the right entry in the tree for the keyframe file.\n\t\t\tkeyframeEntry = _.find(tree.tree, (entry) => entry.path === KeyframeFilename);\n\t\t\tif (!keyframeEntry) {\n\t\t\t\t// Delete the reference we just created.\n\t\t\t\treturn this.dispatchToEmitter(this.githubEmitterName, {\n\t\t\t\t\tdata: {\n\t\t\t\t\t\towner,\n\t\t\t\t\t\trepo,\n\t\t\t\t\t\tref: `heads/${branchName}`\n\t\t\t\t\t},\n\t\t\t\t\tmethod: this.githubApi.gitdata.deleteReference\n\t\t\t\t}).then(() => {\n\t\t\t\t\tthrow new HTTPError(404, `Couldn't find the keyframe file in the ` +\n\t\t\t\t\t\t`${environment}(${owner}/${repo}) environment`);\n\t\t\t\t});\n\t\t\t}\n\n\t\t\t// Create a new blob using the keyframe data from the product repo.\n\t\t\t// This data is already base64 encoded, so we just use that.\n\t\t\toldTreeSha = tree.sha;\n\t\t\treturn this.dispatchToEmitter(this.githubEmitterName, {\n\t\t\t\tdata: {\n\t\t\t\t\towner,\n\t\t\t\t\trepo,\n\t\t\t\t\tcontent: keyframe.content,\n\t\t\t\t\tencoding: keyframe.encoding\n\t\t\t\t},\n\t\t\t\tmethod: this.githubApi.gitdata.createBlob\n\t\t\t});\n\t\t}).then((blob: GithubApiTypes.Blob) => {\n\t\t\t// We've got the blob, we've got the tree entry for the previous keyframe.\n\t\t\t// Create a new tree that includes this data.\n\t\t\tif (keyframeEntry) {\n\t\t\t\treturn this.dispatchToEmitter(this.githubEmitterName, {\n\t\t\t\t\tdata: {\n\t\t\t\t\t\tbase_tree: oldTreeSha,\n\t\t\t\t\t\towner,\n\t\t\t\t\t\trepo,\n\t\t\t\t\t\ttree: [{\n\t\t\t\t\t\t\tmode: keyframeEntry.mode,\n\t\t\t\t\t\t\tpath: keyframeEntry.path,\n\t\t\t\t\t\t\tsha: blob.sha,\n\t\t\t\t\t\t\ttype: 'blob'\n\t\t\t\t\t\t}]\n\t\t\t\t\t},\n\t\t\t\t\tmethod: this.githubApi.gitdata.createTree\n\t\t\t\t});\n\t\t\t}\n\t\t}).then((newTree: GithubApiTypes.Tree) => {\n\t\t\tnewTreeSha = newTree.sha;\n\n\t\t\t// Get the last commit for the branch.\n\t\t\treturn this.dispatchToEmitter(this.githubEmitterName, {\n\t\t\t\tdata: {\n\t\t\t\t\towner,\n\t\t\t\t\trepo,\n\t\t\t\t\tsha: branchSha\n\t\t\t\t},\n\t\t\t\tmethod: this.githubApi.repos.getCommit\n\t\t\t});\n\t\t}).then((lastCommit: GithubApiTypes.Commit) => {\n\t\t\t// We have new tree object, we now want to create a new commit referencing it.\n\t\t\treturn this.dispatchToEmitter(this.githubEmitterName, {\n\t\t\t\tdata: {\n\t\t\t\t\tmessage: `Update keyframe from product version ${version} on behalf of Resin admin ${user}.`,\n\t\t\t\t\towner,\n\t\t\t\t\tparents: [ lastCommit.sha ],\n\t\t\t\t\trepo,\n\t\t\t\t\ttree: newTreeSha\n\t\t\t\t},\n\t\t\t\tmethod: this.githubApi.gitdata.createCommit\n\t\t\t});\n\t\t}).then((commit: GithubApiTypes.Commit) => {\n\t\t\t// Update the branch to include the new commit SHA, so the head points to our new\n\t\t\t// keyframe.\n\t\t\tcommitSha = commit.sha;\n\t\t\treturn this.dispatchToEmitter(this.githubEmitterName, {\n\t\t\t\tdata: {\n\t\t\t\t\tforce: false,\n\t\t\t\t\towner,\n\t\t\t\t\tref: `heads/${branchName}`,\n\t\t\t\t\trepo,\n\t\t\t\t\tsha: commitSha\n\t\t\t\t},\n\t\t\t\tmethod: this.githubApi.gitdata.updateReference\n\t\t\t});\n\t\t}).then(() => {\n\t\t\treturn this.dispatchToEmitter(this.githubEmitterName, {\n\t\t\t\tdata: {\n\t\t\t\t\tmessage: version,\n\t\t\t\t\tobject: commitSha,\n\t\t\t\t\towner,\n\t\t\t\t\trepo,\n\t\t\t\t\ttag: version,\n\t\t\t\t\ttagger: {\n\t\t\t\t\t\tname: process.env.KEYFRAMEBOT_NAME,\n\t\t\t\t\t\temail: 'keyframebot@resin.io'\n\t\t\t\t\t},\n\t\t\t\t\ttype: 'commit'\n\t\t\t\t},\n\t\t\t\tmethod: this.githubApi.gitdata.createTag\n\t\t\t});\n\t\t}).then((newTag: GithubApiTypes.Tag) => {\n\t\t\t// Finally tag this with the version of the keyframe.\n\t\t\treturn this.dispatchToEmitter(this.githubEmitterName, {\n\t\t\t\tdata: {\n\t\t\t\t\towner,\n\t\t\t\t\tref: `refs/tags/${version}`,\n\t\t\t\t\trepo,\n\t\t\t\t\tsha: newTag.sha\n\t\t\t\t},\n\t\t\t\tmethod: this.githubApi.gitdata.createReference\n\t\t\t});\n\t\t}).return(branchName);\n\t}\n\n\t/**\n\t * Reports an error to the console.\n\t *\n\t * @param error  The error to report.\n\t */\n\tprivate reportError(error: GithubError | HTTPError | Error): void {\n\t\t// Log to console.\n\t\tthis.logger.alert(AlertLevel.ERROR, error.message);\n\t}\n}\n\n/** Creates a new instance of the KeyframeBot client. */\nexport function createBot(): KeyframeBot {\n\tif (!(process.env.KEYFRAMEBOT_NAME && process.env.KEYFRAMEBOT_INTEGRATION_ID &&\n\tprocess.env.KEYFRAMEBOT_PEM && process.env.KEYFRAMEBOT_WEBHOOK_SECRET && process.env.KEYFRAMEBOT_PRODUCT_REPO &&\n\tprocess.env.KEYFRAMEBOT_ENVIRONMENTS)) {\n\t\tthrow new Error(`'KEYFRAMEBOT_NAME', 'KEYFRAMEBOT_INTEGRATION_ID', 'KEYFRAMEBOT_PEM', ` +\n\t\t\t`'KEYFRAMEBOT_WEBHOOK_SECRET', 'KEYFRAMEBOT_ENVIRONMENTS' and 'KEYFRAMEBOT_PRODUCT_REPO' environment ` +\n\t\t\t'variables need setting');\n\t}\n\n\treturn new KeyframeBot(process.env.KEYFRAMEBOT_NAME, {\n\t\tintegrationId: process.env.KEYFRAMEBOT_INTEGRATION_ID,\n\t\tpem: process.env.KEYFRAMEBOT_PEM,\n\t\twebhookSecret: process.env.KEYFRAMEBOT_WEBHOOK_SECRET,\n\t\tproductRepo: process.env.KEYFRAMEBOT_PRODUCT_REPO,\n\t\tenvironments: process.env.KEYFRAMEBOT_ENVIRONMENTS\n\t});\n}\n"],"sourceRoot":"../../lib"}
=======
<<<<<<< HEAD
{"version":3,"sources":["bots/keyframebot.ts"],"names":[],"mappings":"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","file":"keyframebot.js","sourcesContent":["/*\nCopyright 2016-2017 Resin.io\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n   http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n/* tslint:disable: max-classes-per-file */\nimport * as Promise from 'bluebird';\nimport * as bodyParser from 'body-parser';\nimport * as express from 'express';\nimport * as GithubApi from 'github';\nimport * as jwtDecode from 'jwt-decode';\nimport * as keyframeControl from 'keyfctl';\nimport * as _ from 'lodash';\nimport * as path from 'path';\nimport { cleanup, track } from 'temp';\nimport * as GithubApiTypes from '../apis/githubapi-types';\nimport { ProcBot } from '../framework/procbot';\nimport { GithubError, GithubService } from '../services/github';\nimport { GithubCookedData, GithubHandle, GithubRegistration } from '../services/github-types';\nimport { ServiceEvent } from '../services/service-types';\nimport { BuildCommand, ExecuteCommand } from '../utils/environment';\nimport { AlertLevel, LogLevel } from '../utils/logger';\nimport TypedError = require('typed-error');\nimport resinSdk = require('resin-sdk');\n\nconst tempMkdir = Promise.promisify(track().mkdir);\nconst tempCleanup = Promise.promisify(cleanup);\n\n/**\n * A custom HTTP error to pass back in event of deployment failure.\n */\nclass HTTPError extends TypedError {\n\t/** Message error from the Github API. */\n\tpublic httpCode: number;\n\t/** Type of the error, to distinguish it from GithubError. */\n\tpublic type = 'HttpError';\n\n\t/**\n\t * Constructs a new HTTP error.\n\t * @param code     HTTP code to set.\n\t * @param message  Message to send back as reason error occurred.\n\t */\n\tconstructor(code: number, message: string) {\n\t\tsuper();\n\n\t\t// Attempt to parse from JSON.\n\t\tthis.httpCode = code;\n\t\tthis.message = message;\n\t}\n}\n\n/**\n * Details a keyframe for deployment,\n */\ninterface KeyframeDetails  {\n\t/** Version of the keyframe. */\n\tversion: string;\n\t/** The environment in which to deploy the keyframe. */\n\tenvironment: string;\n}\n\n/** Port on which the Github ServiceListener will listen. */\nconst GithubPort = 7788;\n/** Endpoint for deployment service. */\nconst DeployKeyframePath = '/deploykeyframe';\n/** Port for deployment service. */\nconst DeployKeyframePort = 7789;\n/** Standard name of a keyframe. */\nconst KeyframeFilename = 'keyframe.yml';\n\n/** Environments interface matching names to repositories. */\ninterface Environments {\n\t[index: string]: string;\n}\n\n/**\n * Deployment interface for passing to helper methods.\n */\ninterface DeploymentDetails {\n\t/** Keyframe body. */\n\tkeyframe: GithubApiTypes.Content;\n\t/** Resin admin username. */\n\tusername: string;\n\t/** Version of the keyframe. */\n\tversion: string;\n\t/** Owner of the environment repository. */\n\towner: string;\n\t/** Environment repository name. */\n\trepo: string;\n\t/** Environment name (eg. 'testing') */\n\tenvironment: string;\n}\n\n/**\n * Constructor for the KeyframeBot.\n */\nexport interface KeyframeBotConstructor {\n\t/** Github App id. */\n\tintegrationId: string;\n\t/** PEM for requesting data from Github ServiceEmitter. */\n\tpem: string;\n\t/** Secret webhook for receiving data from Github ServiceListener. */\n\twebhookSecret: string;\n\t/** The repo where product keyframes are stored. */\n\tproductRepo: string;\n\t/** The valid environments. JSON of form { \"environment\": \"repo\", ... } */\n\tenvironments: string;\n}\n\n// KeyframeBot listens for PullRequest and PullRequestReview events on both product\n// and environment repositories. The general flow is:\n// 1. User creates a PR to update the product keyframe.\n// 2. KeyframeBot lints the PR to ensure the keyframe is valid. It sets a status\n//    on the PR (pass/fail), along with an error if one exists.\n// 3. Usual PR flow is carried out, and eventually keyframe is merged to `master`.\n// 4. At some future point, a user requests that the keyframe is deployed to an environment.\n//    KeyframeBot runs an HTTP service that allows a user who is also a resin.io admin\n//    (ie. most engineers), to request this. They can do so by sending a payload of:\n//    '{ environment: <string>, version: <string> }' to it, along with their resin.io user token:\n//\n//    curl -XPOST http://<server>:7789/deploykeyframe -H 'Authorization: token <blah>' \\\n//    -H 'Content-Type: application/json' -d '{\"version\": \"v4.4.0\", \"environment\": \"test\"}'\n// 5. If the version is valid, and the user is confirmed as a resin.io admin, then a new branch\n//    in the given environment is created based off `master`, and the keyframe is committed to it.\n//    (Branches are named `<user>-<keyframeVersion>`).\n// 6. Finally, a new PR is created in the environment repository, ready for review.\n//\n// TBD:\n//  - Test deployment on opening/update of environment PR to create a status check.\n//  - Extended linting of keyframes along with variables in an environment PR\n//  - Label for saying 'Deploy to environment', which will:\n//    * Carry out deploy to the correct environment from the PR\n//    * On succesful deploy, kick VersionBot to merge the PR to `master`\nexport class KeyframeBot extends ProcBot {\n\t/** Github ServiceListener name. */\n\tprivate githubListenerName: string;\n\t/** Github ServiceEmitter. */\n\tprivate githubEmitter: GithubService;\n\t/** Github ServiceEmitter name. */\n\tprivate githubEmitterName: string;\n\t/** Instance of Github SDK API in use. */\n\tprivate githubApi: GithubApi;\n\t/** Instance of express. */\n\tprivate expressApp: express.Application;\n\t/** Environments available. */\n\tprivate environments: Environments;\n\t/** Product repo. */\n\tprivate productRepo: string;\n\n\t/**\n\t * Constructor for the KeyframeBot.\n\t *\n\t * @param name         Name of the KeyframeBot.\n\t * @param constObject  Constructor object.\n\t */\n\tconstructor(name: string, constObject: KeyframeBotConstructor) {\n\t\t// This is the KeyframeBot.\n\t\tsuper(name);\n\n\t\tconst integrationId = constObject.integrationId;\n\t\tconst pemString = constObject.pem;\n\t\tconst webhook = constObject.webhookSecret;\n\t\tconst environments = constObject.environments;\n\n\t\t// Create a new listener for Github with the right Integration ID.\n\t\tconst ghListener = this.addServiceListener('github', {\n\t\t\tclient: name,\n\t\t\tloginType: {\n\t\t\t\tintegrationId,\n\t\t\t\tpem: pemString,\n\t\t\t\ttype: 'integration'\n\t\t\t},\n\t\t\tpath: '/keyframehooks',\n\t\t\tport: GithubPort,\n\t\t\ttype: 'listener',\n\t\t\twebhookSecret: webhook\n\t\t});\n\n\t\t// Create a new emitter with the right Integration ID.\n\t\tconst ghEmitter = this.addServiceEmitter('github', {\n\t\t\tloginType: {\n\t\t\t\tintegrationId,\n\t\t\t\tpem: pemString,\n\t\t\t\ttype: 'integration'\n\t\t\t},\n\t\t\tpem: pemString,\n\t\t\ttype: 'emitter'\n\t\t});\n\n\t\t// Throw if we didn't get either of the services.\n\t\tif (!ghListener) {\n\t\t\tthrow new Error(\"Couldn't create a Github listener\");\n\t\t}\n\t\tif (!ghEmitter) {\n\t\t\tthrow new Error(\"Couldn't create a Github emitter\");\n\t\t}\n\t\tthis.githubEmitter = <GithubService>ghEmitter;\n\t\tthis.githubListenerName = ghListener.serviceName;\n\t\tthis.githubEmitterName = ghEmitter.serviceName;\n\n\t\t// Github API handle\n\t\tthis.githubApi = (<GithubHandle>ghEmitter.apiHandle).github;\n\t\tif (!this.githubApi) {\n\t\t\tthrow new Error('No Github API instance found');\n\t\t}\n\n\t\t// Parse our environments.\n\t\ttry {\n\t\t\tthis.environments = JSON.parse(constObject.environments);\n\t\t} catch (err) {\n\t\t\tthrow new Error('There are no valid environments to use');\n\t\t}\n\t\tthis.logger.log(LogLevel.INFO, `---> ${name}: Aware of the following environments: ${environments}`);\n\n\t\t// Get the product repo.\n\t\tthis.productRepo = constObject.productRepo;\n\n\t\t// Create a new endpoint to allow keyframes to be promoted to a particular environment.\n\t\t// New Express app. We'll reuse it in the GH SL.\n\t\tthis.expressApp = express();\n\t\tif (!this.expressApp) {\n\t\t\tthrow new Error(\"Couldn't create an Express application\");\n\t\t}\n\n\t\t// Add body parser.\n\t\tthis.expressApp.use(bodyParser.urlencoded({ extended: true }));\n\t\tthis.expressApp.use(bodyParser.json());\n\t\tthis.expressApp.post(DeployKeyframePath, this.deployKeyframe);\n\n\t\t// Listen.\n\t\tthis.expressApp.listen(DeployKeyframePort, () => {\n\t\t\tthis.logger.log(LogLevel.INFO, `---> ${name}: Listening on ${DeployKeyframePort}`);\n\t\t});\n\n\t\t// We have two different WorkerMethods here:\n\t\t// 1) Status checks on PR open and commits\n\t\t// 2) PR review and label checks for merge\n\t\t_.forEach([\n\t\t\t{\n\t\t\t\tevents: [ 'pull_request', 'pull_request_review' ],\n\t\t\t\tlistenerMethod: this.lintKeyframe,\n\t\t\t\tname: 'LintKeyframe',\n\t\t\t},\n\t\t], (reg: GithubRegistration) => {\n\t\t\tghListener.registerEvent(reg);\n\t\t});\n\t}\n\n\t/**\n\t * Lints a keyframe when the Github ServiceListener sees a PR open or synchronised.\n\t *\n\t * @param _registration Registration object for the event.\n\t * @param event  The Github event.\n\t * @returns      Void Promise fulfilled when the method has finished processing the event.\n\t */\n\tprotected lintKeyframe = (_registration: GithubRegistration, event: ServiceEvent): Promise<void> => {\n\t\tconst cookedEvent: GithubCookedData = event.cookedEvent;\n\t\tconst pr: GithubApiTypes.PullRequest = cookedEvent.data.pull_request;\n\t\tconst head = cookedEvent.data.pull_request.head;\n\t\tconst owner = head.repo.owner.login;\n\t\tconst repo = head.repo.name;\n\t\tconst prNumber = pr.number;\n\t\tlet branchName = pr.head.ref;\n\t\tlet authToken: string;\n\t\tlet fullPath = '';\n\n\t\t// Ensure we only lint on an open and a synchronise.\n\t\tif ((event.cookedEvent.data.action !== 'opened') && (event.cookedEvent.data.action !== 'synchronize')) {\n\t\t\treturn Promise.resolve();\n\t\t}\n\n\t\tthis.logger.log(LogLevel.INFO, `Linting ${owner}/${repo}#${prNumber} keyframe for issues`);\n\n\t\t// Ensure that there's actually a keyframe in the PR. If there isn't, we don't\n\t\t// even bother cloning for a lint.\n\t\treturn this.dispatchToEmitter(this.githubEmitterName, {\n\t\t\tdata: {\n\t\t\t\towner,\n\t\t\t\trepo,\n\t\t\t\tpath: 'keyframe.yml'\n\t\t\t},\n\t\t\tmethod: this.githubApi.repos.getContent\n\t\t}).then(() => {\n\t\t\t// Successful path get means the file exists.\n\t\t\tauthToken = this.githubEmitter.authenticationToken;\n\n\t\t\t// Create a new temporary directory for the repo holding the keyframe.\n\t\t\treturn tempMkdir(`keyframebot-${repo}-${pr.number}_`);\n\t\t}).then((tempDir: string) => {\n\t\t\tfullPath = `${tempDir}${path.sep}`;\n\n\t\t\treturn Promise.mapSeries([\n\t\t\t\tBuildCommand('git', ['clone', `https://${authToken}:${authToken}@github.com/${owner}/${repo}`,\n\t\t\t\t\tfullPath],\n\t\t\t\t\t{ cwd: fullPath, retries: 3 }),\n\t\t\t\tBuildCommand('git', ['checkout', branchName], { cwd: fullPath })\n\t\t\t], ExecuteCommand);\n\t\t}).then(() => {\n\t\t\t// Lint the keyframe\n\t\t\t// For this we need the base SHA and the last commit SHA for the PR.\n\t\t\tconst baseSha = pr.base.sha;\n\t\t\tconst headSha = pr.head.sha;\n\t\t\treturn keyframeControl.lint(baseSha, headSha, fullPath);\n\t\t}).then((lintResults: keyframeControl.LintResponse) => {\n\t\t\tlet lintMessage = 'Keyframe linted successfully';\n\t\t\tlet commentPromise = Promise.resolve();\n\n\t\t\t// Change status depending on lint.\n\t\t\tif (!lintResults.valid) {\n\t\t\t\tlintMessage = 'Keyframe linting failed';\n\n\t\t\t\t// We get array of arrays atm, not sure why.\n\t\t\t\tconst flattenedErrors = _.flatten(lintResults.messages);\n\t\t\t\tlet errorMessage = 'The following errors occurred whilst linting the `${KeyframeFilename}` file:\\n';\n\t\t\t\t// Comment on the PR so that the author knows why the lint failed.\n\t\t\t\t_.each(flattenedErrors, (error: keyframeControl.LintError) => {\n\t\t\t\t\terrorMessage += `${error.message} at line ${error.parsedLine}: ${error.snippet}\\n`;\n\t\t\t\t});\n\n\t\t\t\tcommentPromise = this.dispatchToEmitter(this.githubEmitterName, {\n\t\t\t\t\tdata: {\n\t\t\t\t\t\tbody: errorMessage,\n\t\t\t\t\t\towner,\n\t\t\t\t\t\trepo,\n\t\t\t\t\t\tnumber: prNumber,\n\t\t\t\t\t},\n\t\t\t\t\tmethod: this.githubApi.issues.createComment,\n\t\t\t\t});\n\n\t\t\t}\n\t\t\treturn commentPromise.then(() => {\n\t\t\t\treturn this.dispatchToEmitter(this.githubEmitterName, {\n\t\t\t\t\tdata: {\n\t\t\t\t\t\tcontext: 'KeyframeBot',\n\t\t\t\t\t\tdescription: lintMessage,\n\t\t\t\t\t\towner,\n\t\t\t\t\t\trepo,\n\t\t\t\t\t\tsha: head.sha,\n\t\t\t\t\t\tstate: (lintResults.valid) ? 'success' : 'failure'\n\t\t\t\t\t},\n\t\t\t\t\tmethod: this.githubApi.repos.createStatus,\n\t\t\t\t});\n\t\t\t});\n\t\t}).catch((error: Error) => {\n\t\t\t// Generic 'could not lint the PR' error.\n\t\t\tthis.dispatchToEmitter(this.githubEmitterName, {\n\t\t\t\tdata: {\n\t\t\t\t\tbody: 'Unable to lint keyframe for this PR.',\n\t\t\t\t\tnumber: prNumber,\n\t\t\t\t\towner,\n\t\t\t\t\trepo\n\t\t\t\t},\n\t\t\t\tmethod: this.githubApi.issues.createComment\n\t\t\t});\n\t\t\tthis.reportError(error);\n\t\t}).finally(tempCleanup);\n\t}\n\n\t/**\n\t * Deployment route method, hanging off an Express server.\n\t * When a valid keyframe version and environment is passed, this will verify the product keyframe,\n\t * and then create a new branch in the environment. The keyframe will be committed to this branch\n\t * and a new PR will be based off it. This will automatically be linted by the process.\n\t *\n\t * @param req  The HTTP request.\n\t * @param res  The HTTP response.\n\t */\n\tprivate deployKeyframe = (req: express.Request, res: express.Response): void => {\n\t\tconst payload: KeyframeDetails = req.body;\n\t\tconst environment = payload.environment;\n\t\tconst version = payload.version;\n\t\tconst headerToken = req.get('Authorization') || '';\n\t\tconst productSplitRepo = this.productRepo.split('/');\n\t\tconst productOwner = productSplitRepo[0];\n\t\tconst productRepo = productSplitRepo[1];\n\t\tconst resin = resinSdk();\n\n\t\tlet decodedToken: any;\n\t\tlet owner = '';\n\t\tlet repo = '';\n\t\tlet deployDetails: DeploymentDetails;\n\n\t\t// Read the headers, validate the bearer token with the SDK.\n\t\tconst tokenMatch = headerToken.match(/^token (.*)$/i);\n\t\tif (!tokenMatch) {\n\t\t\tres.sendStatus(400);\n\t\t\treturn;\n\t\t}\n\n\t\tconst token = tokenMatch[1];\n\t\tresin.auth.loginWithToken(token).then(() => {\n\t\t\ttry {\n\t\t\t\tdecodedToken = jwtDecode(token);\n\t\t\t} catch(_err) {\n\t\t\t\tthrow new Error('Cannot decode token into JWT object');\n\t\t\t}\n\n\t\t\tif (!_.includes(decodedToken.permissions, 'admin.home')) {\n\t\t\t\t// Ensure it's a 401 so anyone without rights doesn't know it exists,\n\t\t\t\t// and use the same message as an invalid token.\n\t\t\t\tthrow new HTTPError(401, 'The token is invalid');\n\t\t\t}\n\n\t\t\t// Get the right environment.\n\t\t\tconst envRepo = this.environments[environment];\n\t\t\tif (!envRepo) {\n\t\t\t\tthrow new HTTPError(404, 'Passed environment does not exist');\n\t\t\t}\n\n\t\t\t// Prep for the environment PR.\n\t\t\tconst splitRepo = envRepo.split('/');\n\t\t\towner = splitRepo[0];\n\t\t\trepo = splitRepo[1];\n\n\t\t\t// Ensure that the version of the keyframe specified actually exists.\n\t\t\t// If the keyframe version doesn't exist, then Github will respond\n\t\t\t// that the tag doesn't exist. This will get thrown as an error, which\n\t\t\t// gets passed back to the user.\n\t\t\t// Because of this, we don't need to explicitly catch/set one here.\n\t\t\treturn this.dispatchToEmitter(this.githubEmitterName, {\n\t\t\t\tdata: {\n\t\t\t\t\towner: productOwner,\n\t\t\t\t\trepo: productRepo,\n\t\t\t\t\tpath: KeyframeFilename,\n\t\t\t\t\tref: `refs/tags/${version}`\n\t\t\t\t},\n\t\t\t\tmethod: this.githubApi.repos.getContent\n\t\t\t});\n\t\t}).then((keyframeFile: GithubApiTypes.Content) => {\n\t\t\t// Github API docs state a blob will *always* be encoded base64...\n\t\t\tif (keyframeFile.encoding !== 'base64') {\n\t\t\t\tthis.logger.log(LogLevel.WARN, `Keyframe file exists for ${productOwner}/${productRepo} but is not ` +\n\t\t\t\t\t`Base64 encoded! Aborting.`);\n\t\t\t\tthrow new HTTPError(500, 'Keyframe was not correctly encoded');\n\t\t\t}\n\n\t\t\t// We now go ahead and:\n\t\t\t// 1. Create a new branch for this, create it from the version passed\n\t\t\t// 2. Commit the keyframe to that branch\n\t\t\t// 3. Open a new PR pointing to that branch. Any relevant reviewers can be set (when it works) from\n\t\t\t//    a `.procbot.yml` config in the env repo.\n\n\t\t\t// Create a new branch and commit the keyframe to it.\n\t\t\tdeployDetails = {\n\t\t\t\tkeyframe: keyframeFile,\n\t\t\t\tusername: decodedToken.username,\n\t\t\t\tenvironment,\n\t\t\t\tversion,\n\t\t\t\towner,\n\t\t\t\trepo\n\t\t\t};\n\t\t\treturn this.createNewEnvironmentBranchCommit(deployDetails);\n\t\t}).then((branchName: string) => {\n\t\t\t// Open a new PR using the new branch.\n\t\t\t// If there's a `.procbot.yml` config in the branch, it'll do setup for us.\n\t\t\treturn this.dispatchToEmitter(this.githubEmitterName, {\n\t\t\t\tdata: {\n\t\t\t\t\towner,\n\t\t\t\t\trepo,\n\t\t\t\t\ttitle: `Merge product keyframe ${deployDetails.version} into ${deployDetails.environment}`,\n\t\t\t\t\tbody: `PR was created via a deployment of the keyframe by Resin admin ${deployDetails.username}.`,\n\t\t\t\t\thead: branchName,\n\t\t\t\t\tbase: 'master'\n\t\t\t\t},\n\t\t\t\tmethod: this.githubApi.pullRequests.create\n\t\t\t});\n\t\t}).then(() => {\n\t\t\t// Badabing. We'll now do linting on the *environment* branch automatically, as the\n\t\t\t// PR will kick it off. NOTE: How do we determine which type of linting we do?\n\t\t\t// I guess we could look at repo, but that's a bit horrible. See if there's a variables file?\n\t\t\t// Talk to Jack.\n\t\t\tres.sendStatus(200);\n\t\t}).catch((err: GithubError | HTTPError | Error) => {\n\t\t\tlet errorCode = (err instanceof HTTPError) ? err.httpCode : 500;\n\t\t\tthis.reportError(err);\n\t\t\tres.status(errorCode).send(err.message);\n\t\t});\n\t}\n\n\t/**\n\t * Creates a new branch on the specified environment for a given keyframe.\n\t *\n\t * @param branchDetails  The details of the keyframe, user and version.\n\t * @returns              A string naming the branch created on fulfilment.\n\t */\n\tprivate createNewEnvironmentBranchCommit = (branchDetails: DeploymentDetails): Promise<string> => {\n\t\tconst owner = branchDetails.owner;\n\t\tconst repo = branchDetails.repo;\n\t\tconst keyframe = branchDetails.keyframe;\n\t\tconst environment = branchDetails.environment;\n\t\tconst version = branchDetails.version;\n\t\tconst user = branchDetails.username;\n\t\tconst branchName = `${user}-${version}`;;\n\t\tlet branchSha = '';\n\t\tlet keyframeEntry: GithubApiTypes.TreeEntry | void;\n\t\tlet oldTreeSha = '';\n\t\tlet newTreeSha = '';\n\t\tlet commitSha = '';\n\t\tconst existsMessage = `The branch ${branchName} already exists on the ${environment} environment ` +\n\t\t\t`(${owner}/${repo})`;\n\n\t\t// Ensure that the branch we're about to create doesn't already exist.\n\t\treturn this.dispatchToEmitter(this.githubEmitterName, {\n\t\t\tdata: {\n\t\t\t\towner,\n\t\t\t\trepo,\n\t\t\t\tref: `heads/${branchName}`\n\t\t\t},\n\t\t\tmethod: this.githubApi.gitdata.getReference\n\t\t}).then(() => {\n\t\t\tthrow new HTTPError(409, existsMessage);\n\t\t}).catch((err: GithubError) => {\n\t\t\t// Not Found is what we want to hit, else throw a new error.\n\t\t\tif (err.message !== 'Not Found') {\n\t\t\t\tif (err.message === existsMessage) {\n\t\t\t\t\tthrow err;\n\t\t\t\t}\n\n\t\t\t\tthrow new HTTPError(409, `Couldn't determine whether a branch could be created for the ` +\n\t\t\t\t\t`${environment} environment (${owner}/${repo})`);\n\t\t\t}\n\n\t\t\t// Now we can create a new branch.\n\t\t\treturn this.dispatchToEmitter(this.githubEmitterName, {\n\t\t\t\tdata: {\n\t\t\t\t\towner,\n\t\t\t\t\trepo,\n\t\t\t\t\tref: 'heads/master'\n\t\t\t\t},\n\t\t\t\tmethod: this.githubApi.gitdata.getReference\n\t\t\t});\n\t\t}).then((reference: GithubApiTypes.Reference) => {\n\t\t\t// Ensure that master exists.\n\t\t\tif (reference.ref !== 'refs/heads/master') {\n\t\t\t\tthrow new Error(`Master doesn't exist on ${owner}/${repo}`);\n\t\t\t}\n\n\t\t\t// Grab the reference to the head.\n\t\t\tconst headSha = reference.object.sha;\n\n\t\t\t// Create the new branch, using the version name and user.\n\t\t\treturn this.dispatchToEmitter(this.githubEmitterName, {\n\t\t\t\tdata: {\n\t\t\t\t\towner,\n\t\t\t\t\trepo,\n\t\t\t\t\tref: `refs/heads/${branchName}`,\n\t\t\t\t\tsha: headSha\n\t\t\t\t},\n\t\t\t\tmethod: this.githubApi.gitdata.createReference\n\t\t\t});\n\t\t}).then((reference: GithubApiTypes.Reference) => {\n\t\t\tconst branchReference = reference.ref;\n\t\t\tbranchSha = reference.object.sha;\n\n\t\t\tif (!branchReference) {\n\t\t\t\t// 500 as we probably have no idea why, at this point.\n\t\t\t\tthrow new HTTPError(500, `Couldn't create the new branch for the ${environment} environment`);\n\t\t\t}\n\n\t\t\t// Get the tree for the branch.\n\t\t\treturn this.dispatchToEmitter(this.githubEmitterName, {\n\t\t\t\tdata: {\n\t\t\t\t\towner,\n\t\t\t\t\trepo,\n\t\t\t\t\tsha: branchSha,\n\t\t\t\t},\n\t\t\t\tmethod: this.githubApi.gitdata.getTree\n\t\t\t});\n\t\t}).then((tree: GithubApiTypes.Tree) => {\n\t\t\t// Find the right entry in the tree for the keyframe file.\n\t\t\tkeyframeEntry = _.find(tree.tree, (entry) => entry.path === KeyframeFilename);\n\t\t\tif (!keyframeEntry) {\n\t\t\t\t// Delete the reference we just created.\n\t\t\t\treturn this.dispatchToEmitter(this.githubEmitterName, {\n\t\t\t\t\tdata: {\n\t\t\t\t\t\towner,\n\t\t\t\t\t\trepo,\n\t\t\t\t\t\tref: `heads/${branchName}`\n\t\t\t\t\t},\n\t\t\t\t\tmethod: this.githubApi.gitdata.deleteReference\n\t\t\t\t}).then(() => {\n\t\t\t\t\tthrow new HTTPError(404, `Couldn't find the keyframe file in the ` +\n\t\t\t\t\t\t`${environment}(${owner}/${repo}) environment`);\n\t\t\t\t});\n\t\t\t}\n\n\t\t\t// Create a new blob using the keyframe data from the product repo.\n\t\t\t// This data is already base64 encoded, so we just use that.\n\t\t\toldTreeSha = tree.sha;\n\t\t\treturn this.dispatchToEmitter(this.githubEmitterName, {\n\t\t\t\tdata: {\n\t\t\t\t\towner,\n\t\t\t\t\trepo,\n\t\t\t\t\tcontent: keyframe.content,\n\t\t\t\t\tencoding: keyframe.encoding\n\t\t\t\t},\n\t\t\t\tmethod: this.githubApi.gitdata.createBlob\n\t\t\t});\n\t\t}).then((blob: GithubApiTypes.Blob) => {\n\t\t\t// We've got the blob, we've got the tree entry for the previous keyframe.\n\t\t\t// Create a new tree that includes this data.\n\t\t\tif (keyframeEntry) {\n\t\t\t\treturn this.dispatchToEmitter(this.githubEmitterName, {\n\t\t\t\t\tdata: {\n\t\t\t\t\t\tbase_tree: oldTreeSha,\n\t\t\t\t\t\towner,\n\t\t\t\t\t\trepo,\n\t\t\t\t\t\ttree: [{\n\t\t\t\t\t\t\tmode: keyframeEntry.mode,\n\t\t\t\t\t\t\tpath: keyframeEntry.path,\n\t\t\t\t\t\t\tsha: blob.sha,\n\t\t\t\t\t\t\ttype: 'blob'\n\t\t\t\t\t\t}]\n\t\t\t\t\t},\n\t\t\t\t\tmethod: this.githubApi.gitdata.createTree\n\t\t\t\t});\n\t\t\t}\n\t\t}).then((newTree: GithubApiTypes.Tree) => {\n\t\t\tnewTreeSha = newTree.sha;\n\n\t\t\t// Get the last commit for the branch.\n\t\t\treturn this.dispatchToEmitter(this.githubEmitterName, {\n\t\t\t\tdata: {\n\t\t\t\t\towner,\n\t\t\t\t\trepo,\n\t\t\t\t\tsha: branchSha\n\t\t\t\t},\n\t\t\t\tmethod: this.githubApi.repos.getCommit\n\t\t\t});\n\t\t}).then((lastCommit: GithubApiTypes.Commit) => {\n\t\t\t// We have new tree object, we now want to create a new commit referencing it.\n\t\t\treturn this.dispatchToEmitter(this.githubEmitterName, {\n\t\t\t\tdata: {\n\t\t\t\t\tmessage: `Update keyframe from product version ${version} on behalf of Resin admin ${user}.`,\n\t\t\t\t\towner,\n\t\t\t\t\tparents: [ lastCommit.sha ],\n\t\t\t\t\trepo,\n\t\t\t\t\ttree: newTreeSha\n\t\t\t\t},\n\t\t\t\tmethod: this.githubApi.gitdata.createCommit\n\t\t\t});\n\t\t}).then((commit: GithubApiTypes.Commit) => {\n\t\t\t// Update the branch to include the new commit SHA, so the head points to our new\n\t\t\t// keyframe.\n\t\t\tcommitSha = commit.sha;\n\t\t\treturn this.dispatchToEmitter(this.githubEmitterName, {\n\t\t\t\tdata: {\n\t\t\t\t\tforce: false,\n\t\t\t\t\towner,\n\t\t\t\t\tref: `heads/${branchName}`,\n\t\t\t\t\trepo,\n\t\t\t\t\tsha: commitSha\n\t\t\t\t},\n\t\t\t\tmethod: this.githubApi.gitdata.updateReference\n\t\t\t});\n\t\t}).then(() => {\n\t\t\treturn this.dispatchToEmitter(this.githubEmitterName, {\n\t\t\t\tdata: {\n\t\t\t\t\tmessage: version,\n\t\t\t\t\tobject: commitSha,\n\t\t\t\t\towner,\n\t\t\t\t\trepo,\n\t\t\t\t\ttag: version,\n\t\t\t\t\ttagger: {\n\t\t\t\t\t\tname: process.env.KEYFRAMEBOT_NAME,\n\t\t\t\t\t\temail: 'keyframebot@resin.io'\n\t\t\t\t\t},\n\t\t\t\t\ttype: 'commit'\n\t\t\t\t},\n\t\t\t\tmethod: this.githubApi.gitdata.createTag\n\t\t\t});\n\t\t}).then((newTag: GithubApiTypes.Tag) => {\n\t\t\t// Finally tag this with the version of the keyframe.\n\t\t\treturn this.dispatchToEmitter(this.githubEmitterName, {\n\t\t\t\tdata: {\n\t\t\t\t\towner,\n\t\t\t\t\tref: `refs/tags/${version}`,\n\t\t\t\t\trepo,\n\t\t\t\t\tsha: newTag.sha\n\t\t\t\t},\n\t\t\t\tmethod: this.githubApi.gitdata.createReference\n\t\t\t});\n\t\t}).return(branchName);\n\t}\n\n\t/**\n\t * Reports an error to the console.\n\t *\n\t * @param error  The error to report.\n\t */\n\tprivate reportError(error: GithubError | HTTPError | Error): void {\n\t\t// Log to console.\n\t\tthis.logger.alert(AlertLevel.ERROR, error.message);\n\t}\n}\n\n/** Creates a new instance of the KeyframeBot client. */\nexport function createBot(): KeyframeBot {\n\tif (!(process.env.KEYFRAMEBOT_NAME && process.env.KEYFRAMEBOT_INTEGRATION_ID &&\n\tprocess.env.KEYFRAMEBOT_PEM && process.env.KEYFRAMEBOT_WEBHOOK_SECRET && process.env.KEYFRAMEBOT_PRODUCT_REPO &&\n\tprocess.env.KEYFRAMEBOT_ENVIRONMENTS)) {\n\t\tthrow new Error(`'KEYFRAMEBOT_NAME', 'KEYFRAMEBOT_INTEGRATION_ID', 'KEYFRAMEBOT_PEM', ` +\n\t\t\t`'KEYFRAMEBOT_WEBHOOK_SECRET', 'KEYFRAMEBOT_ENVIRONMENTS' and 'KEYFRAMEBOT_PRODUCT_REPO' environment ` +\n\t\t\t'variables need setting');\n\t}\n\n\treturn new KeyframeBot(process.env.KEYFRAMEBOT_NAME, {\n\t\tintegrationId: process.env.KEYFRAMEBOT_INTEGRATION_ID,\n\t\tpem: process.env.KEYFRAMEBOT_PEM,\n\t\twebhookSecret: process.env.KEYFRAMEBOT_WEBHOOK_SECRET,\n\t\tproductRepo: process.env.KEYFRAMEBOT_PRODUCT_REPO,\n\t\tenvironments: process.env.KEYFRAMEBOT_ENVIRONMENTS\n\t});\n}\n"],"sourceRoot":"../../lib"}
=======
{"version":3,"sources":["bots/keyframebot.ts"],"names":[],"mappings":"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","file":"keyframebot.js","sourcesContent":["/*\nCopyright 2016-2017 Resin.io\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n   http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n/* tslint:disable: max-classes-per-file */\nimport * as Promise from 'bluebird';\nimport * as bodyParser from 'body-parser';\nimport * as ChildProcess from 'child_process';\nimport * as express from 'express';\nimport * as GithubApi from 'github';\nimport * as jwtDecode from 'jwt-decode';\nimport * as keyframeControl from 'keyfctl';\nimport * as _ from 'lodash';\nimport * as path from 'path';\nimport { cleanup, track } from 'temp';\nimport * as GithubApiTypes from '../apis/githubapi-types';\nimport { ProcBot } from '../framework/procbot';\nimport { GithubError } from '../services/github';\nimport { GithubCookedData, GithubHandle, GithubRegistration } from '../services/github-types';\nimport { ServiceEvent } from '../services/service-types';\nimport { AlertLevel, LogLevel } from '../utils/logger';\nimport TypedError = require('typed-error');\nimport resinSdk = require('resin-sdk');\n\nconst exec: (command: string, options?: any) => Promise<{}> = Promise.promisify(ChildProcess.exec);\nconst tempMkdir = Promise.promisify(track().mkdir);\nconst tempCleanup = Promise.promisify(cleanup);\n\n/**\n * A custom HTTP error to pass back in event of deployment failure.\n */\nclass HTTPError extends TypedError {\n\t/** Name of the error. */\n\tpublic name: string;\n\t/** Stack trace. */\n\tpublic stack: string;\n\t/** Message error from HTTP. */\n\tpublic message: string;\n\t/** HTTP error code. */\n\tpublic httpCode: number;\n\t/** Type of the error, to distinguish it from GithubError. */\n\tpublic type = 'HttpError';\n\n\t/**\n\t * Constructs a new HTTP error.\n\t * @param code     HTTP code to set.\n\t * @param message  Message to send back as reason error occurred.\n\t */\n\tconstructor(code: number, message: string) {\n\t\tsuper();\n\n\t\t// Attempt to parse from JSON.\n\t\tthis.httpCode = code;\n\t\tthis.message = message;\n\t}\n}\n\n/**\n * Details a keyframe for deployment,\n */\ninterface KeyframeDetails  {\n\t/** Version of the keyframe. */\n\tversion: string;\n\t/** The environment in which to deploy the keyframe. */\n\tenvironment: string;\n}\n\n/** Port on which the Github ServiceListener will listen. */\nconst GithubPort = 7788;\n/** Endpoint for deployment service. */\nconst DeployKeyframePath = '/deploykeyframe';\n/** Port for deployment service. */\nconst DeployKeyframePort = 7789;\n/** Standard name of a keyframe. */\nconst KeyframeFilename = 'keyframe.yml';\n\n/** Environments interface matching names to repositories. */\ninterface Environments {\n\t[index: string]: string;\n}\n\n/**\n * Deployment interface for passing to helper methods.\n */\ninterface DeploymentDetails {\n\t/** Keyframe body. */\n\tkeyframe: GithubApiTypes.Content;\n\t/** Resin admin username. */\n\tusername: string;\n\t/** Version of the keyframe. */\n\tversion: string;\n\t/** Owner of the environment repository. */\n\towner: string;\n\t/** Environment repository name. */\n\trepo: string;\n\t/** Environment name (eg. 'testing') */\n\tenvironment: string;\n}\n\n/**\n * Constructor for the KeyframeBot.\n */\nexport interface KeyframeBotConstructor {\n\t/** Github App id. */\n\tintegrationId: string;\n\t/** PEM for requesting data from Github ServiceEmitter. */\n\tpem: string;\n\t/** Secret webhook for receiving data from Github ServiceListener. */\n\twebhookSecret: string;\n\t/** The repo where product keyframes are stored. */\n\tproductRepo: string;\n\t/** The valid environments. JSON of form { \"environment\": \"repo\", ... } */\n\tenvironments: string;\n}\n\n// KeyframeBot listens for PullRequest and PullRequestReview events on both product\n// and environment repositories. The general flow is:\n// 1. User creates a PR to update the product keyframe.\n// 2. KeyframeBot lints the PR to ensure the keyframe is valid. It sets a status\n//    on the PR (pass/fail), along with an error if one exists.\n// 3. Usual PR flow is carried out, and eventually keyframe is merged to `master`.\n// 4. At some future point, a user requests that the keyframe is deployed to an environment.\n//    KeyframeBot runs an HTTP service that allows a user who is also a resin.io admin\n//    (ie. most engineers), to request this. They can do so by sending a payload of:\n//    '{ environment: <string>, version: <string> }' to it, along with their resin.io user token:\n//\n//    curl -XPOST http://<server>:7788/deploykeyframe -H 'Authorization: token <blah> \\\n//    -H 'Content-Type: application/json' -d '{\"version\": \"v4.4.0\", \"environment\": \"test\"}'\n// 5. If the version is valid, and the user is confirmed as a resin.io admin, then a new branch\n//    in the given environment is created based off `master`, and the keyframe is committed to it.\n//    (Branches are named `<user>-<keyframeVersion>`).\n// 6. Finally, a new PR is created in the environment repository, ready for review.\n//\n// TBD:\n//  - Test deployment on opening/update of environment PR to create a status check.\n//  - Extended linting of keyframes along with variables in an environment PR\n//  - Label for saying 'Deploy to environment', which will:\n//    * Carry out deploy to the correct environment from the PR\n//    * On succesful deploy, kick VersionBot to merge the PR to `master`\nexport class KeyframeBot extends ProcBot {\n\t/** Github ServiceListener. */\n\tprivate githubListenerName: string;\n\t/** Github ServiceEmitter. */\n\tprivate githubEmitterName: string;\n\t/** Instance of Github SDK API in use. */\n\tprivate githubApi: GithubApi;\n\t/** Instance of express. */\n\tprivate expressApp: express.Application;\n\t/** Environments available. */\n\tprivate environments: Environments;\n\t/** Product repo. */\n\tprivate productRepo: string;\n\n\t/**\n\t * Constructor for the KeyframeBot.\n\t *\n\t * @param name         Name of the KeyframeBot.\n\t * @param constObject  Constructor object.\n\t */\n\tconstructor(name: string, constObject: KeyframeBotConstructor) {\n\t\t// This is the KeyframeBot.\n\t\tsuper(name);\n\n\t\tconst integrationId = constObject.integrationId;\n\t\tconst pemString = constObject.pem;\n\t\tconst webhook = constObject.webhookSecret;\n\t\tconst environments = constObject.environments;\n\n\t\t// Create a new listener for Github with the right Integration ID.\n\t\tconst ghListener = this.addServiceListener('github', {\n\t\t\tclient: name,\n\t\t\tloginType: {\n\t\t\t\tintegrationId,\n\t\t\t\tpem: pemString,\n\t\t\t\ttype: 'integration'\n\t\t\t},\n\t\t\tpath: '/keyframehooks',\n\t\t\tport: GithubPort,\n\t\t\ttype: 'listener',\n\t\t\twebhookSecret: webhook\n\t\t});\n\n\t\t// Create a new emitter with the right Integration ID.\n\t\tconst ghEmitter = this.addServiceEmitter('github', {\n\t\t\tloginType: {\n\t\t\t\tintegrationId,\n\t\t\t\tpem: pemString,\n\t\t\t\ttype: 'integration'\n\t\t\t},\n\t\t\tpem: pemString,\n\t\t\ttype: 'emitter'\n\t\t});\n\n\t\t// Throw if we didn't get either of the services.\n\t\tif (!ghListener) {\n\t\t\tthrow new Error(\"Couldn't create a Github listener\");\n\t\t}\n\t\tif (!ghEmitter) {\n\t\t\tthrow new Error(\"Couldn't create a Github emitter\");\n\t\t}\n\t\tthis.githubListenerName = ghListener.serviceName;\n\t\tthis.githubEmitterName = ghEmitter.serviceName;\n\n\t\t// Github API handle\n\t\tthis.githubApi = (<GithubHandle>ghEmitter.apiHandle).github;\n\t\tif (!this.githubApi) {\n\t\t\tthrow new Error('No Github API instance found');\n\t\t}\n\n\t\t// Parse our environments.\n\t\ttry {\n\t\t\tthis.environments = JSON.parse(constObject.environments);\n\t\t} catch (err) {\n\t\t\tthrow new Error('There are no valid environments to use');\n\t\t}\n\t\tthis.logger.log(LogLevel.INFO, `---> ${name}: Aware of the following environments: ${environments}`);\n\n\t\t// Get the product repo.\n\t\tthis.productRepo = constObject.productRepo;\n\n\t\t// Create a new endpoint to allow keyframes to be promoted to a particular environment.\n\t\t// New Express app. We'll reuse it in the GH SL.\n\t\tthis.expressApp = express();\n\t\tif (!this.expressApp) {\n\t\t\tthrow new Error(\"Couldn't create an Express application\");\n\t\t}\n\n\t\t// Add body parser.\n\t\tthis.expressApp.use(bodyParser.urlencoded({ extended: true }));\n\t\tthis.expressApp.use(bodyParser.json());\n\t\tthis.expressApp.post(DeployKeyframePath, this.deployKeyframe);\n\n\t\t// Listen.\n\t\tthis.expressApp.listen(DeployKeyframePort, () => {\n\t\t\tthis.logger.log(LogLevel.INFO, `---> ${name}: Listening on ${DeployKeyframePort}`);\n\t\t});\n\n\t\t// We have two different WorkerMethods here:\n\t\t// 1) Status checks on PR open and commits\n\t\t// 2) PR review and label checks for merge\n\t\t_.forEach([\n\t\t\t{\n\t\t\t\tevents: [ 'pull_request', 'pull_request_review' ],\n\t\t\t\tlistenerMethod: this.lintKeyframe,\n\t\t\t\tname: 'LintKeyframe',\n\t\t\t},\n\t\t], (reg: GithubRegistration) => {\n\t\t\tghListener.registerEvent(reg);\n\t\t});\n\t}\n\n\t/**\n\t * Lints a keyframe when the Github ServiceListener sees a PR open or synchronised.\n\t *\n\t * @param _registration Registration object for the event.\n\t * @param event  The Github event.\n\t * @returns      Void Promise fulfilled when the method has finished processing the event.\n\t */\n\tprotected lintKeyframe = (_registration: GithubRegistration, event: ServiceEvent): Promise<void> => {\n\t\tconst cookedEvent: GithubCookedData = event.cookedEvent;\n\t\tconst pr: GithubApiTypes.PullRequest = cookedEvent.data.pull_request;\n\t\tconst head = cookedEvent.data.pull_request.head;\n\t\tconst owner = head.repo.owner.login;\n\t\tconst repo = head.repo.name;\n\t\tconst prNumber = pr.number;\n\t\tlet branchName = pr.head.ref;\n\t\tconst authToken = cookedEvent.githubAuthToken;\n\t\tlet fullPath = '';\n\t\tconst cliCommand = (command: string) => {\n\t\t\treturn exec(command, { cwd: fullPath });\n\t\t};\n\n\t\t// Ensure we only lint on an open and a synchronise.\n\t\tif ((event.cookedEvent.data.action !== 'opened') && (event.cookedEvent.data.action !== 'synchronize')) {\n\t\t\treturn Promise.resolve();\n\t\t}\n\n\t\tthis.logger.log(LogLevel.INFO, `Linting ${owner}/${repo}#${prNumber} keyframe for issues`);\n\n\t\t// Create a new temporary directory for the repo holding the keyframe.\n\t\treturn tempMkdir(`keyframebot-${repo}-${pr.number}_`).then((tempDir: string) => {\n\t\t\tfullPath = `${tempDir}${path.sep}`;\n\n\t\t\treturn Promise.mapSeries([\n\t\t\t\t`git clone https://${authToken}:${authToken}@github.com/${owner}/${repo} ${fullPath}`,\n\t\t\t\t`git checkout ${branchName}`\n\t\t\t], cliCommand);\n\t\t}).then(() => {\n\t\t\t// Lint the keyframe\n\t\t\t// For this we need the base SHA and the last commit SHA for the PR.\n\t\t\tconst baseSha = pr.base.sha;\n\t\t\tconst headSha = pr.head.sha;\n\t\t\treturn keyframeControl.lint(baseSha, headSha, fullPath);\n\t\t}).then((lintResults: keyframeControl.LintResponse) => {\n\t\t\tlet lintMessage = 'Keyframe linted successfully';\n\t\t\tlet commentPromise = Promise.resolve();\n\n\t\t\t// Change status depending on lint.\n\t\t\tif (!lintResults.valid) {\n\t\t\t\tlintMessage = 'Keyframe linting failed';\n\n\t\t\t\t// We get array of arrays atm, not sure why.\n\t\t\t\tconst flattenedErrors = _.flatten(lintResults.messages);\n\t\t\t\tlet errorMessage = 'The following errors occurred whilst linting the `${KeyframeFilename}` file:\\n';\n\t\t\t\t// Comment on the PR so that the author knows why the lint failed.\n\t\t\t\t_.each(flattenedErrors, (error: keyframeControl.LintError) => {\n\t\t\t\t\terrorMessage += `${error.message} at line ${error.parsedLine}: ${error.snippet}\\n`;\n\t\t\t\t});\n\n\t\t\t\tcommentPromise = this.dispatchToEmitter(this.githubEmitterName, {\n\t\t\t\t\tdata: {\n\t\t\t\t\t\tbody: errorMessage,\n\t\t\t\t\t\towner,\n\t\t\t\t\t\trepo,\n\t\t\t\t\t\tnumber: prNumber,\n\t\t\t\t\t},\n\t\t\t\t\tmethod: this.githubApi.issues.createComment,\n\t\t\t\t});\n\n\t\t\t}\n\t\t\treturn commentPromise.then(() => {\n\t\t\t\treturn this.dispatchToEmitter(this.githubEmitterName, {\n\t\t\t\t\tdata: {\n\t\t\t\t\t\tcontext: 'KeyframeBot',\n\t\t\t\t\t\tdescription: lintMessage,\n\t\t\t\t\t\towner,\n\t\t\t\t\t\trepo,\n\t\t\t\t\t\tsha: head.sha,\n\t\t\t\t\t\tstate: (lintResults.valid) ? 'success' : 'failure'\n\t\t\t\t\t},\n\t\t\t\t\tmethod: this.githubApi.repos.createStatus,\n\t\t\t\t});\n\t\t\t});\n\t\t}).finally(tempCleanup);\n\t}\n\n\t/**\n\t * Deployment route method, hanging off an Express server.\n\t * When a valid keyframe version and environment is passed, this will verify the product keyframe,\n\t * and then create a new branch in the environment. The keyframe will be committed to this branch\n\t * and a new PR will be based off it. This will automatically be linted by the process.\n\t *\n\t * @param req  The HTTP request.\n\t * @param res  The HTTP response.\n\t */\n\tprivate deployKeyframe = (req: express.Request, res: express.Response): void => {\n\t\tconst payload: KeyframeDetails = req.body;\n\t\tconst environment = payload.environment;\n\t\tconst version = payload.version;\n\t\tconst headerToken = req.get('Authorization') || '';\n\t\tconst productSplitRepo = this.productRepo.split('/');\n\t\tconst productOwner = productSplitRepo[0];\n\t\tconst productRepo = productSplitRepo[1];\n\t\tconst resin = resinSdk();\n\n\t\tlet decodedToken: any;\n\t\tlet owner = '';\n\t\tlet repo = '';\n\t\tlet deployDetails: DeploymentDetails;\n\n\t\t// Read the headers, validate the bearer token with the SDK.\n\t\tconst tokenMatch = headerToken.match(/^token (.*)$/i);\n\t\tif (!tokenMatch) {\n\t\t\tres.sendStatus(400);\n\t\t\treturn;\n\t\t}\n\n\t\tconst token = tokenMatch[1];\n\t\tresin.auth.loginWithToken(token).then(() => {\n\t\t\ttry {\n\t\t\t\tdecodedToken = jwtDecode(token);\n\t\t\t} catch(_err) {\n\t\t\t\tthrow new Error('Cannot decode token into JWT object');\n\t\t\t}\n\n\t\t\tif (!_.includes(decodedToken.permissions, 'admin.home')) {\n\t\t\t\t// Ensure it's a 401 so anyone without rights doesn't know it exists.\n\t\t\t\tthrow new HTTPError(401, 'Invalid access rights');\n\t\t\t}\n\n\t\t\t// Get the right environment.\n\t\t\tconst envRepo = this.environments[environment];\n\t\t\tif (!envRepo) {\n\t\t\t\tthrow new HTTPError(404, 'Passed environment does not exist');\n\t\t\t}\n\n\t\t\t// Prep for the environment PR.\n\t\t\tconst splitRepo = envRepo.split('/');\n\t\t\towner = splitRepo[0];\n\t\t\trepo = splitRepo[1];\n\n\t\t\t// Ensure that the version of the keyframe specified actually exists.\n\t\t\t// If the keyframe version doesn't exist, then Github will respond\n\t\t\t// that the tag doesn't exist. This will get thrown as an error, which\n\t\t\t// gets passed back to the user.\n\t\t\t// Because of this, we don't need to explicitly catch/set one here.\n\t\t\treturn this.dispatchToEmitter(this.githubEmitterName, {\n\t\t\t\tdata: {\n\t\t\t\t\towner: productOwner,\n\t\t\t\t\trepo: productRepo,\n\t\t\t\t\tpath: KeyframeFilename,\n\t\t\t\t\tref: `refs/tags/${version}`\n\t\t\t\t},\n\t\t\t\tmethod: this.githubApi.repos.getContent\n\t\t\t});\n\t\t}).then((keyframeFile: GithubApiTypes.Content) => {\n\t\t\t// Github API docs state a blob will *always* be encoded base64...\n\t\t\tif (keyframeFile.encoding !== 'base64') {\n\t\t\t\tthis.logger.log(LogLevel.WARN, `Keyframe file exists for ${productOwner}/${productRepo} but is not ` +\n\t\t\t\t\t`Base64 encoded! Aborting.`);\n\t\t\t\tthrow new HTTPError(500, 'Keyframe was not correctly encoded');\n\t\t\t}\n\n\t\t\t// We now go ahead and:\n\t\t\t// 1. Create a new branch for this, create it from the version passed\n\t\t\t// 2. Commit the keyframe to that branch\n\t\t\t// 3. Open a new PR pointing to that branch. Any relevant reviewers can be set (when it works) from\n\t\t\t//    a `.procbot.yml` config in the env repo.\n\n\t\t\t// Create a new branch and commit the keyframe to it.\n\t\t\tdeployDetails = {\n\t\t\t\tkeyframe: keyframeFile,\n\t\t\t\tusername: decodedToken.username,\n\t\t\t\tenvironment,\n\t\t\t\tversion,\n\t\t\t\towner,\n\t\t\t\trepo\n\t\t\t};\n\t\t\treturn this.createNewEnvironmentBranchCommit(deployDetails);\n\t\t}).then((branchName: string) => {\n\t\t\t// Open a new PR using the new branch.\n\t\t\t// If there's a `.procbot.yml` config in the branch, it'll do setup for us.\n\t\t\treturn this.dispatchToEmitter(this.githubEmitterName, {\n\t\t\t\tdata: {\n\t\t\t\t\towner,\n\t\t\t\t\trepo,\n\t\t\t\t\ttitle: `Merge product keyframe ${deployDetails.version} into ${deployDetails.environment}`,\n\t\t\t\t\tbody: `PR was created via a deployment of the keyframe by Resin admin ${deployDetails.username}.`,\n\t\t\t\t\thead: branchName,\n\t\t\t\t\tbase: 'master'\n\t\t\t\t},\n\t\t\t\tmethod: this.githubApi.pullRequests.create\n\t\t\t});\n\t\t}).then(() => {\n\t\t\t// Badabing. We'll now do linting on the *environment* branch automatically, as the\n\t\t\t// PR will kick it off. NOTE: How do we determine which type of linting we do?\n\t\t\t// I guess we could look at repo, but that's a bit horrible. See if there's a variables file?\n\t\t\t// Talk to Jack.\n\t\t\tres.sendStatus(200);\n\t\t}).catch((err: GithubError | HTTPError) => {\n\t\t\tlet errorCode = (err instanceof HTTPError) ? err.httpCode : 500;\n\t\t\tthis.reportError(err);\n\t\t\tres.status(errorCode).send(err.message);\n\t\t});\n\t}\n\n\t/**\n\t * Creates a new branch on the specified environment for a given keyframe.\n\t *\n\t * @param branchDetails  The details of the keyframe, user and version.\n\t * @returns              A string naming the branch created on fulfilment.\n\t */\n\tprivate createNewEnvironmentBranchCommit = (branchDetails: DeploymentDetails): Promise<string> => {\n\t\tconst owner = branchDetails.owner;\n\t\tconst repo = branchDetails.repo;\n\t\tconst keyframe = branchDetails.keyframe;\n\t\tconst environment = branchDetails.environment;\n\t\tconst version = branchDetails.version;\n\t\tconst user = branchDetails.username;\n\t\tconst branchName = `${user}-${version}`;;\n\t\tlet branchSha = '';\n\t\tlet keyframeEntry: GithubApiTypes.TreeEntry | void;\n\t\tlet oldTreeSha = '';\n\t\tlet newTreeSha = '';\n\t\tlet commitSha = '';\n\t\tconst existsMessage = `The branch ${branchName} already exists on the ${environment} environment ` +\n\t\t\t`(${owner}/${repo})`;\n\n\t\t// Ensure that the branch we're about to create doesn't already exist.\n\t\treturn this.dispatchToEmitter(this.githubEmitterName, {\n\t\t\tdata: {\n\t\t\t\towner,\n\t\t\t\trepo,\n\t\t\t\tref: `heads/${branchName}`\n\t\t\t},\n\t\t\tmethod: this.githubApi.gitdata.getReference\n\t\t}).then(() => {\n\t\t\tthrow new HTTPError(409, existsMessage);\n\t\t}).catch((err: GithubError) => {\n\t\t\t// Not Found is what we want to hit, else throw a new error.\n\t\t\tif (err.message !== 'Not Found') {\n\t\t\t\tif (err.message === existsMessage) {\n\t\t\t\t\tthrow err;\n\t\t\t\t}\n\n\t\t\t\tthrow new HTTPError(409, `Couldn't determine whether a branch could be created for the ` +\n\t\t\t\t\t`${environment} environment (${owner}/${repo})`);\n\t\t\t}\n\n\t\t\t// Now we can create a new branch.\n\t\t\treturn this.dispatchToEmitter(this.githubEmitterName, {\n\t\t\t\tdata: {\n\t\t\t\t\towner,\n\t\t\t\t\trepo,\n\t\t\t\t\tref: 'heads/master'\n\t\t\t\t},\n\t\t\t\tmethod: this.githubApi.gitdata.getReference\n\t\t\t});\n\t\t}).then((reference: GithubApiTypes.Reference) => {\n\t\t\t// Ensure that master exists.\n\t\t\tif (reference.ref !== 'refs/heads/master') {\n\t\t\t\tthrow new Error(`Master doesn't exist on ${owner}/${repo}`);\n\t\t\t}\n\n\t\t\t// Grab the reference to the head.\n\t\t\tconst headSha = reference.object.sha;\n\n\t\t\t// Create the new branch, using the version name and user.\n\t\t\treturn this.dispatchToEmitter(this.githubEmitterName, {\n\t\t\t\tdata: {\n\t\t\t\t\towner,\n\t\t\t\t\trepo,\n\t\t\t\t\tref: `refs/heads/${branchName}`,\n\t\t\t\t\tsha: headSha\n\t\t\t\t},\n\t\t\t\tmethod: this.githubApi.gitdata.createReference\n\t\t\t});\n\t\t}).then((reference: GithubApiTypes.Reference) => {\n\t\t\tconst branchReference = reference.ref;\n\t\t\tbranchSha = reference.object.sha;\n\n\t\t\tif (!branchReference) {\n\t\t\t\t// 500 as we probably have no idea why, at this point.\n\t\t\t\tthrow new HTTPError(500, `Couldn't create the new branch for the ${environment} environment`);\n\t\t\t}\n\n\t\t\t// Get the tree for the branch.\n\t\t\treturn this.dispatchToEmitter(this.githubEmitterName, {\n\t\t\t\tdata: {\n\t\t\t\t\towner,\n\t\t\t\t\trepo,\n\t\t\t\t\tsha: branchSha,\n\t\t\t\t},\n\t\t\t\tmethod: this.githubApi.gitdata.getTree\n\t\t\t});\n\t\t}).then((tree: GithubApiTypes.Tree) => {\n\t\t\t// Find the right entry in the tree for the keyframe file.\n\t\t\tkeyframeEntry = _.find(tree.tree, (entry) => entry.path === KeyframeFilename);\n\t\t\tif (!keyframeEntry) {\n\t\t\t\t// Delete the reference we just created.\n\t\t\t\treturn this.dispatchToEmitter(this.githubEmitterName, {\n\t\t\t\t\tdata: {\n\t\t\t\t\t\towner,\n\t\t\t\t\t\trepo,\n\t\t\t\t\t\tref: `heads/${branchName}`\n\t\t\t\t\t},\n\t\t\t\t\tmethod: this.githubApi.gitdata.deleteReference\n\t\t\t\t}).then(() => {\n\t\t\t\t\tthrow new HTTPError(404, `Couldn't find the keyframe file in the ` +\n\t\t\t\t\t\t`${environment}(${owner}/${repo}) environment`);\n\t\t\t\t});\n\t\t\t}\n\n\t\t\t// Create a new blob using the keyframe data from the product repo.\n\t\t\t// This data is already base64 encoded, so we just use that.\n\t\t\toldTreeSha = tree.sha;\n\t\t\treturn this.dispatchToEmitter(this.githubEmitterName, {\n\t\t\t\tdata: {\n\t\t\t\t\towner,\n\t\t\t\t\trepo,\n\t\t\t\t\tcontent: keyframe.content,\n\t\t\t\t\tencoding: keyframe.encoding\n\t\t\t\t},\n\t\t\t\tmethod: this.githubApi.gitdata.createBlob\n\t\t\t});\n\t\t}).then((blob: GithubApiTypes.Blob) => {\n\t\t\t// We've got the blob, we've got the tree entry for the previous keyframe.\n\t\t\t// Create a new tree that includes this data.\n\t\t\tif (keyframeEntry) {\n\t\t\t\treturn this.dispatchToEmitter(this.githubEmitterName, {\n\t\t\t\t\tdata: {\n\t\t\t\t\t\tbase_tree: oldTreeSha,\n\t\t\t\t\t\towner,\n\t\t\t\t\t\trepo,\n\t\t\t\t\t\ttree: [{\n\t\t\t\t\t\t\tmode: keyframeEntry.mode,\n\t\t\t\t\t\t\tpath: keyframeEntry.path,\n\t\t\t\t\t\t\tsha: blob.sha,\n\t\t\t\t\t\t\ttype: 'blob'\n\t\t\t\t\t\t}]\n\t\t\t\t\t},\n\t\t\t\t\tmethod: this.githubApi.gitdata.createTree\n\t\t\t\t});\n\t\t\t}\n\t\t}).then((newTree: GithubApiTypes.Tree) => {\n\t\t\tnewTreeSha = newTree.sha;\n\n\t\t\t// Get the last commit for the branch.\n\t\t\treturn this.dispatchToEmitter(this.githubEmitterName, {\n\t\t\t\tdata: {\n\t\t\t\t\towner,\n\t\t\t\t\trepo,\n\t\t\t\t\tsha: branchSha\n\t\t\t\t},\n\t\t\t\tmethod: this.githubApi.repos.getCommit\n\t\t\t});\n\t\t}).then((lastCommit: GithubApiTypes.Commit) => {\n\t\t\t// We have new tree object, we now want to create a new commit referencing it.\n\t\t\treturn this.dispatchToEmitter(this.githubEmitterName, {\n\t\t\t\tdata: {\n\t\t\t\t\tmessage: `Update keyframe from product version ${version} on behalf of Resin admin ${user}.`,\n\t\t\t\t\towner,\n\t\t\t\t\tparents: [ lastCommit.sha ],\n\t\t\t\t\trepo,\n\t\t\t\t\ttree: newTreeSha\n\t\t\t\t},\n\t\t\t\tmethod: this.githubApi.gitdata.createCommit\n\t\t\t});\n\t\t}).then((commit: GithubApiTypes.Commit) => {\n\t\t\t// Update the branch to include the new commit SHA, so the head points to our new\n\t\t\t// keyframe.\n\t\t\tcommitSha = commit.sha;\n\t\t\treturn this.dispatchToEmitter(this.githubEmitterName, {\n\t\t\t\tdata: {\n\t\t\t\t\tforce: false,\n\t\t\t\t\towner,\n\t\t\t\t\tref: `heads/${branchName}`,\n\t\t\t\t\trepo,\n\t\t\t\t\tsha: commitSha\n\t\t\t\t},\n\t\t\t\tmethod: this.githubApi.gitdata.updateReference\n\t\t\t});\n\t\t}).then(() => {\n\t\t\treturn this.dispatchToEmitter(this.githubEmitterName, {\n\t\t\t\tdata: {\n\t\t\t\t\tmessage: version,\n\t\t\t\t\tobject: commitSha,\n\t\t\t\t\towner,\n\t\t\t\t\trepo,\n\t\t\t\t\ttag: version,\n\t\t\t\t\ttagger: {\n\t\t\t\t\t\tname: process.env.KEYFRAMEBOT_NAME,\n\t\t\t\t\t\temail: 'keyframebot@resin.io'\n\t\t\t\t\t},\n\t\t\t\t\ttype: 'commit'\n\t\t\t\t},\n\t\t\t\tmethod: this.githubApi.gitdata.createTag\n\t\t\t});\n\t\t}).then((newTag: GithubApiTypes.Tag) => {\n\t\t\t// Finally tag this with the version of the keyframe.\n\t\t\treturn this.dispatchToEmitter(this.githubEmitterName, {\n\t\t\t\tdata: {\n\t\t\t\t\towner,\n\t\t\t\t\tref: `refs/tags/${version}`,\n\t\t\t\t\trepo,\n\t\t\t\t\tsha: newTag.sha\n\t\t\t\t},\n\t\t\t\tmethod: this.githubApi.gitdata.createReference\n\t\t\t});\n\t\t}).return(branchName);\n\t}\n\n\t/**\n\t * Reports an error to the console.\n\t *\n\t * @param error  The error to report.\n\t */\n\tprivate reportError(error: GithubError | HTTPError): void {\n\t\t// Log to console.\n\t\tthis.logger.alert(AlertLevel.ERROR, error.message);\n\t}\n}\n\n/** Creates a new instance of the KeyframeBot client. */\nexport function createBot(): KeyframeBot {\n\tif (!(process.env.KEYFRAMEBOT_NAME && process.env.KEYFRAMEBOT_INTEGRATION_ID &&\n\tprocess.env.KEYFRAMEBOT_PEM && process.env.KEYFRAMEBOT_WEBHOOK_SECRET && process.env.KEYFRAMEBOT_PRODUCT_REPO &&\n\tprocess.env.KEYFRAMEBOT_ENVIRONMENTS)) {\n\t\tthrow new Error(`'KEYFRAMEBOT_NAME', 'KEYFRAMEBOT_INTEGRATION_ID', 'KEYFRAMEBOT_PEM', ` +\n\t\t\t`'KEYFRAMEBOT_WEBHOOK_SECRET', 'KEYFRAMEBOT_ENVIRONMENTS' and 'KEYFRAMEBOT_PRODUCT_REPO' environment ` +\n\t\t\t'variables need setting');\n\t}\n\n\treturn new KeyframeBot(process.env.KEYFRAMEBOT_NAME, {\n\t\tintegrationId: process.env.KEYFRAMEBOT_INTEGRATION_ID,\n\t\tpem: process.env.KEYFRAMEBOT_PEM,\n\t\twebhookSecret: process.env.KEYFRAMEBOT_WEBHOOK_SECRET,\n\t\tproductRepo: process.env.KEYFRAMEBOT_PRODUCT_REPO,\n\t\tenvironments: process.env.KEYFRAMEBOT_ENVIRONMENTS\n\t});\n}\n"],"sourceRoot":"../../lib"}
>>>>>>> Fix issue with TypeDoc that was using local file paths for definitions.
>>>>>>> Ensure that the head for a PR is always correctly used; move to Github App endpoints instead of Integration.
=======
{"version":3,"sources":["bots/keyframebot.ts"],"names":[],"mappings":"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","file":"keyframebot.js","sourcesContent":["/*\nCopyright 2016-2017 Resin.io\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n   http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n/* tslint:disable: max-classes-per-file */\nimport * as Promise from 'bluebird';\nimport * as bodyParser from 'body-parser';\nimport * as express from 'express';\nimport * as GithubApi from 'github';\nimport * as jwtDecode from 'jwt-decode';\nimport * as keyframeControl from 'keyfctl';\nimport * as _ from 'lodash';\nimport * as path from 'path';\nimport { cleanup, track } from 'temp';\nimport * as GithubApiTypes from '../apis/githubapi-types';\nimport { ProcBot } from '../framework/procbot';\nimport { GithubError, GithubService } from '../services/github';\nimport { GithubCookedData, GithubHandle, GithubRegistration } from '../services/github-types';\nimport { ServiceEvent } from '../services/service-types';\nimport { BuildCommand, ExecuteCommand } from '../utils/environment';\nimport { AlertLevel, LogLevel } from '../utils/logger';\nimport TypedError = require('typed-error');\nimport resinSdk = require('resin-sdk');\n\nconst tempMkdir = Promise.promisify(track().mkdir);\nconst tempCleanup = Promise.promisify(cleanup);\n\n/**\n * A custom HTTP error to pass back in event of deployment failure.\n */\nclass HTTPError extends TypedError {\n\t/** Name of the error. */\n\tpublic name: string;\n\t/** Stack trace. */\n\tpublic stack: string;\n\t/** Message error from HTTP. */\n\tpublic message: string;\n\t/** HTTP error code. */\n\tpublic httpCode: number;\n\t/** Type of the error, to distinguish it from GithubError. */\n\tpublic type = 'HttpError';\n\n\t/**\n\t * Constructs a new HTTP error.\n\t * @param code     HTTP code to set.\n\t * @param message  Message to send back as reason error occurred.\n\t */\n\tconstructor(code: number, message: string) {\n\t\tsuper();\n\n\t\t// Attempt to parse from JSON.\n\t\tthis.httpCode = code;\n\t\tthis.message = message;\n\t}\n}\n\n/**\n * Details a keyframe for deployment,\n */\ninterface KeyframeDetails  {\n\t/** Version of the keyframe. */\n\tversion: string;\n\t/** The environment in which to deploy the keyframe. */\n\tenvironment: string;\n}\n\n/** Port on which the Github ServiceListener will listen. */\nconst GithubPort = 7788;\n/** Endpoint for deployment service. */\nconst DeployKeyframePath = '/deploykeyframe';\n/** Port for deployment service. */\nconst DeployKeyframePort = 7789;\n/** Standard name of a keyframe. */\nconst KeyframeFilename = 'keyframe.yml';\n\n/** Environments interface matching names to repositories. */\ninterface Environments {\n\t[index: string]: string;\n}\n\n/**\n * Deployment interface for passing to helper methods.\n */\ninterface DeploymentDetails {\n\t/** Keyframe body. */\n\tkeyframe: GithubApiTypes.Content;\n\t/** Resin admin username. */\n\tusername: string;\n\t/** Version of the keyframe. */\n\tversion: string;\n\t/** Owner of the environment repository. */\n\towner: string;\n\t/** Environment repository name. */\n\trepo: string;\n\t/** Environment name (eg. 'testing') */\n\tenvironment: string;\n}\n\n/**\n * Constructor for the KeyframeBot.\n */\nexport interface KeyframeBotConstructor {\n\t/** Github App id. */\n\tintegrationId: string;\n\t/** PEM for requesting data from Github ServiceEmitter. */\n\tpem: string;\n\t/** Secret webhook for receiving data from Github ServiceListener. */\n\twebhookSecret: string;\n\t/** The repo where product keyframes are stored. */\n\tproductRepo: string;\n\t/** The valid environments. JSON of form { \"environment\": \"repo\", ... } */\n\tenvironments: string;\n}\n\n// KeyframeBot listens for PullRequest and PullRequestReview events on both product\n// and environment repositories. The general flow is:\n// 1. User creates a PR to update the product keyframe.\n// 2. KeyframeBot lints the PR to ensure the keyframe is valid. It sets a status\n//    on the PR (pass/fail), along with an error if one exists.\n// 3. Usual PR flow is carried out, and eventually keyframe is merged to `master`.\n// 4. At some future point, a user requests that the keyframe is deployed to an environment.\n//    KeyframeBot runs an HTTP service that allows a user who is also a resin.io admin\n//    (ie. most engineers), to request this. They can do so by sending a payload of:\n//    '{ environment: <string>, version: <string> }' to it, along with their resin.io user token:\n//\n//    curl -XPOST http://<server>:7789/deploykeyframe -H 'Authorization: token <blah>' \\\n//    -H 'Content-Type: application/json' -d '{\"version\": \"v4.4.0\", \"environment\": \"test\"}'\n// 5. If the version is valid, and the user is confirmed as a resin.io admin, then a new branch\n//    in the given environment is created based off `master`, and the keyframe is committed to it.\n//    (Branches are named `<user>-<keyframeVersion>`).\n// 6. Finally, a new PR is created in the environment repository, ready for review.\n//\n// TBD:\n//  - Test deployment on opening/update of environment PR to create a status check.\n//  - Extended linting of keyframes along with variables in an environment PR\n//  - Label for saying 'Deploy to environment', which will:\n//    * Carry out deploy to the correct environment from the PR\n//    * On succesful deploy, kick VersionBot to merge the PR to `master`\nexport class KeyframeBot extends ProcBot {\n\t/** Github ServiceListener name. */\n\tprivate githubListenerName: string;\n\t/** Github ServiceEmitter. */\n\tprivate githubEmitter: GithubService;\n\t/** Github ServiceEmitter name. */\n\tprivate githubEmitterName: string;\n\t/** Instance of Github SDK API in use. */\n\tprivate githubApi: GithubApi;\n\t/** Instance of express. */\n\tprivate expressApp: express.Application;\n\t/** Environments available. */\n\tprivate environments: Environments;\n\t/** Product repo. */\n\tprivate productRepo: string;\n\n\t/**\n\t * Constructor for the KeyframeBot.\n\t *\n\t * @param name         Name of the KeyframeBot.\n\t * @param constObject  Constructor object.\n\t */\n\tconstructor(name: string, constObject: KeyframeBotConstructor) {\n\t\t// This is the KeyframeBot.\n\t\tsuper(name);\n\n\t\tconst integrationId = constObject.integrationId;\n\t\tconst pemString = constObject.pem;\n\t\tconst webhook = constObject.webhookSecret;\n\t\tconst environments = constObject.environments;\n\n\t\t// Create a new listener for Github with the right Integration ID.\n\t\tconst ghListener = this.addServiceListener('github', {\n\t\t\tclient: name,\n\t\t\tloginType: {\n\t\t\t\tintegrationId,\n\t\t\t\tpem: pemString,\n\t\t\t\ttype: 'integration'\n\t\t\t},\n\t\t\tpath: '/keyframehooks',\n\t\t\tport: GithubPort,\n\t\t\ttype: 'listener',\n\t\t\twebhookSecret: webhook\n\t\t});\n\n\t\t// Create a new emitter with the right Integration ID.\n\t\tconst ghEmitter = this.addServiceEmitter('github', {\n\t\t\tloginType: {\n\t\t\t\tintegrationId,\n\t\t\t\tpem: pemString,\n\t\t\t\ttype: 'integration'\n\t\t\t},\n\t\t\tpem: pemString,\n\t\t\ttype: 'emitter'\n\t\t});\n\n\t\t// Throw if we didn't get either of the services.\n\t\tif (!ghListener) {\n\t\t\tthrow new Error(\"Couldn't create a Github listener\");\n\t\t}\n\t\tif (!ghEmitter) {\n\t\t\tthrow new Error(\"Couldn't create a Github emitter\");\n\t\t}\n\t\tthis.githubEmitter = <GithubService>ghEmitter;\n\t\tthis.githubListenerName = ghListener.serviceName;\n\t\tthis.githubEmitterName = ghEmitter.serviceName;\n\n\t\t// Github API handle\n\t\tthis.githubApi = (<GithubHandle>ghEmitter.apiHandle).github;\n\t\tif (!this.githubApi) {\n\t\t\tthrow new Error('No Github API instance found');\n\t\t}\n\n\t\t// Parse our environments.\n\t\ttry {\n\t\t\tthis.environments = JSON.parse(constObject.environments);\n\t\t} catch (err) {\n\t\t\tthrow new Error('There are no valid environments to use');\n\t\t}\n\t\tthis.logger.log(LogLevel.INFO, `---> ${name}: Aware of the following environments: ${environments}`);\n\n\t\t// Get the product repo.\n\t\tthis.productRepo = constObject.productRepo;\n\n\t\t// Create a new endpoint to allow keyframes to be promoted to a particular environment.\n\t\t// New Express app. We'll reuse it in the GH SL.\n\t\tthis.expressApp = express();\n\t\tif (!this.expressApp) {\n\t\t\tthrow new Error(\"Couldn't create an Express application\");\n\t\t}\n\n\t\t// Add body parser.\n\t\tthis.expressApp.use(bodyParser.urlencoded({ extended: true }));\n\t\tthis.expressApp.use(bodyParser.json());\n\t\tthis.expressApp.post(DeployKeyframePath, this.deployKeyframe);\n\n\t\t// Listen.\n\t\tthis.expressApp.listen(DeployKeyframePort, () => {\n\t\t\tthis.logger.log(LogLevel.INFO, `---> ${name}: Listening on ${DeployKeyframePort}`);\n\t\t});\n\n\t\t// We have two different WorkerMethods here:\n\t\t// 1) Status checks on PR open and commits\n\t\t// 2) PR review and label checks for merge\n\t\t_.forEach([\n\t\t\t{\n\t\t\t\tevents: [ 'pull_request', 'pull_request_review' ],\n\t\t\t\tlistenerMethod: this.lintKeyframe,\n\t\t\t\tname: 'LintKeyframe',\n\t\t\t},\n\t\t], (reg: GithubRegistration) => {\n\t\t\tghListener.registerEvent(reg);\n\t\t});\n\t}\n\n\t/**\n\t * Lints a keyframe when the Github ServiceListener sees a PR open or synchronised.\n\t *\n\t * @param _registration Registration object for the event.\n\t * @param event  The Github event.\n\t * @returns      Void Promise fulfilled when the method has finished processing the event.\n\t */\n\tprotected lintKeyframe = (_registration: GithubRegistration, event: ServiceEvent): Promise<void> => {\n\t\tconst cookedEvent: GithubCookedData = event.cookedEvent;\n\t\tconst pr: GithubApiTypes.PullRequest = cookedEvent.data.pull_request;\n\t\tconst head = cookedEvent.data.pull_request.head;\n\t\tconst owner = head.repo.owner.login;\n\t\tconst repo = head.repo.name;\n\t\tconst prNumber = pr.number;\n\t\tlet branchName = pr.head.ref;\n\t\tlet authToken: string;\n\t\tlet fullPath = '';\n\n\t\t// Ensure we only lint on an open and a synchronise.\n\t\tif ((event.cookedEvent.data.action !== 'opened') && (event.cookedEvent.data.action !== 'synchronize')) {\n\t\t\treturn Promise.resolve();\n\t\t}\n\n\t\tthis.logger.log(LogLevel.INFO, `Linting ${owner}/${repo}#${prNumber} keyframe for issues`);\n\n\t\t// Ensure that there's actually a keyframe in the PR. If there isn't, we don't\n\t\t// even bother cloning for a lint.\n\t\treturn this.dispatchToEmitter(this.githubEmitterName, {\n\t\t\tdata: {\n\t\t\t\towner,\n\t\t\t\trepo,\n\t\t\t\tpath: 'keyframe.yml'\n\t\t\t},\n\t\t\tmethod: this.githubApi.repos.getContent\n\t\t}).then(() => {\n\t\t\t// Successful path get means the file exists.\n\t\t\tauthToken = this.githubEmitter.authenticationToken;\n\n\t\t\t// Create a new temporary directory for the repo holding the keyframe.\n\t\t\treturn tempMkdir(`keyframebot-${repo}-${pr.number}_`);\n\t\t}).then((tempDir: string) => {\n\t\t\tfullPath = `${tempDir}${path.sep}`;\n\n\t\t\treturn Promise.mapSeries([\n\t\t\t\tBuildCommand('git', ['clone', `https://${authToken}:${authToken}@github.com/${owner}/${repo}`,\n\t\t\t\t\tfullPath],\n\t\t\t\t\t{ cwd: fullPath, retries: 3 }),\n\t\t\t\tBuildCommand('git', ['checkout', branchName], { cwd: fullPath })\n\t\t\t], ExecuteCommand);\n\t\t}).then(() => {\n\t\t\t// Lint the keyframe\n\t\t\t// For this we need the base SHA and the last commit SHA for the PR.\n\t\t\tconst baseSha = pr.base.sha;\n\t\t\tconst headSha = pr.head.sha;\n\t\t\treturn keyframeControl.lint(baseSha, headSha, fullPath);\n\t\t}).then((lintResults: keyframeControl.LintResponse) => {\n\t\t\tlet lintMessage = 'Keyframe linted successfully';\n\t\t\tlet commentPromise = Promise.resolve();\n\n\t\t\t// Change status depending on lint.\n\t\t\tif (!lintResults.valid) {\n\t\t\t\tlintMessage = 'Keyframe linting failed';\n\n\t\t\t\t// We get array of arrays atm, not sure why.\n\t\t\t\tconst flattenedErrors = _.flatten(lintResults.messages);\n\t\t\t\tlet errorMessage = 'The following errors occurred whilst linting the `${KeyframeFilename}` file:\\n';\n\t\t\t\t// Comment on the PR so that the author knows why the lint failed.\n\t\t\t\t_.each(flattenedErrors, (error: keyframeControl.LintError) => {\n\t\t\t\t\terrorMessage += `${error.message} at line ${error.parsedLine}: ${error.snippet}\\n`;\n\t\t\t\t});\n\n\t\t\t\tcommentPromise = this.dispatchToEmitter(this.githubEmitterName, {\n\t\t\t\t\tdata: {\n\t\t\t\t\t\tbody: errorMessage,\n\t\t\t\t\t\towner,\n\t\t\t\t\t\trepo,\n\t\t\t\t\t\tnumber: prNumber,\n\t\t\t\t\t},\n\t\t\t\t\tmethod: this.githubApi.issues.createComment,\n\t\t\t\t});\n\n\t\t\t}\n\t\t\treturn commentPromise.then(() => {\n\t\t\t\treturn this.dispatchToEmitter(this.githubEmitterName, {\n\t\t\t\t\tdata: {\n\t\t\t\t\t\tcontext: 'KeyframeBot',\n\t\t\t\t\t\tdescription: lintMessage,\n\t\t\t\t\t\towner,\n\t\t\t\t\t\trepo,\n\t\t\t\t\t\tsha: head.sha,\n\t\t\t\t\t\tstate: (lintResults.valid) ? 'success' : 'failure'\n\t\t\t\t\t},\n\t\t\t\t\tmethod: this.githubApi.repos.createStatus,\n\t\t\t\t});\n\t\t\t});\n\t\t}).catch((error: Error) => {\n\t\t\t// Generic 'could not lint the PR' error.\n\t\t\tthis.dispatchToEmitter(this.githubEmitterName, {\n\t\t\t\tdata: {\n\t\t\t\t\tbody: 'Unable to lint keyframe for this PR.',\n\t\t\t\t\tnumber: prNumber,\n\t\t\t\t\towner,\n\t\t\t\t\trepo\n\t\t\t\t},\n\t\t\t\tmethod: this.githubApi.issues.createComment\n\t\t\t});\n\t\t\tthis.reportError(error);\n\t\t}).finally(tempCleanup);\n\t}\n\n\t/**\n\t * Deployment route method, hanging off an Express server.\n\t * When a valid keyframe version and environment is passed, this will verify the product keyframe,\n\t * and then create a new branch in the environment. The keyframe will be committed to this branch\n\t * and a new PR will be based off it. This will automatically be linted by the process.\n\t *\n\t * @param req  The HTTP request.\n\t * @param res  The HTTP response.\n\t */\n\tprivate deployKeyframe = (req: express.Request, res: express.Response): void => {\n\t\tconst payload: KeyframeDetails = req.body;\n\t\tconst environment = payload.environment;\n\t\tconst version = payload.version;\n\t\tconst headerToken = req.get('Authorization') || '';\n\t\tconst productSplitRepo = this.productRepo.split('/');\n\t\tconst productOwner = productSplitRepo[0];\n\t\tconst productRepo = productSplitRepo[1];\n\t\tconst resin = resinSdk();\n\n\t\tlet decodedToken: any;\n\t\tlet owner = '';\n\t\tlet repo = '';\n\t\tlet deployDetails: DeploymentDetails;\n\n\t\t// Read the headers, validate the bearer token with the SDK.\n\t\tconst tokenMatch = headerToken.match(/^token (.*)$/i);\n\t\tif (!tokenMatch) {\n\t\t\tres.sendStatus(400);\n\t\t\treturn;\n\t\t}\n\n\t\tconst token = tokenMatch[1];\n\t\tresin.auth.loginWithToken(token).then(() => {\n\t\t\ttry {\n\t\t\t\tdecodedToken = jwtDecode(token);\n\t\t\t} catch(_err) {\n\t\t\t\tthrow new Error('Cannot decode token into JWT object');\n\t\t\t}\n\n\t\t\tif (!_.includes(decodedToken.permissions, 'admin.home')) {\n\t\t\t\t// Ensure it's a 401 so anyone without rights doesn't know it exists,\n\t\t\t\t// and use the same message as an invalid token.\n\t\t\t\tthrow new HTTPError(401, 'The token is invalid');\n\t\t\t}\n\n\t\t\t// Get the right environment.\n\t\t\tconst envRepo = this.environments[environment];\n\t\t\tif (!envRepo) {\n\t\t\t\tthrow new HTTPError(404, 'Passed environment does not exist');\n\t\t\t}\n\n\t\t\t// Prep for the environment PR.\n\t\t\tconst splitRepo = envRepo.split('/');\n\t\t\towner = splitRepo[0];\n\t\t\trepo = splitRepo[1];\n\n\t\t\t// Ensure that the version of the keyframe specified actually exists.\n\t\t\t// If the keyframe version doesn't exist, then Github will respond\n\t\t\t// that the tag doesn't exist. This will get thrown as an error, which\n\t\t\t// gets passed back to the user.\n\t\t\t// Because of this, we don't need to explicitly catch/set one here.\n\t\t\treturn this.dispatchToEmitter(this.githubEmitterName, {\n\t\t\t\tdata: {\n\t\t\t\t\towner: productOwner,\n\t\t\t\t\trepo: productRepo,\n\t\t\t\t\tpath: KeyframeFilename,\n\t\t\t\t\tref: `refs/tags/${version}`\n\t\t\t\t},\n\t\t\t\tmethod: this.githubApi.repos.getContent\n\t\t\t});\n\t\t}).then((keyframeFile: GithubApiTypes.Content) => {\n\t\t\t// Github API docs state a blob will *always* be encoded base64...\n\t\t\tif (keyframeFile.encoding !== 'base64') {\n\t\t\t\tthis.logger.log(LogLevel.WARN, `Keyframe file exists for ${productOwner}/${productRepo} but is not ` +\n\t\t\t\t\t`Base64 encoded! Aborting.`);\n\t\t\t\tthrow new HTTPError(500, 'Keyframe was not correctly encoded');\n\t\t\t}\n\n\t\t\t// We now go ahead and:\n\t\t\t// 1. Create a new branch for this, create it from the version passed\n\t\t\t// 2. Commit the keyframe to that branch\n\t\t\t// 3. Open a new PR pointing to that branch. Any relevant reviewers can be set (when it works) from\n\t\t\t//    a `.procbot.yml` config in the env repo.\n\n\t\t\t// Create a new branch and commit the keyframe to it.\n\t\t\tdeployDetails = {\n\t\t\t\tkeyframe: keyframeFile,\n\t\t\t\tusername: decodedToken.username,\n\t\t\t\tenvironment,\n\t\t\t\tversion,\n\t\t\t\towner,\n\t\t\t\trepo\n\t\t\t};\n\t\t\treturn this.createNewEnvironmentBranchCommit(deployDetails);\n\t\t}).then((branchName: string) => {\n\t\t\t// Open a new PR using the new branch.\n\t\t\t// If there's a `.procbot.yml` config in the branch, it'll do setup for us.\n\t\t\treturn this.dispatchToEmitter(this.githubEmitterName, {\n\t\t\t\tdata: {\n\t\t\t\t\towner,\n\t\t\t\t\trepo,\n\t\t\t\t\ttitle: `Merge product keyframe ${deployDetails.version} into ${deployDetails.environment}`,\n\t\t\t\t\tbody: `PR was created via a deployment of the keyframe by Resin admin ${deployDetails.username}.`,\n\t\t\t\t\thead: branchName,\n\t\t\t\t\tbase: 'master'\n\t\t\t\t},\n\t\t\t\tmethod: this.githubApi.pullRequests.create\n\t\t\t});\n\t\t}).then(() => {\n\t\t\t// Badabing. We'll now do linting on the *environment* branch automatically, as the\n\t\t\t// PR will kick it off. NOTE: How do we determine which type of linting we do?\n\t\t\t// I guess we could look at repo, but that's a bit horrible. See if there's a variables file?\n\t\t\t// Talk to Jack.\n\t\t\tres.sendStatus(200);\n\t\t}).catch((err: GithubError | HTTPError | Error) => {\n\t\t\tlet errorCode = (err instanceof HTTPError) ? err.httpCode : 500;\n\t\t\tthis.reportError(err);\n\t\t\tres.status(errorCode).send(err.message);\n\t\t});\n\t}\n\n\t/**\n\t * Creates a new branch on the specified environment for a given keyframe.\n\t *\n\t * @param branchDetails  The details of the keyframe, user and version.\n\t * @returns              A string naming the branch created on fulfilment.\n\t */\n\tprivate createNewEnvironmentBranchCommit = (branchDetails: DeploymentDetails): Promise<string> => {\n\t\tconst owner = branchDetails.owner;\n\t\tconst repo = branchDetails.repo;\n\t\tconst keyframe = branchDetails.keyframe;\n\t\tconst environment = branchDetails.environment;\n\t\tconst version = branchDetails.version;\n\t\tconst user = branchDetails.username;\n\t\tconst branchName = `${user}-${version}`;;\n\t\tlet branchSha = '';\n\t\tlet keyframeEntry: GithubApiTypes.TreeEntry | void;\n\t\tlet oldTreeSha = '';\n\t\tlet newTreeSha = '';\n\t\tlet commitSha = '';\n\t\tconst existsMessage = `The branch ${branchName} already exists on the ${environment} environment ` +\n\t\t\t`(${owner}/${repo})`;\n\n\t\t// Ensure that the branch we're about to create doesn't already exist.\n\t\treturn this.dispatchToEmitter(this.githubEmitterName, {\n\t\t\tdata: {\n\t\t\t\towner,\n\t\t\t\trepo,\n\t\t\t\tref: `heads/${branchName}`\n\t\t\t},\n\t\t\tmethod: this.githubApi.gitdata.getReference\n\t\t}).then(() => {\n\t\t\tthrow new HTTPError(409, existsMessage);\n\t\t}).catch((err: GithubError) => {\n\t\t\t// Not Found is what we want to hit, else throw a new error.\n\t\t\tif (err.message !== 'Not Found') {\n\t\t\t\tif (err.message === existsMessage) {\n\t\t\t\t\tthrow err;\n\t\t\t\t}\n\n\t\t\t\tthrow new HTTPError(409, `Couldn't determine whether a branch could be created for the ` +\n\t\t\t\t\t`${environment} environment (${owner}/${repo})`);\n\t\t\t}\n\n\t\t\t// Now we can create a new branch.\n\t\t\treturn this.dispatchToEmitter(this.githubEmitterName, {\n\t\t\t\tdata: {\n\t\t\t\t\towner,\n\t\t\t\t\trepo,\n\t\t\t\t\tref: 'heads/master'\n\t\t\t\t},\n\t\t\t\tmethod: this.githubApi.gitdata.getReference\n\t\t\t});\n\t\t}).then((reference: GithubApiTypes.Reference) => {\n\t\t\t// Ensure that master exists.\n\t\t\tif (reference.ref !== 'refs/heads/master') {\n\t\t\t\tthrow new Error(`Master doesn't exist on ${owner}/${repo}`);\n\t\t\t}\n\n\t\t\t// Grab the reference to the head.\n\t\t\tconst headSha = reference.object.sha;\n\n\t\t\t// Create the new branch, using the version name and user.\n\t\t\treturn this.dispatchToEmitter(this.githubEmitterName, {\n\t\t\t\tdata: {\n\t\t\t\t\towner,\n\t\t\t\t\trepo,\n\t\t\t\t\tref: `refs/heads/${branchName}`,\n\t\t\t\t\tsha: headSha\n\t\t\t\t},\n\t\t\t\tmethod: this.githubApi.gitdata.createReference\n\t\t\t});\n\t\t}).then((reference: GithubApiTypes.Reference) => {\n\t\t\tconst branchReference = reference.ref;\n\t\t\tbranchSha = reference.object.sha;\n\n\t\t\tif (!branchReference) {\n\t\t\t\t// 500 as we probably have no idea why, at this point.\n\t\t\t\tthrow new HTTPError(500, `Couldn't create the new branch for the ${environment} environment`);\n\t\t\t}\n\n\t\t\t// Get the tree for the branch.\n\t\t\treturn this.dispatchToEmitter(this.githubEmitterName, {\n\t\t\t\tdata: {\n\t\t\t\t\towner,\n\t\t\t\t\trepo,\n\t\t\t\t\tsha: branchSha,\n\t\t\t\t},\n\t\t\t\tmethod: this.githubApi.gitdata.getTree\n\t\t\t});\n\t\t}).then((tree: GithubApiTypes.Tree) => {\n\t\t\t// Find the right entry in the tree for the keyframe file.\n\t\t\tkeyframeEntry = _.find(tree.tree, (entry) => entry.path === KeyframeFilename);\n\t\t\tif (!keyframeEntry) {\n\t\t\t\t// Delete the reference we just created.\n\t\t\t\treturn this.dispatchToEmitter(this.githubEmitterName, {\n\t\t\t\t\tdata: {\n\t\t\t\t\t\towner,\n\t\t\t\t\t\trepo,\n\t\t\t\t\t\tref: `heads/${branchName}`\n\t\t\t\t\t},\n\t\t\t\t\tmethod: this.githubApi.gitdata.deleteReference\n\t\t\t\t}).then(() => {\n\t\t\t\t\tthrow new HTTPError(404, `Couldn't find the keyframe file in the ` +\n\t\t\t\t\t\t`${environment}(${owner}/${repo}) environment`);\n\t\t\t\t});\n\t\t\t}\n\n\t\t\t// Create a new blob using the keyframe data from the product repo.\n\t\t\t// This data is already base64 encoded, so we just use that.\n\t\t\toldTreeSha = tree.sha;\n\t\t\treturn this.dispatchToEmitter(this.githubEmitterName, {\n\t\t\t\tdata: {\n\t\t\t\t\towner,\n\t\t\t\t\trepo,\n\t\t\t\t\tcontent: keyframe.content,\n\t\t\t\t\tencoding: keyframe.encoding\n\t\t\t\t},\n\t\t\t\tmethod: this.githubApi.gitdata.createBlob\n\t\t\t});\n\t\t}).then((blob: GithubApiTypes.Blob) => {\n\t\t\t// We've got the blob, we've got the tree entry for the previous keyframe.\n\t\t\t// Create a new tree that includes this data.\n\t\t\tif (keyframeEntry) {\n\t\t\t\treturn this.dispatchToEmitter(this.githubEmitterName, {\n\t\t\t\t\tdata: {\n\t\t\t\t\t\tbase_tree: oldTreeSha,\n\t\t\t\t\t\towner,\n\t\t\t\t\t\trepo,\n\t\t\t\t\t\ttree: [{\n\t\t\t\t\t\t\tmode: keyframeEntry.mode,\n\t\t\t\t\t\t\tpath: keyframeEntry.path,\n\t\t\t\t\t\t\tsha: blob.sha,\n\t\t\t\t\t\t\ttype: 'blob'\n\t\t\t\t\t\t}]\n\t\t\t\t\t},\n\t\t\t\t\tmethod: this.githubApi.gitdata.createTree\n\t\t\t\t});\n\t\t\t}\n\t\t}).then((newTree: GithubApiTypes.Tree) => {\n\t\t\tnewTreeSha = newTree.sha;\n\n\t\t\t// Get the last commit for the branch.\n\t\t\treturn this.dispatchToEmitter(this.githubEmitterName, {\n\t\t\t\tdata: {\n\t\t\t\t\towner,\n\t\t\t\t\trepo,\n\t\t\t\t\tsha: branchSha\n\t\t\t\t},\n\t\t\t\tmethod: this.githubApi.repos.getCommit\n\t\t\t});\n\t\t}).then((lastCommit: GithubApiTypes.Commit) => {\n\t\t\t// We have new tree object, we now want to create a new commit referencing it.\n\t\t\treturn this.dispatchToEmitter(this.githubEmitterName, {\n\t\t\t\tdata: {\n\t\t\t\t\tmessage: `Update keyframe from product version ${version} on behalf of Resin admin ${user}.`,\n\t\t\t\t\towner,\n\t\t\t\t\tparents: [ lastCommit.sha ],\n\t\t\t\t\trepo,\n\t\t\t\t\ttree: newTreeSha\n\t\t\t\t},\n\t\t\t\tmethod: this.githubApi.gitdata.createCommit\n\t\t\t});\n\t\t}).then((commit: GithubApiTypes.Commit) => {\n\t\t\t// Update the branch to include the new commit SHA, so the head points to our new\n\t\t\t// keyframe.\n\t\t\tcommitSha = commit.sha;\n\t\t\treturn this.dispatchToEmitter(this.githubEmitterName, {\n\t\t\t\tdata: {\n\t\t\t\t\tforce: false,\n\t\t\t\t\towner,\n\t\t\t\t\tref: `heads/${branchName}`,\n\t\t\t\t\trepo,\n\t\t\t\t\tsha: commitSha\n\t\t\t\t},\n\t\t\t\tmethod: this.githubApi.gitdata.updateReference\n\t\t\t});\n\t\t}).then(() => {\n\t\t\treturn this.dispatchToEmitter(this.githubEmitterName, {\n\t\t\t\tdata: {\n\t\t\t\t\tmessage: version,\n\t\t\t\t\tobject: commitSha,\n\t\t\t\t\towner,\n\t\t\t\t\trepo,\n\t\t\t\t\ttag: version,\n\t\t\t\t\ttagger: {\n\t\t\t\t\t\tname: process.env.KEYFRAMEBOT_NAME,\n\t\t\t\t\t\temail: 'keyframebot@resin.io'\n\t\t\t\t\t},\n\t\t\t\t\ttype: 'commit'\n\t\t\t\t},\n\t\t\t\tmethod: this.githubApi.gitdata.createTag\n\t\t\t});\n\t\t}).then((newTag: GithubApiTypes.Tag) => {\n\t\t\t// Finally tag this with the version of the keyframe.\n\t\t\treturn this.dispatchToEmitter(this.githubEmitterName, {\n\t\t\t\tdata: {\n\t\t\t\t\towner,\n\t\t\t\t\tref: `refs/tags/${version}`,\n\t\t\t\t\trepo,\n\t\t\t\t\tsha: newTag.sha\n\t\t\t\t},\n\t\t\t\tmethod: this.githubApi.gitdata.createReference\n\t\t\t});\n\t\t}).return(branchName);\n\t}\n\n\t/**\n\t * Reports an error to the console.\n\t *\n\t * @param error  The error to report.\n\t */\n\tprivate reportError(error: GithubError | HTTPError | Error): void {\n\t\t// Log to console.\n\t\tthis.logger.alert(AlertLevel.ERROR, error.message);\n\t}\n}\n\n/** Creates a new instance of the KeyframeBot client. */\nexport function createBot(): KeyframeBot {\n\tif (!(process.env.KEYFRAMEBOT_NAME && process.env.KEYFRAMEBOT_INTEGRATION_ID &&\n\tprocess.env.KEYFRAMEBOT_PEM && process.env.KEYFRAMEBOT_WEBHOOK_SECRET && process.env.KEYFRAMEBOT_PRODUCT_REPO &&\n\tprocess.env.KEYFRAMEBOT_ENVIRONMENTS)) {\n\t\tthrow new Error(`'KEYFRAMEBOT_NAME', 'KEYFRAMEBOT_INTEGRATION_ID', 'KEYFRAMEBOT_PEM', ` +\n\t\t\t`'KEYFRAMEBOT_WEBHOOK_SECRET', 'KEYFRAMEBOT_ENVIRONMENTS' and 'KEYFRAMEBOT_PRODUCT_REPO' environment ` +\n\t\t\t'variables need setting');\n\t}\n\n\treturn new KeyframeBot(process.env.KEYFRAMEBOT_NAME, {\n\t\tintegrationId: process.env.KEYFRAMEBOT_INTEGRATION_ID,\n\t\tpem: process.env.KEYFRAMEBOT_PEM,\n\t\twebhookSecret: process.env.KEYFRAMEBOT_WEBHOOK_SECRET,\n\t\tproductRepo: process.env.KEYFRAMEBOT_PRODUCT_REPO,\n\t\tenvironments: process.env.KEYFRAMEBOT_ENVIRONMENTS\n\t});\n}\n"],"sourceRoot":"../../lib"}
>>>>>>> Add ability to have multiple ServiceListener/ServiceEmitter instances of the same Service per Client Bot.
