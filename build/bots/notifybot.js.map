{"version":3,"sources":["bots/notifybot.ts"],"names":[],"mappings":";;AAgBA,oCAAoC;AAGpC,gCAAgC;AAChC,4BAA4B;AAC5B,+CAA8C;AAC9C,0CAA2C;AAE3C,kDAA+C;AAI/C,4CAAuD;AAuDvD,IAAK,gBASJ;AATD,WAAK,gBAAgB;IAEpB,+EAAgB,CAAA;IAEhB,2FAAsB,CAAA;IAEtB,iFAAiB,CAAA;IAEjB,iFAAiB,CAAA;AAClB,CAAC,EATI,gBAAgB,KAAhB,gBAAgB,QASpB;AAGD,oBAAqB,SAAQ,UAAU;IAuBtC,YAAY,IAAY,EAAE,OAAe,EAAE,KAAa,EAAE,IAAY,EAAE,OAAe;QACtF,KAAK,EAAE,CAAC;QARF,SAAI,GAAG,gBAAgB,CAAC;QAW9B,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;QACjB,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;QACvB,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;QACnB,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;QACjB,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;IACxB,CAAC;CACD;AAgDD,MAAM,aAAa,GAAG,IAAI,CAAC;AAQ3B,MAAM,UAAU,GAAG,IAAI,MAAM,CAAC,kDAAkD;IAC/E,uDAAuD,EAAE,IAAI,CAAC,CAAC;AAGhE,MAAM,IAAI,GAAG,8DAA8D,CAAC;AAG5E,MAAM,YAAY,GAAG,cAAc,CAAC;AAEpC,MAAM,aAAa,GAAG,cAAc,CAAC;AAErC,MAAM,SAAS,GAAG,0CAA0C,CAAC;AAE7D,MAAM,OAAO,GAAG,UAAU,CAAC;AAE3B,MAAM,MAAM,GAAG,IAAI,CAAC;AAEpB,MAAM,WAAW,GAAG,cAAc,CAAC;AAyBnC,eAAuB,SAAQ,iBAAO;IAiBrC,YAAY,MAAuB;QAClC,KAAK,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;QAwEb,cAAS,GAAG,CAAC,aAAiC,EAAE,KAAmB;YAC5E,MAAM,SAAS,GAA6B,KAAK,CAAC,WAAW,CAAC,IAAI,CAAC;YACnE,MAAM,OAAO,GAAG,SAAS,CAAC,OAAO,CAAC;YAClC,MAAM,OAAO,GAAG,SAAS,CAAC,KAAK,CAAC;YAChC,MAAM,OAAO,GAAG,SAAS,CAAC,MAAM,CAAC;YACjC,MAAM,KAAK,GAAG,SAAS,CAAC,UAAU,CAAC,KAAK,CAAC,IAAI,CAAC;YAC9C,MAAM,IAAI,GAAG,SAAS,CAAC,UAAU,CAAC,IAAI,CAAC;YAIvC,EAAE,CAAC,CAAC,CAAC,OAAO,KAAK,SAAS,CAAC,IAAI,CAAC,OAAO,KAAK,SAAS,CAAC,CAAC,CAAC,CAAC;gBACxD,MAAM,CAAC,OAAO,CAAC,OAAO,EAAE,CAAC;YAC1B,CAAC;YAMD,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,OAAO,EAAE,CAAC,MAAM,KAAK,CAAC,CAAC,QAAQ,CAAC,MAAM,CAAC,QAAQ,EAAE,YAAY,CAAC,CAAC,CAAC,CAAC,CAAC;gBAC7E,MAAM,CAAC,OAAO,CAAC,OAAO,EAAE,CAAC;YAC1B,CAAC;YAKD,IAAI,WAAW,GAAG;gBACjB,GAAG,EAAE,IAAI,CAAC,SAAS;gBACnB,QAAQ,EAAE,YAAY;gBACtB,KAAK;gBACL,IAAI,EAAE,OAAO;gBACb,IAAI;aACJ,CAAC;YACF,IAAI,OAAO,GAAG,EAAE,CAAC;YACjB,IAAI,OAAO,GAAG,EAAE,CAAC;YACjB,MAAM,CAAC,IAAI,CAAC,oBAAoB,CAAC,WAAW,CAAC,CAAC,IAAI,CAAC,CAAC,YAA2B;gBAC9E,EAAE,CAAC,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC;oBACnB,MAAM,IAAI,KAAK,CAAC,gDAAgD,KAAK,IAAI,IAAI,IAAI,OAAO,EAAE,CAAC,CAAC;gBAC7F,CAAC;gBAED,OAAO,GAAG,YAAY,CAAC;gBACvB,WAAW,CAAC,IAAI,GAAG,OAAO,CAAC;gBAE3B,MAAM,CAAC,IAAI,CAAC,oBAAoB,CAAC,WAAW,CAAC,CAAC;YAC/C,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,YAA2B;gBACnC,EAAE,CAAC,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC;oBACnB,MAAM,IAAI,KAAK,CAAC,gDAAgD,KAAK,IAAI,IAAI,IAAI,OAAO,EAAE,CAAC,CAAC;gBAC7F,CAAC;gBACD,OAAO,GAAG,YAAY,CAAC;gBASvB,MAAM,aAAa,GAAG,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC,QAAQ,CAAC,UAAU,IAAI,EAAE,CAAC;gBACvE,MAAM,aAAa,GAAG,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC,QAAQ,CAAC,UAAU,CAAC;gBAIjE,MAAM,iBAAiB,GAAuB,EAAE,CAAC;gBACjD,CAAC,CAAC,IAAI,CAAC,aAAa,EAAE,CAAC,KAAU,EAAE,GAAW;oBAE7C,MAAM,UAAU,GAAG,KAAK,CAAC,OAAO,CAAC;oBACjC,MAAM,UAAU,GAAG,CAAC,CAAC,GAAG,CAAC,aAAa,CAAC,GAAG,CAAC,EAAE,SAAS,EAAE,IAAI,CAAC,CAAC;oBAC9D,MAAM,aAAa,GAAG,KAAK,CAAC,UAAU,CAAC;oBAIvC,EAAE,CAAC,CAAC,UAAU,IAAI,IAAI,IAAI,CAAC,UAAU,KAAK,UAAU,CAAC,CAAC,CAAC,CAAC;wBACvD,iBAAiB,CAAC,IAAI,CAAC;4BACtB,UAAU;4BACV,IAAI,EAAE,GAAG;4BACT,UAAU;4BACV,IAAI,EAAE,aAAa;4BACnB,YAAY,EAAE,IAAI;4BAClB,QAAQ,EAAE,SAAS;yBACnB,CAAC,CAAC;oBACJ,CAAC;oBAAC,IAAI,CAAC,EAAE,CAAC,CAAC,UAAU,KAAK,UAAU,CAAC,CAAC,CAAC;wBAEtC,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,iBAAQ,CAAC,IAAI,EAAE,yBAAyB,aAAa,yBAAyB;4BAC7F,OAAO,IAAI,EAAE,CAAC,CAAC;oBACjB,CAAC;gBACF,CAAC,CAAC,CAAC;gBAMH,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,iBAAiB,EAAE,CAAC,SAAS,KAAK,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,CAAC,CAAC;YACjF,CAAC,CAAC;iBACD,MAAM,CAAC,CAAC,SAAS,KAAK,CAAC,CAAC,GAAG,CAAC,SAAS,EAAE,UAAU,CAAC,CAAC;iBACnD,IAAI,CAAC,CAAC,UAA8B;gBAIpC,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,UAAU,EAAE,CAAC,SAA2B;oBAC1D,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,SAAS,CAAC,QAAQ,EAAE,CAAC,GAAG,EAAE,GAAG;wBACrD,MAAM,CAAC,IAAI,CAAC,gBAAgB,CAAC;4BAC5B,WAAW,EAAE,IAAI;4BACjB,IAAI,EAAE,SAAS,CAAC,IAAI;4BACpB,OAAO,EAAE,GAAG;4BACZ,eAAe,EAAE,SAAS,CAAC,UAAU,CAAC,SAAS,CAAC,CAAC,CAAC;4BAClD,YAAY,EAAE,SAAS,CAAC,YAAY;4BACpC,GAAG;yBACH,CAAC,CAAC;oBACJ,CAAC,CAAC,CAAC,CAAC;gBACL,CAAC,CAAC,CAAC,MAAM,EAAE,CAAC;YACb,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,GAAU;gBAGnB,IAAI,CAAC,WAAW,CAAC,IAAI,cAAc,CAAC,gBAAgB,CAAC,gBAAgB,EACpE,GAAG,OAAO,CAAC,GAAG,CAAC,cAAc,gDAAgD;oBAC7E,mBAAmB,GAAG,CAAC,OAAO,MAAM;oBACpC,kEAAkE,EAClE,KAAK,EAAE,IAAI,EAAE,SAAS,CACtB,CAAC,CAAC;YACJ,CAAC,CAAC,CAAC;QACJ,CAAC,CAAA;QA5LA,MAAM,UAAU,GAAG,IAAI,CAAC,kBAAkB,CAAC,QAAQ,EAAE;YACpD,MAAM,EAAE,MAAM,CAAC,OAAO;YACtB,cAAc,EAAE;gBACf,KAAK,EAAE,MAAM,CAAC,SAAS;gBACvB,GAAG,EAAE,MAAM,CAAC,SAAS;gBACrB,IAAI,GAAiB;aACrB;YACD,IAAI,EAAE,WAAW;YACjB,IAAI,EAAE,aAAa;YACnB,IAAI,GAAsB;YAC1B,aAAa,EAAE,MAAM,CAAC,YAAY;SAClC,CAAC,CAAC;QAGH,MAAM,SAAS,GAAG,IAAI,CAAC,iBAAiB,CAAC,QAAQ,EAAE;YAClD,cAAc,EAAE;gBACf,KAAK,EAAE,MAAM,CAAC,SAAS;gBACvB,GAAG,EAAE,MAAM,CAAC,SAAS;gBACrB,IAAI,GAAiB;aACrB;YACD,GAAG,EAAE,MAAM,CAAC,SAAS;YACrB,IAAI,GAAqB;SACzB,CAAC,CAAC;QAGH,MAAM,YAAY,GAAG,IAAI,CAAC,iBAAiB,CAAC,OAAO,EAAE;YACpD,KAAK,EAAE,MAAM,CAAC,WAAW;SACzB,CAAC,CAAC;QAGH,EAAE,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC;YACjB,MAAM,IAAI,KAAK,CAAC,mCAAmC,CAAC,CAAC;QACtD,CAAC;QACD,EAAE,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC;YAChB,MAAM,IAAI,KAAK,CAAC,kCAAkC,CAAC,CAAC;QACrD,CAAC;QACD,EAAE,CAAC,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC;YACnB,MAAM,IAAI,KAAK,CAAC,iCAAiC,CAAC,CAAC;QACpD,CAAC;QACD,IAAI,CAAC,iBAAiB,GAAG,SAAS,CAAC,WAAW,CAAC;QAC/C,IAAI,CAAC,gBAAgB,GAAG,YAAY,CAAC,WAAW,CAAC;QAIjD,IAAI,CAAC,SAAS,GAAkB,SAAS,CAAC,SAAU,CAAC,MAAM,CAAC;QAC5D,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC;YACrB,MAAM,IAAI,KAAK,CAAC,kCAAkC,CAAC,CAAC;QACrD,CAAC;QAGD,MAAM,YAAY,GAAgB,YAAY,CAAC,SAAS,CAAC;QACzD,IAAI,CAAC,QAAQ,GAAG,YAAY,CAAC,KAAK,CAAC;QACnC,IAAI,CAAC,SAAS,GAAG,MAAM,CAAC,SAAS,CAAC;QAGlC,UAAU,CAAC,aAAa,CAAC;YACvB,MAAM,EAAE,CAAE,MAAM,CAAE;YAClB,cAAc,EAAE,IAAI,CAAC,SAAS;YAC9B,IAAI,EAAE,iBAAiB;SACxB,CAAC,CAAC;IACJ,CAAC;IA0IO,gBAAgB,CAAC,SAAqB;QAE7C,MAAM,WAAW,GAAG,IAAI,CAAC,cAAc,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;QACxD,EAAE,CAAC,CAAC,CAAC,WAAW,CAAC,CAAC,CAAC;YAClB,MAAM,IAAI,KAAK,CAAC,0CAA0C,SAAS,CAAC,IAAI,EAAE,CAAC,CAAC;QAC7E,CAAC;QAGD,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,SAAS,CAAC,GAAG,EAAE,CAAC,EAAE;YACpC,MAAM,MAAM,GAAG;gBACd,MAAM,EAAE,EAAE;gBACV,KAAK,EAAE,WAAW,CAAC,KAAK;gBACxB,IAAI,EAAE,WAAW,CAAC,IAAI;aACtB,CAAC;YAGF,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,iBAAiB,EAAE;gBACjE,IAAI,EAAE,MAAM;gBACZ,MAAM,EAAE,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,WAAW;aACzC,CAAC,EACF,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,iBAAiB,EAAE;gBAC9C,IAAI,EAAE,MAAM;gBACZ,MAAM,EAAE,IAAI,CAAC,SAAS,CAAC,YAAY,CAAC,GAAG;aACvC,CAAC,EACF,CAAC,QAAuC,EAAE,WAAuC;gBAEhF,MAAM,CAAE,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,OAAO,CAAC,QAAQ,EAAE,CAAC,OAAO,KAAK,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC,IAAI,EAAE,UAAU,CAAC,CAAC,EAC3F,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,IAAI,EAAE,UAAU,CAAC,EAC7C,CAAC,CAAC,OAAO,CAAC,QAAQ,EAAE,CAAC,OAAO,KAAK,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC,EACrE,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC,CAAC;YAC3C,CAAC,CACD,CAAC,IAAI,CAAC,CAAC,YAAY;gBAEnB,MAAM,CAAC,OAAO,CAAC,SAAS,CAAC,YAAY,EAAE,CAAC,WAAW;oBAClD,IAAI,WAAwB,CAAC;oBAG7B,MAAM,CAAC,IAAI,CAAC,gBAAgB,CAAC,WAAW,EAAE,WAAW,CAAC,KAAK,EAAE,WAAW,CAAC,IAAI,CAAC;yBAC7E,IAAI,CAAC,CAAC,OAAO;wBACb,WAAW,GAAG,OAAO,CAAC;wBACtB,MAAM,CAAC,IAAI,CAAC,cAAc,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC;oBAChD,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,aAAuB;wBAG/B,IAAI,WAAmB,CAAC;wBACxB,EAAE,CAAC,CAAC,SAAS,CAAC,YAAY,CAAC,CAAC,CAAC;4BAC5B,WAAW,GAAG,oBAAoB,SAAS,CAAC,eAAe,OAAO,SAAS,CAAC,IAAI,MAAM;gCACtF,OAAO,SAAS,CAAC,WAAW,uDAAuD;gCAClF,uBAAuB,CAAC;wBAC1B,CAAC;wBAAC,IAAI,CAAC,CAAC;4BACP,WAAW,GAAG,yBAAyB,SAAS,CAAC,eAAe,OAAO,SAAS,CAAC,IAAI,GAAG;gCACvF,UAAU,SAAS,CAAC,WAAW,+CAA+C;gCAC9E,kCAAkC,CAAC;wBACrC,CAAC;wBACD,WAAW,IAAI,IAAI,GAAG,WAAW,CAAC,aAAa,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;wBAG3D,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,aAAa,EAAE,CAAC,YAAY;4BAC9C,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,iBAAQ,CAAC,IAAI,EAAE,4BAA4B,YAAY,OAAO;gCAC7E,GAAG,MAAM,CAAC,KAAK,IAAI,MAAM,CAAC,IAAI,IAAI,MAAM,CAAC,MAAM,IAAI,SAAS,CAAC,OAAO,GAAG;gCACvE,sBAAsB,SAAS,CAAC,eAAe,EAAE,CAAC,CAAC;4BAEpD,MAAM,CAAC,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,gBAAgB,EAAE;gCACpD,IAAI,EAAE;oCACL,SAAS,EAAE,aAAa,IAAI,CAAC,SAAS,EAAE;oCACxC,IAAI,EAAE,WAAW;oCACjB,eAAe,EAAE,YAAY;iCAC7B;gCACD,MAAM,EAAE,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,MAAM;6BACpC,CAAC,CAAC;wBACJ,CAAC,CAAC,CAAC;oBACJ,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,GAAU;wBAEnB,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,mBAAU,CAAC,KAAK,EAAE,mDAAmD;4BACtF,uBAAuB,MAAM,CAAC,KAAK,IAAI,MAAM,CAAC,IAAI,IAAI,MAAM,CAAC,MAAM,GAAG;4BACtE,GAAG,SAAS,CAAC,OAAO,OAAO,GAAG,CAAC,OAAO,EAAE,CAAC,CAAC;oBAC5C,CAAC,CAAC,CAAC;gBACJ,CAAC,CAAC,CAAC;YACJ,CAAC,CAAC,CAAC,IAAI,CAAC;gBAIP,MAAM,CAAC,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,iBAAiB,EACnD;oBACC,IAAI,EAAE,MAAM;oBACZ,MAAM,EAAE,IAAI,CAAC,SAAS,CAAC,YAAY,CAAC,GAAG;iBACvC,CACD,CAAC,IAAI,CAAC,CAAC,WAAW;oBAClB,IAAI,IAAY,CAAC;oBACjB,EAAE,CAAC,CAAC,SAAS,CAAC,YAAY,CAAC,CAAC,CAAC;wBAC5B,IAAI,GAAG,OAAO,WAAW,CAAC,IAAI,CAAC,KAAK,uCAAuC;4BAC1E,KAAK,SAAS,CAAC,eAAe,eAAe,SAAS,CAAC,WAAW,kBAAkB;4BACpF,yCAAyC,SAAS,CAAC,OAAO,iCAAiC;4BAC3F,+DAA+D,CAAC;oBAClE,CAAC;oBAAC,IAAI,CAAC,CAAC;wBACP,IAAI,GAAG,OAAO,WAAW,CAAC,IAAI,CAAC,KAAK,sDAAsD;4BACzF,aAAa,SAAS,CAAC,eAAe,eAAe,SAAS,CAAC,WAAW,kBAAkB;4BAC5F,yCAAyC,SAAS,CAAC,OAAO,kCAAkC;4BAC5F,iDAAiD,CAAC;oBACpD,CAAC;oBAED,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,iBAAQ,CAAC,IAAI,EAAE,wBAAwB,MAAM,CAAC,KAAK,IAAI,MAAM,CAAC,IAAI,GAAG;wBACpF,GAAG,MAAM,CAAC,MAAM,IAAI,SAAS,CAAC,OAAO,uBAAuB,SAAS,CAAC,eAAe,EAAE,CAAC,CAAC;oBAE1F,MAAM,CAAC,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,iBAAiB,EAAE;wBACrD,IAAI,EAAE;4BACL,IAAI;4BACJ,MAAM,EAAE,MAAM,CAAC,MAAM;4BACrB,KAAK,EAAE,MAAM,CAAC,KAAK;4BACnB,IAAI,EAAE,MAAM,CAAC,IAAI;yBACjB;wBACD,MAAM,EAAE,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,aAAa;qBAC3C,CAAC,CAAC;gBACJ,CAAC,CAAC,CAAC;YACJ,CAAC,CAAC,CAAC;QACJ,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,GAAU;YACnB,IAAI,CAAC,WAAW,CAAC,IAAI,cAAc,CAAC,gBAAgB,CAAC,sBAAsB,EAC1E,oEAAoE,GAAG,EAAE,EACzE,WAAW,CAAC,KAAK,EACjB,WAAW,CAAC,IAAI,EAChB,SAAS,CAAC,OAAO,CACjB,CAAC,CAAC;QACJ,CAAC,CAAC,CAAC,MAAM,EAAE,CAAC;IACb,CAAC;IASO,UAAU,CAAC,IAAY,EAAE,MAAc;QAC9C,MAAM,OAAO,GAAa,EAAE,CAAC;QAC7B,IAAI,KAAK,GAA2B,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACtD,OAAO,KAAK,EAAE,CAAC;YACd,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;gBACpC,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;YACxB,CAAC;YACD,KAAK,GAAG,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAC3B,CAAC;QAED,MAAM,CAAC,OAAO,CAAC;IAChB,CAAC;IAWO,gBAAgB,CAAC,WAAmB,EAAE,UAAkB,EAAE,SAAiB;QAElF,IAAI,WAAW,GAAG,IAAI,CAAC;QACvB,MAAM,mBAAmB,GAAG,CAAC,KAAa,EAAE,KAAa,EAAE,IAAY,EAAE,MAAc;YAGtF,MAAM,CAAC,OAAO,CAAC,IAAI,CAClB,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,iBAAiB,EAAE;gBAC9C,IAAI,EAAE;oBACL,MAAM,EAAE,KAAK;oBACb,KAAK;oBACL,IAAI;iBACJ;gBACD,MAAM,EAAE,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,GAAG;aACjC,CAAC,EACF,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,iBAAiB,EAAE;gBAC9C,IAAI,EAAE;oBACL,MAAM,EAAE,KAAK;oBACb,KAAK;oBACL,IAAI;iBACJ;gBACD,MAAM,EAAE,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,WAAW;aACzC,CAAC,EACF,MAAM,CACN,CAAC,KAAK,CAAC,CAAC,GAAU;gBAKlB,EAAE,CAAC,CAAC,GAAG,CAAC,OAAO,KAAK,WAAW,CAAC,CAAC,CAAC;oBACjC,MAAM,GAAG,CAAC;gBACX,CAAC;gBAED,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;YAC5B,CAAC,CAAC,CAAC;QACJ,CAAC,CAAC;QACF,MAAM,gBAAgB,GAAG,CAAC,KAA2B,EAAE,QAAuC;YAC7F,MAAM,OAAO,GAAG,mCAAmC,CAAC;YAGpD,MAAM,CAAC,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,IAAI,EAAE,OAAO,CAAC,EACnD,CAAC,CAAC,OAAO,CAAC,QAAQ,EAAE,CAAC,OAAO,KAAK,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC,CAAC,CAAC;QAC5E,CAAC,CAAC;QACF,MAAM,SAAS,GAAG,oBAAoB,CAAC;QACvC,MAAM,aAAa,GAAa,EAAE,CAAC;QAGnC,EAAE,CAAC,CAAC,CAAC,CAAC,UAAU,CAAC,WAAW,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC;YACpC,WAAW,GAAG,WAAW,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC;YACvC,WAAW,GAAG,KAAK,CAAC;QACrB,CAAC;QAGD,MAAM,CAAC,mBAAmB,CAAC,WAAW,EAAE,UAAU,EAAE,SAAS,EAC7D,CAAC,KAA2B,EAAE,QAAuC;YACpE,MAAM,MAAM,GAAG,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,OAAO,CAAC,QAAQ,EAAE,CAAC,OAAO,KAAK,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC,EAC5F,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC,CAAC;YAGpC,IAAI,WAAW,GAAG,gBAAgB,CAAC,KAAK,EAAE,QAAQ,CAAC,CAAC;YACpD,EAAE,CAAC,CAAC,WAAW,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;gBAC5B,aAAa,CAAC,IAAI,CAAC,GAAG,KAAK,CAAC,KAAK,KAAK,SAAS,IAAI,UAAU,IAAI,SAAS,WAAW,WAAW,EAAE,CAAC,CAAC;YACrG,CAAC;YAID,EAAE,CAAC,CAAC,CAAC,WAAW,IAAI,CAAC,MAAM,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;gBACzC,MAAM,CAAC,OAAO,CAAC,SAAS,CAAC,MAAM,EAAE,CAAC,KAAK;oBACtC,MAAM,CAAC,mBAAmB,CAAC,KAAK,EAAE,OAAO,EAAE,MAAM,EAChD,CAAC,OAA6B,EAAE,UAAyC;wBACxE,MAAM,QAAQ,GAAG,gBAAgB,CAAC,OAAO,EAAE,UAAU,CAAC,CAAC;wBACvD,EAAE,CAAC,CAAC,QAAQ,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;4BACzB,aAAa,CAAC,IAAI,CAAC,GAAG,OAAO,CAAC,KAAK,KAAK,SAAS,IAAI,OAAO,GAAG;gCAC9D,GAAG,MAAM,WAAW,KAAK,EAAE,CAAC,CAAC;wBAC/B,CAAC;wBACD,MAAM,CAAC,QAAQ,CAAC;oBACjB,CAAC,CACD,CAAC;gBACH,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,gBAA4B;oBACpC,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC,CAAC,OAAO,CAAC,gBAAgB,CAAC,CAAC,CAAC;gBACxD,CAAC,CAAC,CAAC;YACJ,CAAC;YAGD,MAAM,CAAC,WAAW,CAAC;QACpB,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,MAAM;YACd,MAAM,CAAC;gBACN,aAAa;gBACb,MAAM;aACN,CAAC;QACH,CAAC,CAAC,CAAC;IACJ,CAAC;IASO,SAAS,CAAC,SAA2B;QAI5C,MAAM,IAAI,GAAG,IAAI,CAAC,cAAc,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;QACjD,IAAI,OAAiB,CAAC;QACtB,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;YACX,MAAM,IAAI,KAAK,CAAC,0CAA0C,SAAS,CAAC,IAAI,EAAE,CAAC,CAAC;QAC7E,CAAC;QAGD,MAAM,CAAC,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,iBAAiB,EAAE;YACrD,IAAI,EAAE;gBACL,KAAK,EAAE,IAAI,CAAC,KAAK;gBACjB,IAAI,EAAE,IAAI,CAAC,IAAI;aACf;YACD,MAAM,EAAE,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,OAAO;SACpC,CAAC,CAAC,IAAI,CAAC,CAAC,IAA0B;YAClC,OAAO,GAAG,CAAC,CAAC,GAAG,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC;YAG9B,MAAM,CAAC,IAAI,CAAC,oBAAoB,CAAC;gBAChC,GAAG,EAAE,IAAI,CAAC,SAAS;gBACnB,QAAQ,EAAE,aAAa;gBACvB,IAAI,EAAE,MAAM;gBACZ,KAAK,EAAE,IAAI,CAAC,KAAK;gBACjB,IAAI,EAAE,IAAI,CAAC,IAAI;aACf,CAAC,CAAC;QACJ,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,IAAI;YACZ,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;gBACX,MAAM,IAAI,KAAK,CAAC,qCAAqC,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC,IAAI,EAAE,CAAC,CAAC;YACjF,CAAC;YASD,IAAI,WAAW,GAAG,CAAE,IAAI,CAAE,CAAC;YAC3B,IAAI,eAAe,GAAG,EAAE,CAAC;YAGzB,EAAE,CAAC,CAAC,SAAS,CAAC,UAAU,CAAC,CAAC,CAAC;gBAC1B,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,OAAO,EAAE,SAAS,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;oBAChD,IAAI,CAAC,WAAW,CAAC,IAAI,cAAc,CAAC,gBAAgB,CAAC,iBAAiB,EACrE,kEAAkE,EAClE,IAAI,CAAC,KAAK,EACV,IAAI,CAAC,IAAI,EACT,SAAS,CAAC,UAAU,CACpB,CAAC,CAAC;oBACH,MAAM,CAAC,SAAS,CAAC;gBAClB,CAAC;YACF,CAAC;YACD,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,OAAO,EAAE,SAAS,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;gBAChD,IAAI,CAAC,WAAW,CAAC,IAAI,cAAc,CAAC,gBAAgB,CAAC,iBAAiB,EACrE,kEAAkE,EAClE,IAAI,CAAC,KAAK,EACV,IAAI,CAAC,IAAI,EACT,SAAS,CAAC,UAAU,CACpB,CAAC,CAAC;gBAEH,MAAM,CAAC,SAAS,CAAC;YAClB,CAAC;YAID,EAAE,CAAC,CAAC,CAAC,SAAS,CAAC,UAAU,CAAC,CAAC,CAAC;gBAC3B,SAAS,CAAC,YAAY,GAAG,IAAI,CAAC;YAC/B,CAAC;YAAC,IAAI,CAAC,EAAE,CAAC,CAAC,iBAAQ,CAAC,SAAS,CAAC,UAAU,EAAE,SAAS,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;gBAEjE,SAAS,CAAC,YAAY,GAAG,KAAK,CAAC;YAChC,CAAC;YAAC,IAAI,CAAC,EAAE,CAAC,CAAC,iBAAQ,CAAC,SAAS,CAAC,UAAU,EAAE,SAAS,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;gBACjE,SAAS,CAAC,YAAY,GAAG,IAAI,CAAC;YAC/B,CAAC;YAKD,EAAE,CAAC,CAAC,SAAS,CAAC,UAAU,CAAC,CAAC,CAAC;gBAC1B,WAAW,GAAG,WAAW,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,SAAS,CAAC,YAAY,GAAG,MAAM,SAAS,CAAC,UAAU,EAAE;oBACvF,MAAM,SAAS,CAAC,UAAU,EAAE,CAAC,CAAC;YAChC,CAAC;YAMD,eAAe,GAAG,MAAM,SAAS,CAAC,YAAY,GAAG,SAAS,CAAC,UAAU,GAAG,SAAS,CAAC,UAAU,EAAE;gBAC7F,WAAW,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,SAAS,CAAC,YAAY,GAAG,SAAS,CAAC,UAAU,GAAG,CAAC,SAAS,CAAC,UAAU,IAAI,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;YAMvG,MAAM,cAAc,GAAG,eAAe,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;YAKpD,MAAM,cAAc,GAAqB,EAAE,CAAC;YAC5C,CAAC,CAAC,IAAI,CAAC,cAAc,EAAE,CAAC,WAAW;gBAClC,IAAI,UAAkC,CAAC;gBACvC,MAAM,YAAY,GAAG,WAAW,CAAC,KAAK,CAAC,4BAA4B,CAAC,CAAC;gBACrE,EAAE,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC;oBAClB,MAAM,OAAO,GAAG,YAAY,CAAC,CAAC,CAAC,CAAC;oBAChC,MAAM,OAAO,GAAG,+BAA+B,CAAC;oBAChD,UAAU,GAAG,OAAO,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;oBACvC,OAAO,UAAU,EAAE,CAAC;wBACnB,EAAE,CAAC,CAAC,CAAC,cAAc,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;4BAC9B,cAAc,CAAC,OAAO,CAAC,GAAG,EAAE,CAAC;wBAC9B,CAAC;wBACD,cAAc,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC;wBAC5C,UAAU,GAAG,OAAO,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;oBACxC,CAAC;gBACF,CAAC;YACF,CAAC,CAAC,CAAC;YACH,SAAS,CAAC,QAAQ,GAAG,cAAc,CAAC;YAEpC,MAAM,CAAC,SAAS,CAAC;QAClB,CAAC,CAAC,CAAC;IACJ,CAAC;IAQO,oBAAoB,CAAC,WAA8B;QAC1D,MAAM,OAAO,GAAG;YACf,IAAI,EAAE;gBACL,KAAK,EAAE,WAAW,CAAC,KAAK;gBACxB,IAAI,EAAE,WAAW,CAAC,QAAQ;gBAC1B,GAAG,EAAE,WAAW,CAAC,IAAI;gBACrB,IAAI,EAAE,WAAW,CAAC,IAAI;aACtB;YACD,MAAM,EAAE,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,UAAU;SACvC,CAAC;QAGF,MAAM,CAAC,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,iBAAiB,EAAE,OAAO,CAAC,CAAC,IAAI,CAAC,CAAC,IAA4B;YAChG,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;gBACX,MAAM,CAAC;YACR,CAAC;YAED,EAAE,CAAC,CAAC,IAAI,CAAC,QAAQ,KAAK,QAAQ,CAAC,CAAC,CAAC;gBAChC,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,iBAAQ,CAAC,IAAI,EAAE,mCAAmC,CAAC,CAAC;gBACpE,MAAM,CAAC;YACR,CAAC;YAGD,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,QAAQ,CAAC,CAAC,QAAQ,EAAE,CAAC;QACvD,CAAC,CAAC,CAAC;IACJ,CAAC;IAQO,cAAc,CAAC,MAAgB;QAEtC,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,MAAM,EAAE,CAAC,KAAK;YAChC,MAAM,cAAc,GAAG,KAAK,CAAC,SAAS,CAAC,KAAK,CAAC,WAAW,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC;YACnE,MAAM,CAAC,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,gBAAgB,EAAE;gBACpD,IAAI,EAAE;oBACL,QAAQ,EAAE,cAAc;iBACxB;gBACD,MAAM,EAAE,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,iBAAiB;aAC7C,CAAC,CAAC,IAAI,CAAC,CAAC,aAAiC;gBACzC,MAAM,CAAC,CAAC,CAAC,GAAG,CAAC,aAAa,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAC;YAC5C,CAAC,CAAC,CAAC;QACJ,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC;IACpB,CAAC;IAQO,cAAc,CAAC,QAAgB;QACtC,MAAM,QAAQ,GAAG,QAAQ,CAAC,KAAK,CAAC,yBAAyB,CAAC,CAAC;QAC3D,EAAE,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC;YACf,MAAM,CAAC;QACR,CAAC;QAED,MAAM,CAAC;YACN,KAAK,EAAE,QAAQ,CAAC,CAAC,CAAC;YAClB,IAAI,EAAE,QAAQ,CAAC,CAAC,CAAC;SACjB,CAAC;IACH,CAAC;IAOO,WAAW,CAAC,KAAqB;QACxC,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,mBAAU,CAAC,KAAK,EAAE,GAAG,KAAK,CAAC,OAAO,KAAK,KAAK,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,KAAK,CAAC,OAAO,EAAE,CAAC,CAAC;IACxG,CAAC;CACD;AArqBD,8BAqqBC;AAOD;IACC,MAAM,eAAe,GAAG;QACvB,OAAO,EAAE,OAAO,CAAC,GAAG,CAAC,cAAc;QACnC,WAAW,EAAE,OAAO,CAAC,GAAG,CAAC,uBAAuB;QAChD,SAAS,EAAE,OAAO,CAAC,GAAG,CAAC,wBAAwB;QAC/C,SAAS,EAAE,OAAO,CAAC,GAAG,CAAC,+BAA+B;QACtD,SAAS,EAAE,OAAO,CAAC,GAAG,CAAC,oBAAoB;QAC3C,YAAY,EAAE,OAAO,CAAC,GAAG,CAAC,+BAA+B;KACzD,CAAC;IACF,CAAC,CAAC,IAAI,CAAC,eAAe,EAAE,CAAC,KAAK;QAC7B,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;YACZ,MAAM,IAAI,KAAK,CAAC,uDAAuD,CAAC,CAAC;QAC1E,CAAC;IACF,CAAC,CAAC,CAAC;IAEH,MAAM,CAAC,IAAI,SAAS,CAAC,eAAe,CAAC,CAAC;AACvC,CAAC;AAhBD,8BAgBC","file":"notifybot.js","sourcesContent":["/*\nCopyright 2017 Resin.io\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n   http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n/* tslint:disable: max-classes-per-file */\nimport * as Promise from 'bluebird';\nimport { Front, TopicConversations } from 'front-sdk';\nimport * as GithubApi from 'github';\nimport * as yaml from 'js-yaml';\nimport * as _ from 'lodash';\nimport { gt as semverGt } from 'resin-semver';\nimport TypedError = require('typed-error');\nimport * as GithubApiTypes from '../apis/githubapi-types';\nimport { ProcBot } from '../framework/procbot';\nimport { FrontHandle } from '../services/front-types';\nimport { GithubHandle, GithubLogin, GithubRegistration } from '../services/github-types';\nimport { ServiceEvent, ServiceType } from '../services/service-types';\nimport { AlertLevel, LogLevel } from '../utils/logger';\n\n/** Interface to hold details on owner and name of a repository. */\ninterface RepoDetails {\n\t/** Owner of the repository. */\n\towner: string;\n\t/** Name of the repository. */\n\trepo: string;\n}\n\n/** Contains all the information for a component deployment in an environment. */\ninterface DeployedPR {\n\t/** Name of the environment (the name of the environment repository). */\n\tenvironment: string;\n\t/** The full name (owner/name) of the component's respository. */\n\trepo: string;\n\t/** Version of the component the PR was deployed in. */\n\tversion: string;\n\t/** Version of the component being deployed. */\n\tdeployedVersion: string;\n\t/** All of the PRs associated with the deployed component version. */\n\tprs: string[];\n\t/** Whether the deployed component version is being incremented or decremented. */\n\tincrementing: boolean;\n}\n\n/** Holds data for retrieving a version of a specific file based on its hash. */\ninterface HashedFileRequest {\n\t/** Github API instance to use. */\n\tapi: GithubApi;\n\t/** Full intra-repository path of the file to retrieve. */\n\tfilepath: string;\n\t/** Hash of the file to retrieve. */\n\thash: string;\n\t/** Owner of the repository the file exists in. */\n\towner: string;\n\t/** Name of the repository the file exists in. */\n\trepo: string;\n}\n\n/** Error object for passing to notification method. */\ninterface NotifyBotError {\n\t/** A brief overview of the error. */\n\tbrief: string;\n\t/** A full error message. */\n\tmessage: string;\n\t/** Owner of the repository that originated the message. */\n\towner: string;\n\t/** Name of the respository that originated the message. */\n\trepo: string;\n\t/** Component version. */\n\tversion: string;\n}\n\n/** Error codes for NotifyBot internal errors. */\nenum NotifyErrorCodes {\n\t/** Keyframe required for retrieving component versions was missing. */\n\tKeyframeNotFound,\n\t/** Posting to the Front Conversation for an associated issue failed. */\n\tConversationPostFailed,\n\t/** Old version of a component specified is invalid. */\n\tOldVersionInvalid,\n\t/** New version of a component specified is invalid. */\n\tNewVersionInvalid\n}\n\n/** Custom error to use when a failure occurs. */\nclass NotifyBotError extends TypedError {\n\t/** Name of the error. */\n\tpublic name: string;\n\t/** Stack trace. */\n\tpublic stack: string;\n\t/** Message error from HTTP. */\n\tpublic message: string;\n\t/** Error code. */\n\tpublic code: number;\n\t/** Owner of the repo. */\n\tpublic owner: string;\n\t/** Name of the repo. */\n\tpublic repo: string;\n\t/** Version of the component being operated upon. */\n\tpublic version: string;\n\t/** Type of the error. */\n\tpublic type = 'NotifyBotError';\n\n\t/**\n\t * Constructs a new NotifyBot error.\n\t * @param code     NotifyBotError code to set.\n\t * @param message  Message to send back as reason error occurred.\n\t */\n\tconstructor(code: number, message: string, owner: string, repo: string, version: string) {\n\t\tsuper();\n\n\t\t// Set from parameters.\n\t\tthis.code = code;\n\t\tthis.message = message;\n\t\tthis.owner = owner;\n\t\tthis.repo = repo;\n\t\tthis.version = version;\n\t}\n}\n\n/** Interface for storing the PRs for each version of a component. */\ninterface VersionPRTracker {\n\t[version: string]: string[];\n}\n\n/** Tracks a component from the keyframe file. */\ninterface ComponentTracker {\n\t/** Name of the component. */\n\tname: string;\n\t/** Old version (if any) of the component from previous iteration of keyframe file. */\n\toldVersion: string | null;\n\t/** New version of component from current iteration of keyframe file. */\n\tnewVersion: string;\n\t/** Full repository name of the component. */\n\trepo: string;\n\t/** Whether the version is incrementing or decrementing. */\n\tincrementing: boolean;\n\t/** All the PRs for each version of the component.  */\n\tversions?: VersionPRTracker;\n}\n\n/** Configuration interface for initialising NotifyBot. */\nexport interface NotifyBotConfig {\n\t/** The name of the bot. */\n\tbotName: string;\n\t/** The Github App ID to use. */\n\tgithubApp: string;\n\t/** The PEM for communicating with Github. */\n\tgithubPEM: string;\n\t/** The secret webhook key for validating messages from Github. */\n\tgithubSecret: string;\n\t/** The API key for communicating with Front. */\n\tfrontApiKey: string;\n\t/** The username to use in Front comments (this should be a unique username for NotifyBot use). */\n\tfrontUser: string;\n}\n\n/** Stores Front topic information relating to component issues for a PR. */\ninterface TopicIssues {\n\t/** A full description of each issue along with their location in the component repository. */\n\trelatedIssues: string[];\n\t/** The Front topic IDs that should be commented on for these issues. */\n\ttopics: string[];\n}\n\n/** The port that Github attempts to send events on. */\nconst NotifyBotPort = 8399; // Not a listed registered port\n\n/**\n * The RegExp to use to determine if a PR/Issue is connected to another. See the following links:\n *   * https://help.github.com/articles/closing-issues-via-commit-messages/\n *   * https://help.waffle.io/faq/waffle-workflow/use-waffles-connect-keyword-to-connect-prs-to-issues\n * Additionally, this searches for the 'Connects-To:` keyword, which is specified by the Commit/PR guidelines.\n */\nconst IssueRefRE = new RegExp('((?:close[sd]?|fix(?:e[sd]{1})?|resolve[sd]?):?|' +\n\t'connect(?:(?:s|ed)?\\\\s+(?:to)?:?|s-to:))\\\\s+(#[0-9]+)', 'gi');\n\n/** The RegExp used to determine if an HQ issue is linked to from a component issue. */\nconst HqRE = /hq:\\s+https:\\/\\/github.com\\/resin-io\\/hq\\/issues\\/([0-9]+)/gi;\n\n/** Name of the keyframe file to search for in an environment repository. */\nconst KeyframeFile = 'keyframe.yml';\n/** Name of the changelog file in every component repository to scan for versions. */\nconst ChangelogFile = 'CHANGELOG.md';\n/** The virgin reference from a push, denotes that we should not work on the keyframe.  */\nconst VirginRef = '0000000000000000000000000000000000000000';\n/** Owner of the HQ repository. */\nconst HqOwner = 'resin-io';\n/** The HQ repository name. */\nconst HqRepo = 'hq';\n/** Hook path for receiving GH Webhooks. */\nconst WebhookPath = '/notifyhooks';\n\n/**\n * NotifyBot tracks the deployment of component versions to an environment, by comparing a pushed keyframe\n * file with its previous iteration in the environment's repository. For every component whose version has\n * altered, it gathers the PRs that were merged between the versions, and then comments on those PRs.\n *\n * Should a component's version have *incremented* in a keyframe update, then:\n *   * Every PR which has now been deployed with this version is commented upon, informing the author that\n *     the PR is now live on the specific environment the keyframe was modified in.\n *   * For every issue linked to that PR, and for any Front conversations that have been tagged in those\n *     issues, a comment is made on the Front conversation that allows an agent to report to customers that\n *     the issue/feature is now live on the specific environment.\n *     HQ issues are followed, if they have been embedded in an PR's Issue, allowing Front conversations\n *     that occur in those HQ Issues to also be commented upon.\n *\n * Should a component's version have *decremented* in a keyframe update, then:\n *   * Every PR which has now been regressed with this version is commented upon, informing the author that\n *     the PR has now been removed on the specific environment the keyframe was modified in.\n *   * For every issue linked to that PR, and for any Front conversations that have been tagged in those\n *     issues, a comment is made on the Front conversation that allows an agent to report to customers that\n *     the issue/feature is has been removed from the specific environment.\n *     HQ issues are followed, if they have been embedded in an PR's Issue, allowing Front conversations\n *     that occur in those HQ Issues to also be commented upon.\n */\nexport class NotifyBot extends ProcBot {\n\t/** Github ServiceEmitter name. */\n\tprivate githubEmitterName: string;\n\t/** Front ServiceEmitter name. */\n\tprivate frontEmitterName: string;\n\t/** Front user to use when commenting on Front conversations. */\n\tprivate frontUser: string;\n\t/** Instance of the Front API retrieved from the Front ServiceEmitter. */\n\tprivate frontApi: Front;\n\t/** Instance of the Github API retrieved from the Github ServiceEmitter. */\n\tprivate githubApi: GithubApi;\n\n\t/**\n\t * Constructor.\n\t *\n\t * @param config  Configuration object for initialising the bot.\n\t */\n\tconstructor(config: NotifyBotConfig) {\n\t\tsuper(config.botName);\n\n\t\t// Create a new listener for Github with the right Integration ID.\n\t\tconst ghListener = this.addServiceListener('github', {\n\t\t\tclient: config.botName,\n\t\t\tauthentication: {\n\t\t\t\tappId: config.githubApp,\n\t\t\t\tpem: config.githubPEM,\n\t\t\t\ttype: GithubLogin.App\n\t\t\t},\n\t\t\tpath: WebhookPath,\n\t\t\tport: NotifyBotPort,\n\t\t\ttype: ServiceType.Listener,\n\t\t\twebhookSecret: config.githubSecret\n\t\t});\n\n\t\t// Create a new emitter with the right Integration ID.\n\t\tconst ghEmitter = this.addServiceEmitter('github', {\n\t\t\tauthentication: {\n\t\t\t\tappId: config.githubApp,\n\t\t\t\tpem: config.githubPEM,\n\t\t\t\ttype: GithubLogin.App\n\t\t\t},\n\t\t\tpem: config.githubPEM,\n\t\t\ttype: ServiceType.Emitter\n\t\t});\n\n\t\t// Create a new emitter.\n\t\tconst frontEmitter = this.addServiceEmitter('front', {\n\t\t\ttoken: config.frontApiKey,\n\t\t});\n\n\t\t// Throw if we didn't get either of the services.\n\t\tif (!ghListener) {\n\t\t\tthrow new Error(\"Couldn't create a Github listener\");\n\t\t}\n\t\tif (!ghEmitter) {\n\t\t\tthrow new Error(\"Couldn't create a Github emitter\");\n\t\t}\n\t\tif (!frontEmitter) {\n\t\t\tthrow new Error(\"Couldn't create a Front emitter\");\n\t\t}\n\t\tthis.githubEmitterName = ghEmitter.serviceName;\n\t\tthis.frontEmitterName = frontEmitter.serviceName;\n\n\t\t// Get the SDK handles\n\t\t// Github App API handle, used generally for most ops.\n\t\tthis.githubApi = (<GithubHandle>ghEmitter.apiHandle).github;\n\t\tif (!this.githubApi) {\n\t\t\tthrow new Error('No Github App API instance found');\n\t\t}\n\n\t\t// Get the Front details, too.\n\t\tconst frontHandles = <FrontHandle>frontEmitter.apiHandle;\n\t\tthis.frontApi = frontHandles.front;\n\t\tthis.frontUser = config.frontUser;\n\n\t\t// All we need to do is listen to push events on the environment repo.\n\t\tghListener.registerEvent({\n\t\t\t\tevents: [ 'push' ],\n\t\t\t\tlistenerMethod: this.checkPush,\n\t\t\t\tname: 'CheckMasterPush'\n\t\t});\n\t}\n\n\t/**\n\t * ListenerMethod that interrogates pushes and determines component version changes.\n\t *\n\t * @param _registration  GithubRegistration object used to register the method.\n\t * @param event          ServiceEvent containing the event information ('status' event).\n\t * @returns              A void Promise once execution has finished.\n\t */\n\tprotected checkPush = (_registration: GithubRegistration, event: ServiceEvent): Promise<void> => {\n\t\tconst pushEvent = <GithubApiTypes.PushEvent>event.cookedEvent.data;\n\t\tconst commits = pushEvent.commits;\n\t\tconst newHash = pushEvent.after;\n\t\tconst oldHash = pushEvent.before;\n\t\tconst owner = pushEvent.repository.owner.name;\n\t\tconst repo = pushEvent.repository.name;\n\n\t\t// If a reference is virgin (00000...) then we totally ignore this.\n\t\t// It's probably a tag or a new branch. Either way, it holds no interest to us.\n\t\tif ((oldHash === VirginRef) || (newHash === VirginRef)) {\n\t\t\treturn Promise.resolve();\n\t\t}\n\n\t\t// We're looking for the keyframe file in any of the commits.\n\t\t// If we find it, then this push requires us to get the difference between versions.\n\t\t// Note: This only works on modified files. Adding or removing a keyframe file makes\n\t\t// no sense logistically for NotifyBot.\n\t\tif (!_.some(commits, (commit) => _.includes(commit.modified, KeyframeFile))) {\n\t\t\treturn Promise.resolve();\n\t\t}\n\n\t\t// Now get copies of the Keyframe file pre and post changes.\n\t\t// We'll decode each of these into objects so we can scan through and determine the changes in\n\t\t// version numbers for all components.\n\t\tlet fileRequest = {\n\t\t\tapi: this.githubApi,\n\t\t\tfilepath: KeyframeFile,\n\t\t\towner,\n\t\t\thash: oldHash,\n\t\t\trepo,\n\t\t};\n\t\tlet oldFile = '';\n\t\tlet newFile = '';\n\t\treturn this.retrieveFileFromHash(fileRequest).then((fileContents: string | void) => {\n\t\t\tif (!fileContents) {\n\t\t\t\tthrow new Error(`Couldn't find the old hash for the Keyframe: ${owner}/${repo}:${oldHash}`);\n\t\t\t}\n\n\t\t\toldFile = fileContents;\n\t\t\tfileRequest.hash = newHash;\n\n\t\t\treturn this.retrieveFileFromHash(fileRequest);\n\t\t}).then((fileContents: string | void) => {\n\t\t\tif (!fileContents) {\n\t\t\t\tthrow new Error(`Couldn't find the new hash for the Keyframe: ${owner}/${repo}:${newHash}`);\n\t\t\t}\n\t\t\tnewFile = fileContents;\n\n\t\t\t// Both of these files are YAML. Decode the YAML and look specifically for\n\t\t\t// the versions of components, noting the old version and new version for each:\n\t\t\t//  * No old version, we must go through every version in a Changelog\n\t\t\t//  * Old version, we go through every version from old + 1 to new (might just be one)\n\t\t\t//  * No new version, we abort\n\t\t\t//  * Should *either* the old (if existing) or new version be invalid (ie. do not exist\n\t\t\t//    in the component's CHANGELOG.md), then the component is skipped and an error reported.\n\t\t\tconst oldComponents = yaml.safeLoad(oldFile).keyframe.components || {};\n\t\t\tconst newComponents = yaml.safeLoad(newFile).keyframe.components;\n\n\t\t\t// Track every new version by trying to match a component in the new version\n\t\t\t// with a component in the old.\n\t\t\tconst componentVersions: ComponentTracker[] = [];\n\t\t\t_.each(newComponents, (value: any, key: string) => {\n\t\t\t\t// Try and find the old version of the component.\n\t\t\t\tconst newVersion = value.version;\n\t\t\t\tconst oldVersion = _.get(oldComponents[key], 'version', null);\n\t\t\t\tconst componentRepo = value.repository;\n\n\t\t\t\t// If we have a new version, and it doesn't match the old version and has a repo,\n\t\t\t\t// then we want to do something with it.\n\t\t\t\tif (newVersion && repo && (newVersion !== oldVersion)) {\n\t\t\t\t\tcomponentVersions.push({\n\t\t\t\t\t\toldVersion,\n\t\t\t\t\t\tname: key,\n\t\t\t\t\t\tnewVersion,\n\t\t\t\t\t\trepo: componentRepo,\n\t\t\t\t\t\tincrementing: true,\n\t\t\t\t\t\tversions: undefined\n\t\t\t\t\t});\n\t\t\t\t} else if (newVersion === oldVersion) {\n\t\t\t\t\t// We don't operate on static versions.\n\t\t\t\t\tthis.logger.log(LogLevel.INFO, `Component version for ${componentRepo} static, nothing to do ` +\n\t\t\t\t\t\t`for ${repo}`);\n\t\t\t\t}\n\t\t\t});\n\n\t\t\t// We now have a set of components. For each of them, we now go through the process\n\t\t\t// of following the Changelogs to find fixed issues.\n\t\t\t// Any thrown error here needs to abort the run, as it means fundamentally something is\n\t\t\t// wrong with the released versions.\n\t\t\treturn Promise.map(componentVersions, (component) => this.getNewPRs(component));\n\t\t})\n\t\t.filter((component) => _.has(component, 'versions'))\n\t\t.then((components: ComponentTracker[]) => {\n\t\t\t// We've a list of components and the PRs for each version.\n\t\t\t// So, for each version we now harvest the relevant PRs and start the check\n\t\t\t// backwards for Front URLs.\n\t\t\treturn Promise.map(components, (component: ComponentTracker) => {\n\t\t\t\treturn Promise.all(_.map(component.versions, (prs, key) => {\n\t\t\t\t\treturn this.tracePRAndNotify({\n\t\t\t\t\t\tenvironment: repo,\n\t\t\t\t\t\trepo: component.repo,\n\t\t\t\t\t\tversion: key,\n\t\t\t\t\t\tdeployedVersion: component.newVersion.substring(1),\n\t\t\t\t\t\tincrementing: component.incrementing,\n\t\t\t\t\t\tprs\n\t\t\t\t\t});\n\t\t\t\t}));\n\t\t\t}).return();\n\t\t}).catch((err: Error) => {\n\t\t\t// Call the VersionBot error specific method if this wasn't the short circuit for\n\t\t\t// committed code.\n\t\t\tthis.reportError(new NotifyBotError(NotifyErrorCodes.KeyframeNotFound,\n\t\t\t\t`${process.env.NOTIFYBOT_NAME} failed to find Keyframe versions. The reason ` +\n\t\t\t\t`for this is:\\r\\n${err.message}\\r\\n` +\n\t\t\t\t'Please carry out relevant changes or alert an appropriate admin.',\n\t\t\t\towner, repo, 'unknown'\n\t\t\t));\n\t\t});\n\t}\n\n\t/**\n\t * Trace each PR for a deployed/regressed component version and notify the authors of the PR of its\n\t * state, along with following any Front conversations associated with them via issues and\n\t * commenting on them.\n\t *\n\t * @param prDetails  Details of the component being deployed/regressed.\n\t * @returns           Promise on completion of notifications.\n\t */\n\tprivate tracePRAndNotify(prDetails: DeployedPR): Promise<void> {\n\t\t// RegExp checking for issue cross referencing.\n\t\tconst repoDetails = this.getRepoDetails(prDetails.repo);\n\t\tif (!repoDetails) {\n\t\t\tthrow new Error(`Cannot find appropriate repo/owner for ${prDetails.repo}`);\n\t\t}\n\n\t\t// Go through each PR associated with the version.\n\t\treturn Promise.map(prDetails.prs, (pr) => {\n\t\t\tconst prData = {\n\t\t\t\tnumber: pr,\n\t\t\t\towner: repoDetails.owner,\n\t\t\t\trepo: repoDetails.repo,\n\t\t\t};\n\n\t\t\t// Get the PR. Get all comments. Look for links to issues in both, including links to HQ issues.\n\t\t\treturn Promise.join(this.dispatchToEmitter(this.githubEmitterName, {\n\t\t\t\t\tdata: prData,\n\t\t\t\t\tmethod: this.githubApi.issues.getComments,\n\t\t\t\t}),\n\t\t\t\tthis.dispatchToEmitter(this.githubEmitterName, {\n\t\t\t\t\tdata: prData,\n\t\t\t\t\tmethod: this.githubApi.pullRequests.get\n\t\t\t\t}),\n\t\t\t\t(comments: GithubApiTypes.IssueComment[], pullRequest: GithubApiTypes.PullRequest) => {\n\t\t\t\t\t// Find reference to parent issues. We should not have any Front conversations in a PR.\n\t\t\t\t\treturn  _.concat(_.flatMap(comments, (comment) => this.matchIssue(comment.body, IssueRefRE)),\n\t\t\t\t\t\tthis.matchIssue(pullRequest.body, IssueRefRE),\n\t\t\t\t\t\t_.flatMap(comments, (comment) => this.matchIssue(comment.body, HqRE)),\n\t\t\t\t\t\tthis.matchIssue(pullRequest.body, HqRE));\n\t\t\t\t}\n\t\t\t).then((issueNumbers) => {\n\t\t\t\t// Get every issue.\n\t\t\t\treturn Promise.mapSeries(issueNumbers, (issueNumber) => {\n\t\t\t\t\tlet topicIssues: TopicIssues;\n\n\t\t\t\t\t// Get any Front topics that exist on the issue.\n\t\t\t\t\treturn this.getTopicsOnIssue(issueNumber, repoDetails.owner, repoDetails.repo)\n\t\t\t\t\t.then((results) => {\n\t\t\t\t\t\ttopicIssues = results;\n\t\t\t\t\t\treturn this.retrieveTopics(topicIssues.topics);\n\t\t\t\t\t}).then((conversations: string[]) => {\n\t\t\t\t\t\t// Now we have all Front threads. Examine each of them for their IDs, and then post a private\n\t\t\t\t\t\t// comment into them to note updated references.\n\t\t\t\t\t\tlet bodyMessage: string;\n\t\t\t\t\t\tif (prDetails.incrementing) {\n\t\t\t\t\t\t\tbodyMessage = `Deployed version ${prDetails.deployedVersion} of ${prDetails.repo} on ` +\n\t\t\t\t\t\t\t`the ${prDetails.environment} has affected the following issues that are attached ` +\n\t\t\t\t\t\t\t\t'to this conversation:';\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tbodyMessage = `Regression to version ${prDetails.deployedVersion} of ${prDetails.repo} ` +\n\t\t\t\t\t\t\t\t`on the ${prDetails.environment} means the following issues attached to this ` +\n\t\t\t\t\t\t\t\t'conversation are relevant again:';\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbodyMessage += '\\n' + topicIssues.relatedIssues.join('\\n');\n\n\t\t\t\t\t\t// Add the comment on every conversation.\n\t\t\t\t\t\treturn Promise.map(conversations, (conversation) => {\n\t\t\t\t\t\t\tthis.logger.log(LogLevel.INFO, `---> Commenting on Front ${conversation} for ` +\n\t\t\t\t\t\t\t\t`${prData.owner}/${prData.repo}#${prData.number}:${prDetails.version};` +\n\t\t\t\t\t\t\t\t` deployed version: ${prDetails.deployedVersion}`);\n\n\t\t\t\t\t\t\treturn this.dispatchToEmitter(this.frontEmitterName, {\n\t\t\t\t\t\t\t\tdata: {\n\t\t\t\t\t\t\t\t\tauthor_id: `alt:email:${this.frontUser}`,\n\t\t\t\t\t\t\t\t\tbody: bodyMessage,\n\t\t\t\t\t\t\t\t\tconversation_id: conversation,\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tmethod: this.frontApi.comment.create,\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t});\n\t\t\t\t\t}).catch((err: Error) => {\n\t\t\t\t\t\t// We log that we couldn't post to Front, but we still want to post to Github PR if possible.\n\t\t\t\t\t\tthis.logger.alert(AlertLevel.ERROR, 'Couldn\\'t retrieve or post to the relevant Front ' +\n\t\t\t\t\t\t\t`conversations for \\`${prData.owner}/${prData.repo}#${prData.number}:` +\n\t\t\t\t\t\t\t`${prDetails.version}\\`: ${err.message}`);\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t}).then(() => {\n\t\t\t\t// Finally comment on the actual PR saying that the component with this\n\t\t\t\t// PR in has been deployed, and in which version. Ping the author directly\n\t\t\t\t// so they know.\n\t\t\t\treturn this.dispatchToEmitter(this.githubEmitterName,\n\t\t\t\t\t{\n\t\t\t\t\t\tdata: prData,\n\t\t\t\t\t\tmethod: this.githubApi.pullRequests.get\n\t\t\t\t\t}\n\t\t\t\t).then((pullRequest) => {\n\t\t\t\t\tlet body: string;\n\t\t\t\t\tif (prDetails.incrementing) {\n\t\t\t\t\t\tbody = `Hi @${pullRequest.user.login}! This PR is now deployed in version ` +\n\t\t\t\t\t\t\t`\\`${prDetails.deployedVersion}\\` on the \\`${prDetails.environment}\\` environment. ` +\n\t\t\t\t\t\t\t`It was originally merged in version \\`${prDetails.version}\\`. Please remember to publish ` +\n\t\t\t\t\t\t\t'release notes on the `r/devops-reliability` flowdock channel.';\n\t\t\t\t\t} else {\n\t\t\t\t\t\tbody = `Hi @${pullRequest.user.login}! This PR has been revoked as part of the deploy of ` +\n\t\t\t\t\t\t\t`version \\`${prDetails.deployedVersion}\\` on the \\`${prDetails.environment}\\` environment. ` +\n\t\t\t\t\t\t\t`It was originally merged in version \\`${prDetails.version}\\`. Please check with admins on ` +\n\t\t\t\t\t\t\t'`r/devops-reliability` as to why this occurred.';\n\t\t\t\t\t}\n\n\t\t\t\t\tthis.logger.log(LogLevel.INFO, `--> Commenting on PR ${prData.owner}/${prData.repo}#` +\n\t\t\t\t\t\t`${prData.number}:${prDetails.version}; deployed version: ${prDetails.deployedVersion}`);\n\n\t\t\t\t\treturn this.dispatchToEmitter(this.githubEmitterName, {\n\t\t\t\t\t\tdata: {\n\t\t\t\t\t\t\tbody,\n\t\t\t\t\t\t\tnumber: prData.number,\n\t\t\t\t\t\t\towner: prData.owner,\n\t\t\t\t\t\t\trepo: prData.repo,\n\t\t\t\t\t\t},\n\t\t\t\t\t\tmethod: this.githubApi.issues.createComment\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t});\n\t\t}).catch((err: Error) => {\n\t\t\tthis.reportError(new NotifyBotError(NotifyErrorCodes.ConversationPostFailed,\n\t\t\t\t`Couldn't post to the conversation or PR for the specified issue: ${err}`,\n\t\t\t\trepoDetails.owner,\n\t\t\t\trepoDetails.repo,\n\t\t\t\tprDetails.version\n\t\t\t));\n\t\t}).return();\n\t}\n\n\t/**\n\t * Match text within an Issue with a given RegExp.\n\t *\n\t * @param text    The string to test.\n\t * @param regExp  The RegExp to test with (expected to be a global match).\n\t * @returns       An array of any matching results.\n\t */\n\tprivate matchIssue(text: string, regExp: RegExp): string[] {\n\t\tconst results: string[] = [];\n\t\tlet match: RegExpExecArray | null = regExp.exec(text);\n\t\twhile (match) {\n\t\t\tif (!_.includes(results, match[1])) {\n\t\t\t\tresults.push(match[1]);\n\t\t\t}\n\t\t\tmatch = regExp.exec(text);\n\t\t}\n\n\t\treturn results;\n\t}\n\n\t/**\n\t * Retrieve topics for an issue. This goes through an issue and associated HQ issues connected to find\n\t * the relevant Front topic URLs for it.\n\t *\n\t * @param issueNumber  The Issue number to search.\n\t * @param issueOwner   The owner of the Issue repository.\n\t * @param issueRepo    The name of the Issue repository\n\t * @returns            A Promise containing any Front topics found.\n\t */\n\tprivate getTopicsOnIssue(issueNumber: string, issueOwner: string, issueRepo: string): Promise<TopicIssues> {\n\t\t// Ensure that we don't follow indirect HQ issues from other HQ issues.\n\t\tlet skipHqIssue = true;\n\t\tconst getIssueAndComments = (issue: string, owner: string, repo: string, method: object) => {\n\t\t\t// We need to look both at the issue body itself and all comments to\n\t\t\t// get potential Front conversations as well as links to HQ.\n\t\t\treturn Promise.join(\n\t\t\t\tthis.dispatchToEmitter(this.githubEmitterName, {\n\t\t\t\t\tdata: {\n\t\t\t\t\t\tnumber: issue,\n\t\t\t\t\t\towner,\n\t\t\t\t\t\trepo,\n\t\t\t\t\t},\n\t\t\t\t\tmethod: this.githubApi.issues.get,\n\t\t\t\t}),\n\t\t\t\tthis.dispatchToEmitter(this.githubEmitterName, {\n\t\t\t\t\tdata: {\n\t\t\t\t\t\tnumber: issue,\n\t\t\t\t\t\towner,\n\t\t\t\t\t\trepo,\n\t\t\t\t\t},\n\t\t\t\t\tmethod: this.githubApi.issues.getComments,\n\t\t\t\t}),\n\t\t\t\tmethod\n\t\t\t).catch((err: Error) => {\n\t\t\t\t// If we couldn't find the comments (or in fact the PR, but that must exist\n\t\t\t\t// as we've been sent the event), then it's not an error. We still want to\n\t\t\t\t// post on the PR that a version has been deployed, even though there may\n\t\t\t\t// be no Front topics.\n\t\t\t\tif (err.message !== 'Not Found') {\n\t\t\t\t\tthrow err;\n\t\t\t\t}\n\n\t\t\t\treturn Promise.resolve([]);\n\t\t\t});\n\t\t};\n\t\tconst matchFrontTopics = (issue: GithubApiTypes.Issue, comments: GithubApiTypes.IssueComment[]) => {\n\t\t\tconst frontRE = /\\[front conversations\\]\\((.*)\\)/gi;\n\n\t\t\t// Match any Front conversations or HQ ref issues.\n\t\t\treturn _.concat(this.matchIssue(issue.body, frontRE),\n\t\t\t\t_.flatMap(comments, (comment) => this.matchIssue(comment.body, frontRE)));\n\t\t};\n\t\tconst githubURL = `https://github.com`;\n\t\tconst relatedIssues: string[] = [];\n\n\t\t// If issue starts with a #, this is an HQ issue.\n\t\tif (_.startsWith(issueNumber, '#')) {\n\t\t\tissueNumber = issueNumber.substring(1);\n\t\t\tskipHqIssue = false;\n\t\t}\n\n\t\t// Get local issues. Might include HQ issues.\n\t\treturn getIssueAndComments(issueNumber, issueOwner, issueRepo,\n\t\t(issue: GithubApiTypes.Issue, comments: GithubApiTypes.IssueComment[]) => {\n\t\t\tconst hqRefs = _.concat(_.flatMap(comments, (comment) => this.matchIssue(comment.body, HqRE)),\n\t\t\t\tthis.matchIssue(issue.body, HqRE));\n\n\t\t\t// Match any Front conversations or HQ ref issues.\n\t\t\tlet frontTopics = matchFrontTopics(issue, comments);\n\t\t\tif (frontTopics.length > 0) {\n\t\t\t\trelatedIssues.push(`${issue.title}: ${githubURL}/${issueOwner}/${issueRepo}/issues/${issueNumber}`);\n\t\t\t}\n\n\t\t\t// If we have any HQ refs, we need to now do the same thing\n\t\t\t// with those.\n\t\t\tif (!skipHqIssue && (hqRefs.length > 0)) {\n\t\t\t\treturn Promise.mapSeries(hqRefs, (hqRef) => {\n\t\t\t\t\treturn getIssueAndComments(hqRef, HqOwner, HqRepo,\n\t\t\t\t\t\t(hqIssue: GithubApiTypes.Issue, hqComments: GithubApiTypes.IssueComment[]) => {\n\t\t\t\t\t\t\tconst hqTopics = matchFrontTopics(hqIssue, hqComments);\n\t\t\t\t\t\t\tif (hqTopics.length > 0) {\n\t\t\t\t\t\t\t\trelatedIssues.push(`${hqIssue.title}: ${githubURL}/${HqOwner}/` +\n\t\t\t\t\t\t\t\t\t`${HqRepo}/issues/${hqRef}`);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\treturn hqTopics;\n\t\t\t\t\t\t}\n\t\t\t\t\t);\n\t\t\t\t}).then((hqRefFrontTopics: string[][]) => {\n\t\t\t\t\treturn frontTopics.concat(_.flatten(hqRefFrontTopics));\n\t\t\t\t});\n\t\t\t}\n\n\t\t\t// Else just return the already resolved topics.\n\t\t\treturn frontTopics;\n\t\t}).then((topics) => {\n\t\t\treturn {\n\t\t\t\trelatedIssues,\n\t\t\t\ttopics\n\t\t\t};\n\t\t});\n\t}\n\n\t/**\n\t * Retrieves the PRs from the changelog file given an old version (if any) and a new version.\n\t * It determines whether a component is being incremented or decremented.\n\t *\n\t * @param component  Component information object.\n\t * @returns          An updated component information object.\n\t */\n\tprivate getNewPRs(component: ComponentTracker): Promise<ComponentTracker> {\n\t\t// Get the changelog for the component from its `master`, as this file\n\t\t// *should* include all given versions. If it doesn't, then something is broken\n\t\t// or the keyframe is incorrect.\n\t\tconst repo = this.getRepoDetails(component.repo);\n\t\tlet allTags: string[];\n\t\tif (!repo) {\n\t\t\tthrow new Error(`Cannot find appropriate repo/owner for ${component.repo}`);\n\t\t}\n\n\t\t// Retrieve all tagged versions\n\t\treturn this.dispatchToEmitter(this.githubEmitterName, {\n\t\t\tdata: {\n\t\t\t\towner: repo.owner,\n\t\t\t\trepo: repo.repo\n\t\t\t},\n\t\t\tmethod: this.githubApi.repos.getTags\n\t\t}).then((tags: GithubApiTypes.Tag[]) => {\n\t\t\tallTags = _.map(tags, 'name');\n\n\t\t\t// Retrieve the changelog.\n\t\t\treturn this.retrieveFileFromHash({\n\t\t\t\tapi: this.githubApi,\n\t\t\t\tfilepath: ChangelogFile,\n\t\t\t\thash: 'HEAD',\n\t\t\t\towner: repo.owner,\n\t\t\t\trepo: repo.repo,\n\t\t\t});\n\t\t}).then((file) => {\n\t\t\tif (!file) {\n\t\t\t\tthrow new Error(`Couldn't find the CHANGELOG.md in ${repo.owner}/${repo.repo}`);\n\t\t\t}\n\n\t\t\t// We have the Changelog, we want to cull any versions which aren't\n\t\t\t// relevant by removing them. Do this by splitting the lines based on\n\t\t\t// the old version and the new version.\n\t\t\t// For both incrementing and decrementing versions, we want all the versions\n\t\t\t// that exist between the greatest version (inclusive) and the oldest version\n\t\t\t// (exclusive).\n\t\t\t// We can easily get this by swapping the versions for decrementing.\n\t\t\tlet changeParts = [ file ];\n\t\t\tlet changelogString = '';\n\n\t\t\t// Ensure that the old version (if there is one) and the new version are valid.\n\t\t\tif (component.oldVersion) {\n\t\t\t\tif (!_.includes(allTags, component.oldVersion)) {\n\t\t\t\t\tthis.reportError(new NotifyBotError(NotifyErrorCodes.OldVersionInvalid,\n\t\t\t\t\t\t`The old version of the component in the old keyframe was invalid`,\n\t\t\t\t\t\trepo.owner,\n\t\t\t\t\t\trepo.repo,\n\t\t\t\t\t\tcomponent.oldVersion\n\t\t\t\t\t));\n\t\t\t\t\treturn component;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (!_.includes(allTags, component.newVersion)) {\n\t\t\t\tthis.reportError(new NotifyBotError(NotifyErrorCodes.NewVersionInvalid,\n\t\t\t\t\t`The new version of the component in the new keyframe was invalid`,\n\t\t\t\t\trepo.owner,\n\t\t\t\t\trepo.repo,\n\t\t\t\t\tcomponent.newVersion\n\t\t\t\t));\n\n\t\t\t\treturn component;\n\t\t\t}\n\n\t\t\t// If there's no old version, then *anything* we release is essentially new and\n\t\t\t// therefore is now implemented. It is implicitly an incrementing version.\n\t\t\tif (!component.oldVersion) {\n\t\t\t\tcomponent.incrementing = true;\n\t\t\t} else if (semverGt(component.oldVersion, component.newVersion)) {\n\t\t\t\t// A new version less than an older version is a version down.\n\t\t\t\tcomponent.incrementing = false;\n\t\t\t} else if (semverGt(component.newVersion, component.oldVersion)) {\n\t\t\t\tcomponent.incrementing = true;\n\t\t\t}\n\n\t\t\t// If there is an old component, use it to cull anything before that version.\n\t\t\t// We end up with a portion of the changelog that only includes details\n\t\t\t// between the old version and the last entry in the changelog.\n\t\t\tif (component.oldVersion) {\n\t\t\t\tchangeParts = changeParts[0].split(component.incrementing ? `## ${component.oldVersion}` :\n\t\t\t\t\t`## ${component.newVersion}`);\n\t\t\t}\n\n\t\t\t// The splitting strips the previous header entry, so add it back depending on whether we're\n\t\t\t// incrementing or decrementing in version.\n\t\t\t// Then split the changelog portion again to end up only with a portion that\n\t\t\t// contains all entries between the old and new version.\n\t\t\tchangelogString = `## ${component.incrementing ? component.newVersion : component.oldVersion}` +\n\t\t\t\tchangeParts[0].split(component.incrementing ? component.newVersion : (component.oldVersion || ''))[1];\n\n\t\t\t// Split the changelog based on version entries. This ensures we end up with\n\t\t\t// an array, each entry being a single version set of changes, for example:\n\t\t\t//  \"v1.2.3 - 2018-08-02\\n\\n* This does something else #124 [Author]\"\n\t\t\t//  \"v1.2.2 - 2018-08-01\\n\\n* This does something #123 [Author]\"\n\t\t\tconst versionEntries = changelogString.split('## ');\n\n\t\t\t// For each entry, ensure it's a valid changelog entry, and then match the\n\t\t\t// format for an entry (\"* <entry> #<pr> [<author>]\"). For each PR found\n\t\t\t// add it to the version track for that version.\n\t\t\tconst versionTracker: VersionPRTracker = {};\n\t\t\t_.each(versionEntries, (versionData) => {\n\t\t\t\tlet verMatches: RegExpExecArray | null;\n\t\t\t\tconst versionMatch = versionData.match(/^v([0-9]+\\.[0-9]+\\.[0-9]+)/);\n\t\t\t\tif (versionMatch) {\n\t\t\t\t\tconst version = versionMatch[1];\n\t\t\t\t\tconst matchRE = /\\*\\s+.*\\s+#([0-9]+)\\s\\[.*\\]/gm;\n\t\t\t\t\tverMatches = matchRE.exec(versionData);\n\t\t\t\t\twhile (verMatches) {\n\t\t\t\t\t\tif (!versionTracker[version]) {\n\t\t\t\t\t\t\tversionTracker[version] = [];\n\t\t\t\t\t\t}\n\t\t\t\t\t\tversionTracker[version].push(verMatches[1]);\n\t\t\t\t\t\tverMatches = matchRE.exec(versionData);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t\tcomponent.versions = versionTracker;\n\n\t\t\treturn component;\n\t\t});\n\t}\n\n\t/**\n\t * Retrieves a file from a specific repository, given a file path and hash.\n\t *\n\t * @param fileRequest  Full details on the file that is required.\n\t * @returns            Promise containing contents of the file as a string, or void if unavailable.\n\t */\n\tprivate retrieveFileFromHash(fileRequest: HashedFileRequest): Promise<string | void> {\n\t\tconst request = {\n\t\t\tdata: {\n\t\t\t\towner: fileRequest.owner,\n\t\t\t\tpath: fileRequest.filepath,\n\t\t\t\tref: fileRequest.hash,\n\t\t\t\trepo: fileRequest.repo,\n\t\t\t},\n\t\t\tmethod: this.githubApi.repos.getContent\n\t\t};\n\n\t\t// Retrieve the file, and decode.\n\t\treturn this.dispatchToEmitter(this.githubEmitterName, request).then((file: GithubApiTypes.Content) => {\n\t\t\tif (!file) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (file.encoding !== 'base64') {\n\t\t\t\tthis.logger.log(LogLevel.WARN, 'Content is not in expected format');\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Convert from Base64 into valid content.\n\t\t\treturn Buffer.from(file.content, 'base64').toString();\n\t\t});\n\t}\n\n\t/**\n\t * Retrieve all Front conversations from a set of Front topics.\n\t *\n\t * @param topics  The list of topic IDs to retrieve conversations for.\n\t * @returns       Promise containing all of the conversations IDs found.\n\t */\n\tprivate retrieveTopics(topics: string[]): Promise<string[]> {\n\t\t// Retrieve the formal topic ID for the shortened form.\n\t\treturn Promise.map(topics, (topic) => {\n\t\t\tconst shortenedTopic = topic.substring(topic.lastIndexOf('/') + 1);\n\t\t\treturn this.dispatchToEmitter(this.frontEmitterName, {\n\t\t\t\tdata: {\n\t\t\t\t\ttopic_id: shortenedTopic\n\t\t\t\t},\n\t\t\t\tmethod: this.frontApi.topic.listConversations\n\t\t\t}).then((conversations: TopicConversations) => {\n\t\t\t\treturn _.map(conversations._results, 'id');\n\t\t\t});\n\t\t}).then(_.flatten);\n\t}\n\n\t/**\n\t * Return an object containing both the owner of a repository and the repositories name.\n\t *\n\t * @param fullRepo  Full repository string.\n\t * @returns         Object containing repository details, or void if not valid.\n\t */\n\tprivate getRepoDetails(fullRepo: string): RepoDetails | void {\n\t\tconst urlComps = fullRepo.match(/^.*:\\/\\/.*\\/(.*)\\/(.*)$/);\n\t\tif (!urlComps) {\n\t\t\treturn;\n\t\t}\n\n\t\treturn {\n\t\t\towner: urlComps[1],\n\t\t\trepo: urlComps[2]\n\t\t};\n\t}\n\n\t/**\n\t * Report an error to the console.\n\t *\n\t * @param error  Error object containing all required information.\n\t */\n\tprivate reportError(error: NotifyBotError): void {\n\t\tthis.logger.alert(AlertLevel.ERROR, `${error.message}: ${error.owner}/${error.repo}:${error.version}`);\n\t}\n}\n\n/**\n * Create a NotifyBot instance.\n *\n * @returns A new NotifyBot instance.\n */\nexport function createBot(): NotifyBot {\n\tconst notifyBotConfig = {\n\t\tbotName: process.env.NOTIFYBOT_NAME,\n\t\tfrontApiKey: process.env.NOTIFYBOT_FRONT_API_KEY,\n\t\tfrontUser: process.env.NOTIFYBOT_FRONT_USERNAME,\n\t\tgithubApp: process.env.NOTIFYBOT_GITHUB_INTEGRATION_ID,\n\t\tgithubPEM: process.env.NOTIFYBOT_GITHUB_PEM,\n\t\tgithubSecret: process.env.NOTIFYBOT_GITHUB_WEBHOOK_SECRET,\n\t};\n\t_.each(notifyBotConfig, (value) => {\n\t\tif (!value) {\n\t\t\tthrow new Error('At least one required envvar for NotifyBot is missing');\n\t\t}\n\t});\n\n\treturn new NotifyBot(notifyBotConfig);\n}\n"],"sourceRoot":"../../lib"}