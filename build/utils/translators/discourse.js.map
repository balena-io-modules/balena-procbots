{"version":3,"sources":["utils/translators/discourse.ts"],"names":[],"mappings":"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","file":"discourse.js","sourcesContent":["/*\n Copyright 2016-2017 Resin.io\n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n you may not use this file except in compliance with the License.\n You may obtain a copy of the License at\n\n http://www.apache.org/licenses/LICENSE-2.0\n\n Unless required by applicable law or agreed to in writing, software\n distributed under the License is distributed on an \"AS IS\" BASIS,\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n See the License for the specific language governing permissions and\n limitations under the License.\n */\n\nimport * as Promise from 'bluebird';\nimport * as _ from 'lodash';\nimport * as request from 'request-promise';\nimport { DiscourseConnectionDetails, DiscourseEmitContext, DiscourseEvent } from '../../services/discourse-types';\nimport { MessageAction, MessageContext, TransmitContext } from '../../services/messenger-types';\nimport * as Translator from './translator';\n\nexport class DiscourseTranslator implements Translator.Translator {\n\tprivate connectionDetails: DiscourseConnectionDetails;\n\n\tconstructor(data: DiscourseConnectionDetails) {\n\t\tthis.connectionDetails = data;\n\t}\n\n\t/**\n\t * Translate the provided event, enqueued by the service, into a message context.\n\t * @param event  Data in the form raw to the service.\n\t */\n\tpublic eventIntoMessage(event: DiscourseEvent): Promise<MessageContext> {\n\t\t// Encode once the common parts of a request\n\t\tconst getGeneric = {\n\t\t\tjson: true,\n\t\t\tmethod: 'GET',\n\t\t\tqs: {\n\t\t\t\tapi_key: this.connectionDetails.token,\n\t\t\t\tapi_username: this.connectionDetails.username,\n\t\t\t},\n\t\t\t// appended before execution\n\t\t\turi: `https://${this.connectionDetails.instance}`,\n\t\t};\n\t\t// Gather more complete details of the enqueued event\n\t\tconst getPost = _.cloneDeep(getGeneric);\n\t\tgetPost.uri += `/posts/${event.rawEvent.id}`;\n\t\tconst getTopic = _.cloneDeep(getGeneric);\n\t\tgetTopic.uri += `/t/${event.rawEvent.topic_id}`;\n\t\treturn Promise.props({\n\t\t\tpost: request(getPost),\n\t\t\ttopic: request(getTopic),\n\t\t})\n\t\t.then((details: {post: any, topic: any}) => {\n\t\t\t// Gather metadata and resolve\n\t\t\tconst metadata = Translator.extractMetadata(details.post.raw);\n\t\t\tconst first = details.post.post_number === 1;\n\t\t\treturn {\n\t\t\t\taction: MessageAction.Create,\n\t\t\t\tfirst,\n\t\t\t\tgenesis: metadata.genesis || event.source,\n\t\t\t\t// post_type 4 seems to correspond to whisper\n\t\t\t\thidden: first ? !details.topic.visible : details.post.post_type === 4,\n\t\t\t\tsource: event.source,\n\t\t\t\tsourceIds: {\n\t\t\t\t\t// These come in as integers, but should be strings\n\t\t\t\t\tflow: details.topic.category_id.toString(),\n\t\t\t\t\tmessage: details.post.id.toString(),\n\t\t\t\t\tthread: details.post.topic_id.toString(),\n\t\t\t\t\turl: getTopic.uri,\n\t\t\t\t\tuser: details.post.username,\n\t\t\t\t},\n\t\t\t\ttext: metadata.content,\n\t\t\t\ttitle: details.topic.title,\n\t\t\t};\n\t\t});\n\t}\n\n\t/**\n\t * Translate the provided message context into an emit context.\n\t * @param message  Standard form of the message.\n\t */\n\tpublic messageIntoEmitCreateMessage(message: TransmitContext): Promise<DiscourseEmitContext> {\n\t\t// Attempt to find the thread ID to know if this is a new topic or not\n\t\tconst topicId = message.toIds.thread;\n\t\tif (!topicId) {\n\t\t\tconst title = message.title;\n\t\t\tif (!title) {\n\t\t\t\tthrow new Error('Cannot create Discourse Thread without a title');\n\t\t\t}\n\t\t\t// A new topic request for discourse\n\t\t\treturn Promise.resolve({\n\t\t\t\tjson: true,\n\t\t\t\tmethod: 'POST',\n\t\t\t\tpath: '/posts',\n\t\t\t\tpayload: {\n\t\t\t\t\tcategory: message.toIds.flow,\n\t\t\t\t\traw: `${message.text}\\n\\n---\\n${Translator.stringifyMetadata(message)}`,\n\t\t\t\t\ttitle,\n\t\t\t\t\tunlist_topic: message.hidden ? 'true' : 'false',\n\t\t\t\t},\n\t\t\t});\n\t\t}\n\t\t// A new message request for discourse\n\t\treturn Promise.resolve({\n\t\t\tjson: true,\n\t\t\tmethod: 'POST',\n\t\t\tpath: '/posts',\n\t\t\tpayload: {\n\t\t\t\traw: `${message.text}\\n\\n---\\n${Translator.stringifyMetadata(message)}`,\n\t\t\t\ttopic_id: topicId,\n\t\t\t\twhisper: message.hidden ? 'true' : 'false',\n\t\t\t},\n\t\t});\n\t}\n\n\t/**\n\t * Translate the provided message context into an emit context that will retrieve the thread history.\n\t * @param message    Standard form of the message.\n\t * @param shortlist  *DO NOT RELY ON THIS BEING USED.*\n\t *                   Optional, if the endpoint supports it then it may use this to shortlist the responses.\n\t */\n\t// TODO: Implement\n\tpublic messageIntoEmitReadHistory(message: MessageContext, shortlist: RegExp): Promise<DiscourseEmitContext> {\n\t\tconst firstWords = shortlist.source.match(/^([\\w\\s]+)/i);\n\t\tif (firstWords) {\n\t\t\treturn {\n\t\t\t\tjson: true,\n\t\t\t\tmethod: 'GET',\n\t\t\t\tqs: {\n\t\t\t\t\t'api_key': this.connectionDetails.token,\n\t\t\t\t\t'api_username': this.connectionDetails.username,\n\t\t\t\t\t'term': firstWords[1],\n\t\t\t\t\t'search_context[type]': 'topic',\n\t\t\t\t\t'search_context[id]': message.sourceIds.thread,\n\t\t\t\t},\n\t\t\t\turi: `https://${this.connectionDetails.instance}/search/query`,\n\t\t\t};\n\t\t}\n\t\treturn {\n\t\t\tjson: true,\n\t\t\tmethod: 'GET',\n\t\t\tqs: {\n\t\t\t\tapi_key: this.connectionDetails.token,\n\t\t\t\tapi_username: this.connectionDetails.username,\n\t\t\t},\n\t\t\turi: `https://${this.connectionDetails.instance}/t/${message.sourceIds.thread}`,\n\t\t};\n\t}\n\n\t/**\n\t * Translate the provided generic name for an event into the service events to listen to.\n\t * @param name  Generic name for an event.\n\t */\n\tpublic eventNameIntoTriggers(name: string): string[] {\n\t\tconst equivalents: {[key: string]: string[]} = {\n\t\t\tmessage: ['post'],\n\t\t};\n\t\treturn equivalents[name];\n\t}\n}\n\nexport function createTranslator(data: DiscourseConnectionDetails): Translator.Translator {\n\treturn new DiscourseTranslator(data);\n}\n"],"sourceRoot":"../../../lib"}