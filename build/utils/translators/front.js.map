{"version":3,"sources":["utils/translators/front.ts"],"names":[],"mappings":"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","file":"front.js","sourcesContent":["/*\n Copyright 2016-2017 Resin.io\n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n you may not use this file except in compliance with the License.\n You may obtain a copy of the License at\n\n http://www.apache.org/licenses/LICENSE-2.0\n\n Unless required by applicable law or agreed to in writing, software\n distributed under the License is distributed on an \"AS IS\" BASIS,\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n See the License for the specific language governing permissions and\n limitations under the License.\n */\n\nimport * as Promise from 'bluebird';\nimport { Conversation, Front } from 'front-sdk';\nimport * as _ from 'lodash';\nimport * as request from 'request-promise';\nimport { FrontConnectionDetails, FrontEmitContext, FrontEvent } from '../../services/front-types';\nimport { MessageAction, MessageContext, TransmitContext } from '../../services/messenger-types';\nimport { Translator } from './translator';\n\nexport class FrontTranslator extends Translator {\n\t/** Underlying SDK object to query for data */\n\tprivate session: Front;\n\t// #200: requests that rely on this to be migrated to Front SDK\n\tprivate token: string;\n\tprivate channelPerInbox: {\n\t\t[inbox: string]: string;\n\t};\n\n\tconstructor(data: FrontConnectionDetails) {\n\t\tsuper();\n\t\tthis.session = new Front(data.token);\n\t\tthis.token = data.token;\n\t\tthis.channelPerInbox = data.channelPerInbox || {};\n\t}\n\n\t/**\n\t * Translate the provided data, enqueued by the service, into a message context\n\t * @param event  Data in the form raw to the service\n\t */\n\tpublic eventIntoMessage(event: FrontEvent): Promise<MessageContext> {\n\t\t// Calculate common request details once\n\t\tconst getGeneric = {\n\t\t\theaders: {\n\t\t\t\tauthorization: `Bearer ${this.token}`\n\t\t\t},\n\t\t\tjson: true,\n\t\t\tmethod: 'GET',\n\t\t\turi: '', // Will be over-written\n\t\t};\n\t\t// Make specific forms of the request object for further details\n\t\tconst getEvent = _.cloneDeep(getGeneric);\n\t\tgetEvent.uri = `https://api2.frontapp.com/events/${event.rawEvent.id}`;\n\t\tconst getInboxes = _.cloneDeep(getGeneric);\n\t\tgetInboxes.uri = `https://api2.frontapp.com/conversations/${event.rawEvent.conversation.id}/inboxes`;\n\t\tconst getMessages = _.cloneDeep(getGeneric);\n\t\tgetMessages.uri = `https://api2.frontapp.com/conversations/${event.rawEvent.conversation.id}/messages`;\n\t\tconst getComments = _.cloneDeep(getGeneric);\n\t\tgetComments.uri = `https://api2.frontapp.com/conversations/${event.rawEvent.conversation.id}/comments`;\n\t\t// Gather further details of the enqueued event\n\t\treturn Promise.props({\n\t\t\tcomments: request(getComments),\n\t\t\tevent: request(getEvent),\n\t\t\tinboxes: request(getInboxes),\n\t\t\tmessages: request(getMessages),\n\t\t})\n\t\t.then((details: { comments: any, event: any, inboxes: any, messages: any }) => {\n\t\t\t// Pre-calculate a couple of values, to save line width\n\t\t\tconst message = details.event.target.data;\n\t\t\tconst first = details.comments._results.length + details.messages._results.length === 1;\n\t\t\tconst metadata = Translator.extractMetadata(message.text || message.body);\n\t\t\t// Attempt to find the author of a message from the various places front might store it\n\t\t\tlet author = 'Unknown';\n\t\t\tif (message.author) {\n\t\t\t\tauthor = message.author.username;\n\t\t\t} else {\n\t\t\t\tfor (const recipient of message.recipients) {\n\t\t\t\t\tif (recipient.role === 'from') {\n\t\t\t\t\t\tauthor = recipient.handle;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t// Return the generic form of this event\n\t\t\treturn {\n\t\t\t\taction: MessageAction.Create,\n\t\t\t\tfirst,\n\t\t\t\tgenesis: metadata.genesis || event.source,\n\t\t\t\thidden: first ? metadata.hidden : details.event.type === 'comment',\n\t\t\t\tsource: event.source,\n\t\t\t\tsourceIds: {\n\t\t\t\t\tflow: details.inboxes._results[0].id,\n\t\t\t\t\tmessage: message.id,\n\t\t\t\t\tthread: details.event.conversation.id,\n\t\t\t\t\turl: `https://app.frontapp.com/open/${details.event.conversation.id}`,\n\t\t\t\t\tuser: author,\n\t\t\t\t},\n\t\t\t\ttext: metadata.content,\n\t\t\t\ttitle: details.event.conversation.subject,\n\t\t\t};\n\t\t});\n\t}\n\n\t/**\n\t * Translate the provided message context into an emit context\n\t * @param message  Standard form of the message\n\t */\n\tpublic messageIntoEmit(message: TransmitContext): Promise<FrontEmitContext> {\n\t\t// Attempt to find the thread ID to know if this is a new conversation or not\n\t\tconst conversationId = message.toIds.thread;\n\t\tif (!conversationId) {\n\t\t\t// Find the title and user ID for the event\n\t\t\tconst subject = message.title;\n\t\t\tif (!subject) {\n\t\t\t\tthrow new Error('Cannot create Front Conversation without a title');\n\t\t\t}\n\t\t\treturn this.fetchUserId(message.toIds.user).then((userId) => {\n\t\t\t\t// The specific form that may be emitted\n\t\t\t\treturn {\n\t\t\t\t\taction: 'send',\n\t\t\t\t\tobjectType: 'message',\n\t\t\t\t\tpayload: {\n\t\t\t\t\t\tauthor_id: userId,\n\t\t\t\t\t\tbody: `${message.text}<hr/><br/>${Translator.stringifyMetadata(message, 'plaintext')}`,\n\t\t\t\t\t\t// Find the relevant channel for the inbox\n\t\t\t\t\t\tchannel_id: this.channelPerInbox[message.toIds.flow],\n\t\t\t\t\t\tmetadata: {\n\t\t\t\t\t\t\tthread_ref: message.sourceIds.thread,\n\t\t\t\t\t\t},\n\t\t\t\t\t\toptions: {\n\t\t\t\t\t\t\tarchive: false,\n\t\t\t\t\t\t},\n\t\t\t\t\t\tsender: {\n\t\t\t\t\t\t\thandle: message.toIds.user,\n\t\t\t\t\t\t},\n\t\t\t\t\t\tsubject,\n\t\t\t\t\t\tto: [message.sourceIds.user],\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t});\n\t\t}\n\t\treturn Promise.props({\n\t\t\tconversation: this.session.conversation.get({conversation_id: conversationId}),\n\t\t\tuserId: this.fetchUserId(message.toIds.user)\n\t\t}).then((details: { conversation: Conversation, userId: string }) => {\n\t\t\tif (message.hidden) {\n\t\t\t\treturn {\n\t\t\t\t\taction: 'create',\n\t\t\t\t\tobjectType: 'comment',\n\t\t\t\t\tpayload: {\n\t\t\t\t\t\tauthor_id: details.userId,\n\t\t\t\t\t\tbody: `${message.text}\\n\\n---\\n${Translator.stringifyMetadata(message, 'plaintext')}`,\n\t\t\t\t\t\tconversation_id: conversationId,\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t}\n\t\t\treturn {\n\t\t\t\taction: 'reply',\n\t\t\t\tobjectType: 'message',\n\t\t\t\tpayload: {\n\t\t\t\t\tauthor_id: details.userId,\n\t\t\t\t\tbody: `${message.text}<hr/><br/>${Translator.stringifyMetadata(message, 'plaintext')}`,\n\t\t\t\t\tconversation_id: conversationId,\n\t\t\t\t\toptions: {\n\t\t\t\t\t\tarchive: false,\n\t\t\t\t\t},\n\t\t\t\t\tsubject: details.conversation.subject,\n\t\t\t\t\ttype: message.hidden ? 'comment' : 'message',\n\t\t\t\t}\n\t\t\t};\n\t\t});\n\t}\n\n\t/**\n\t * Translate the provided generic name for an event into the service events to listen to\n\t * @param name  Generic name for an event\n\t */\n\tpublic eventNameIntoTriggers(name: string): string[] {\n\t\tconst equivalents: {[key: string]: string[]} = {\n\t\t\tmessage: ['event'],\n\t\t};\n\t\treturn equivalents[name];\n\t}\n\n\t/**\n\t * Find the ID of a user specified by username.\n\t * @param username  Target username to search for.\n\t * @returns         Promise that resolves to the user id.\n\t */\n\tprivate fetchUserId = (username: string): Promise<string|undefined> => {\n\t\t// Request a list of all teammates\n\t\tconst getTeammates = {\n\t\t\theaders: {\n\t\t\t\tauthorization: `Bearer ${this.token}`\n\t\t\t},\n\t\t\tjson: true,\n\t\t\tmethod: 'GET',\n\t\t\turi: 'https://api2.frontapp.com/teammates',\n\t\t};\n\t\treturn request(getTeammates).then((teammates: {_results: Array<{username: string, id: string}>}) => {\n\t\t\t// Resolve to the ID of the first matching teammate\n\t\t\tconst teammate = _.find(teammates._results, (eachTeammate) => {\n\t\t\t\treturn eachTeammate.username === username;\n\t\t\t});\n\t\t\tif (teammate) {\n\t\t\t\treturn teammate.id;\n\t\t\t}\n\t\t});\n\t}\n}\n\nexport function createTranslator(data: FrontConnectionDetails): Translator {\n\treturn new FrontTranslator(data);\n}\n"],"sourceRoot":"../../../lib"}