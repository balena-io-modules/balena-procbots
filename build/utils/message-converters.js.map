{"version":3,"sources":["utils/message-converters.ts"],"names":[],"mappings":"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","file":"message-converters.js","sourcesContent":["import * as _ from 'lodash';\nimport {\n    DiscourseMessageEmitContext,\n} from '../services/discourse-types';\nimport {\n    FlowdockMessageEmitContext,\n} from '../services/flowdock-types';\nimport {\n    ServiceEmitContext,\n    ServiceEvent,\n} from '../services/service-types';\nimport {\n    MessageEvent,\n    MessageHandleContext,\n    MessageReceiptContext,\n    MessageReceiver,\n    MessageTransmitContext,\n    MessageTransmitter,\n    ReceiptContext,\n    ThreadHandleContext,\n    ThreadReceiptContext,\n    ThreadTransmitContext,\n    TransmitContext,\n} from './message-types';\n\n/**\n * Generate a generic message object from an specific receipt object\n * @param from source of the data\n * @param data object to transform\n */\nexport function makeGeneric(from: string, data: MessageEvent): ReceiptContext {\n    // A trivial hardcode -> retrieve -> execute block\n    const handlers: { [from: string]: { [type: string]: MessageReceiver } } = {\n        discourse: {\n            post: fromDiscoursePost,\n            topic: fromDiscourseTopic,\n        },\n        flowdock: {\n            message: fromFlowdockMessage,\n        },\n    };\n    return handlers[from][data.cookedEvent.type](data);\n}\n\n/**\n * Generate a specific emit object from a generic message object\n * @param data object to transform\n */\nexport function makeSpecific(data: TransmitContext): ServiceEmitContext {\n    // A trivial hardcode -> retrieve -> execute block\n    const converters: { [to: string]: { [type: string]: MessageTransmitter } } = {\n        discourse: {\n            message: toDiscourseMessage,\n        },\n        flowdock: {\n            message: toFlowdockMessage,\n            thread: toFlowdockThread,\n        },\n    };\n    return converters[data.to][data.type](data);\n}\n\n/**\n * Generic a specific event type string from a generic message type string\n * @param trigger generic name for the event of interest\n * @param service adapter concerned\n */\nexport function translateTrigger(trigger: string, service: string): string {\n    // A trivial hardcode -> retrieve block\n    const translations: { [service: string]: { [trigger: string]: string } } = {\n        discourse: {\n            message: 'post',\n            thread: 'topic',\n        },\n        flowdock: {\n            message: 'message',\n        },\n    };\n    return translations[service][trigger];\n}\n\n/**\n * Add accumulator objects for migration of an event towards its emitter\n * @param event received event\n * @param to destination of this event\n */\nexport function initThreadHandleContext(event: ThreadReceiptContext, to: string): ThreadHandleContext {\n    return {\n        action: event.action,\n        genesis: event.genesis,\n        private: event.private,\n        source: event.source,\n        sourceIds: event.sourceIds,\n        text: event.text,\n        to,\n        toIds: {},\n        type: event.type,\n    };\n}\n\n/**\n * Add accumulator objects for migration of an event towards its emitter\n * @param event received event\n * @param to destination of this event\n */\nexport function initMessageHandleContext(event: MessageReceiptContext, to: string): MessageHandleContext {\n    return {\n        action: event.action,\n        genesis: event.genesis,\n        private: event.private,\n        source: event.source,\n        sourceIds: event.sourceIds,\n        text: event.text,\n        to,\n        toIds: {},\n        type: event.type,\n    };\n}\n\n/**\n * Ensure that an object has accumulated all of its details\n * @param event candidate event for emitting\n */\nexport function initTransmitContext(event: MessageHandleContext): MessageTransmitContext {\n    event = _.clone(event);\n    return event as MessageTransmitContext;\n}\n\n/**\n * Convert an event from the form the adapter enqueues into a more generic message event\n * @param data enqueued object, raw from the adapter\n */\nfunction fromDiscoursePost(data: ServiceEvent): MessageReceiptContext {\n    // Retrieve publicity indicators from the environment\n    const pub = JSON.parse(process.env.MESSAGE_CONVERTOR_PUBLIC_INDICATORS).join('|\\\\');\n    const priv = JSON.parse(process.env.MESSAGE_CONVERTOR_PRIVATE_INDICATORS).join('|\\\\');\n    // A regex that looks for publicity indicators, possibly inside [], and then doesn't capture them\n    const ignorePublic = `(?:\\\\[?(?:\\\\${pub}|\\\\${priv})\\\\]?)?`;\n    // Ignore the public indicator then capture non whitespace characters within literal parentheses\n    const findSource = new RegExp(`^${ignorePublic}\\\\((\\\\S*)\\\\)`, 'i');\n    // Ignore the public indicator and the source section then capture everything\n    const findContent = new RegExp(`^${ignorePublic}(?:\\\\(\\\\S*\\\\))?\\\\s?([\\\\s\\\\S]*)$`, 'i');\n    // Extract the encoded genesis for this event\n    const sourceArray: string[] = data.rawEvent.raw.match(findSource);\n    const genesis = sourceArray === null ? data.source : sourceArray[1];\n    // Create and return the generic message event\n    return {\n        action: 'create',\n        genesis,\n        private: data.rawEvent.post_type === 4,\n        source: 'discourse',\n        sourceIds: {\n            message: data.rawEvent.id,\n            room: data.cookedEvent.category,\n            thread: data.rawEvent.topic_id,\n            user: data.rawEvent.username,\n        },\n        text: data.rawEvent.raw.match(findContent)[1],\n        type: 'message',\n    };\n}\n\n/**\n * Convert an event from the form the adapter enqueues into a more generic message event\n * @param data enqueued object, raw from the adapter\n */\nfunction fromDiscourseTopic(data: ServiceEvent): ThreadReceiptContext {\n    // Create and return the generic message event\n    return {\n        action: 'create',\n        genesis: data.source,\n        private: false,\n        source: data.source,\n        sourceIds: {\n            message: `topic_${data.rawEvent.id}`,\n            room: data.rawEvent.category_id,\n            thread: data.rawEvent.id,\n            user: data.rawEvent.details.created_by.username,\n        },\n        text: data.rawEvent.title,\n        type: 'thread',\n    };\n}\n\n/**\n * Convert an event from the form the adapter enqueues into a more generic message event\n * @param data enqueued object, raw from the adapter\n */\nfunction fromFlowdockMessage(data: ServiceEvent): MessageReceiptContext {\n    // Retrieve publicity indicators from the environment\n    const pub = JSON.parse(process.env.MESSAGE_CONVERTOR_PUBLIC_INDICATORS).join('|\\\\');\n    const priv = JSON.parse(process.env.MESSAGE_CONVERTOR_PRIVATE_INDICATORS).join('|\\\\');\n    // A regex that looks for the presence of a public indicator\n    const isPublic = new RegExp(`^\\\\[?\\\\${pub}\\\\]?`, 'i');\n    // A regex that looks for publicity indicators, possibly inside [], and then doesn't capture them\n    const ignorePublic = `(?:\\\\[?(?:\\\\${pub}|\\\\${priv})\\\\]?)?`;\n    // Ignore the public indicator then capture non whitespace characters within literal parentheses\n    const findSource = new RegExp(`^${ignorePublic}\\\\((\\\\S*)\\\\)`, 'i');\n    // Ignore the public indicator and the source section then capture everything\n    const findContent = new RegExp(`^${ignorePublic}(?:\\\\(\\\\S*\\\\))?\\\\s?([\\\\s\\\\S]*)$`, 'i');\n    // Extract the encoded genesis for this event\n    const sourceArray: string[] = data.rawEvent.content.match(findSource);\n    const genesis = sourceArray === null ? data.source : sourceArray[1];\n    // Create and return the generic message event\n    return {\n        action: 'create',\n        genesis,\n        private: data.rawEvent.content.match(isPublic) === null,\n        source: data.source,\n        sourceIds: {\n            message: data.rawEvent.id,\n            room: data.cookedEvent.flow,\n            thread: data.rawEvent.thread_id,\n            user: data.rawEvent.user,\n        },\n        text: data.rawEvent.content.match(findContent)[1],\n        type: 'message',\n    };\n}\n\n/**\n * Convert an event from a generic message event into a form specific to the adapter\n * @param data generic form of the event\n */\nfunction toDiscourseMessage(data: MessageTransmitContext): DiscourseMessageEmitContext {\n    // Retrieve publicity indicators from the environment\n    const pub = JSON.parse(process.env.MESSAGE_CONVERTOR_PUBLIC_INDICATORS)[0];\n    const priv = JSON.parse(process.env.MESSAGE_CONVERTOR_PRIVATE_INDICATORS)[0];\n    // Build the content with the indicator and genesis at the front\n    const content =\n        `[${data.private ? priv : pub}](${data.genesis})`\n        + data.text;\n    // Create and return the generic message event\n    return {\n        api_token: data.toIds.token,\n        api_username: data.toIds.user,\n        raw: content,\n        topic_id: data.toIds.thread,\n        whisper: data.private ? 'true' : 'false',\n    };\n}\n\n/**\n * Convert an event from a generic message event into a form specific to the adapter\n * @param data generic form of the event\n */\nfunction toFlowdockMessage(data: MessageTransmitContext): FlowdockMessageEmitContext {\n    // Retrieve publicity indicators from the environment\n    const pub = JSON.parse(process.env.MESSAGE_CONVERTOR_PUBLIC_INDICATORS)[0];\n    const priv = JSON.parse(process.env.MESSAGE_CONVERTOR_PRIVATE_INDICATORS)[0];\n    // Build the content with the indicator and genesis at the front\n    const content =\n        `[${data.private ? priv : pub}](${data.genesis})`\n        + data.text;\n    // Create and return the generic message event\n    return {\n        content,\n        event: 'message',\n        external_user_name: data.toIds.user,\n        flow: data.toIds.room,\n        thread_id: data.toIds.thread,\n    };\n}\n\n/**\n * Convert an event from a generic message event into a form specific to the adapter\n * @param data generic form of the event\n */\nfunction toFlowdockThread(data: ThreadTransmitContext): FlowdockMessageEmitContext {\n    // Retrieve publicity indicators from the environment\n    const pub = JSON.parse(process.env.MESSAGE_CONVERTOR_PUBLIC_INDICATORS)[0];\n    // Create and return the generic message event\n    return {\n        content: `[${pub}](${data.genesis})${data.text}`,\n        event: 'message',\n        external_user_name: data.toIds.user,\n        flow: data.toIds.room,\n    };\n}\n"],"sourceRoot":"../../lib"}